{
    "0": {
        "state": null,
        "thought": "2 + 8 = 10 (left: 10 10 13)\n8 / 2 = 4 (left: 4 10 13)\n13 - 2 = 11 (left: 8 10 11)\n2 * 8 = 16 (left: 10 13 16)\n10 - 2 = 8 (left: 8 8 13)\n13 + 2 = 15 (left: 8 10 15)\n2 * 10 = 20 (left: 8 13 20)\n13 / 2 = 6.5 (left: 6.5 8 10)\n8 - 2 = 6 (left: 6 10 13)\n13 - 8 = 5 (left: 2 5 10)\n13 / 8 = 1.625 (left: 1.625 2 10)\n13 - 10 = 3 (left: 2 3 8)",
        "value": null,
        "opening_remark": null,
        "children": {
            "0_0": {
                "state": "2 + 8 = 10 (left: 10 10 13)",
                "thought": null,
                "value": 0.003,
                "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                "children": {},
                "closing_remark": null,
                "backtracked": false
            },
            "0_1": {
                "state": "8 / 2 = 4 (left: 4 10 13)",
                "thought": "4 + 10 = 14 (left: 13 14)\n10 - 4 = 6 (left: 6 13)\n13 - 4 = 9 (left: 9 10)\n13 - 10 = 3 (left: 3 4)\n10 / 4 = 2.5 (left: 2.5 13)\n4 * 10 = 40 (left: 13 40)",
                "value": 3.0,
                "opening_remark": "Value does exceed heuristic threshold, childs will be traversed.",
                "children": {
                    "0_1_0": {
                        "state": "8 / 2 = 4 (left: 4 10 13)\n4 + 10 = 14 (left: 13 14)",
                        "thought": null,
                        "value": 0.003,
                        "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                        "children": {},
                        "closing_remark": null,
                        "backtracked": false
                    },
                    "0_1_1": {
                        "state": "8 / 2 = 4 (left: 4 10 13)\n10 - 4 = 6 (left: 6 13)",
                        "thought": null,
                        "value": 0.003,
                        "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                        "children": {},
                        "closing_remark": null,
                        "backtracked": false
                    },
                    "0_1_2": {
                        "state": "8 / 2 = 4 (left: 4 10 13)\n13 - 4 = 9 (left: 9 10)",
                        "thought": null,
                        "value": 0.003,
                        "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                        "children": {},
                        "closing_remark": null,
                        "backtracked": false
                    },
                    "0_1_3": {
                        "state": "8 / 2 = 4 (left: 4 10 13)\n13 - 10 = 3 (left: 3 4)",
                        "thought": null,
                        "value": 0.003,
                        "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                        "children": {},
                        "closing_remark": null,
                        "backtracked": false
                    },
                    "0_1_4": {
                        "state": "8 / 2 = 4 (left: 4 10 13)\n10 / 4 = 2.5 (left: 2.5 13)",
                        "thought": null,
                        "value": 2.001,
                        "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                        "children": {},
                        "closing_remark": null,
                        "backtracked": false
                    },
                    "0_1_5": {
                        "state": "8 / 2 = 4 (left: 4 10 13)\n4 * 10 = 40 (left: 13 40)",
                        "thought": null,
                        "value": 0.003,
                        "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                        "children": {},
                        "closing_remark": null,
                        "backtracked": false
                    }
                },
                "closing_remark": null,
                "backtracked": false,
                "backtracked_to": "0"
            },
            "0_2": {
                "state": "13 - 2 = 11 (left: 8 10 11)",
                "thought": null,
                "value": 1.002,
                "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                "children": {},
                "closing_remark": null,
                "backtracked": false
            },
            "0_3": {
                "state": "2 * 8 = 16 (left: 10 13 16)",
                "thought": null,
                "value": 0.003,
                "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                "children": {},
                "closing_remark": null,
                "backtracked": false
            },
            "0_4": {
                "state": "10 - 2 = 8 (left: 8 9 12)",
                "thought": "8 + 9 = 17 (left: 12 17)\n9 - 8 = 1 (left: 1 12)\n12 - 8 = 4 (left: 4 9)\n12 - 9 = 3 (left: 3 8)\n8 * 9 = 72 (left: 12 72)\n12 / 8 = 1.5 (left: 1.5 9)\n9 / 8 = 1.125 (left: 1.125 12)",
                "value": 3.0,
                "opening_remark": "Value does exceed heuristic threshold, childs will be traversed.",
                "children": {
                    "0_4_0": {
                        "state": "10 - 2 = 8 (left: 8 9 12)\n8 + 9 = 17 (left: 12 17)",
                        "thought": null,
                        "value": 0.003,
                        "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                        "children": {},
                        "closing_remark": null,
                        "backtracked": false
                    },
                    "0_4_1": {
                        "state": "10 - 2 = 8 (left: 8 9 12)\n9 - 8 = 1 (left: 1 12)",
                        "thought": null,
                        "value": 0.003,
                        "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                        "children": {},
                        "closing_remark": null,
                        "backtracked": false
                    },
                    "0_4_2": {
                        "state": "10 - 2 = 8 (left: 8 9 12)\n12 - 8 = 4 (left: 4 9)",
                        "thought": null,
                        "value": 0.003,
                        "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                        "children": {},
                        "closing_remark": null,
                        "backtracked": false
                    },
                    "0_4_3": {
                        "state": "10 - 2 = 8 (left: 8 9 12)\n12 - 9 = 3 (left: 3 8)",
                        "thought": "3 + 8 = 11 (left: 11)\n8 - 3 = 5 (left: 5)\n3 * 8 = 24 (left: 24)\n8 / 3 = 2.67 (left: 2.67)",
                        "value": 60.0,
                        "opening_remark": "Value does exceed heuristic threshold, childs will be traversed.",
                        "children": {
                            "0_4_3_0": {
                                "state": "10 - 2 = 8 (left: 8 9 12)\n12 - 9 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)",
                                "thought": null,
                                "value": 0.003,
                                "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                                "children": {},
                                "closing_remark": null,
                                "backtracked": false
                            },
                            "0_4_3_1": {
                                "state": "10 - 2 = 8 (left: 8 9 12)\n12 - 9 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                                "thought": null,
                                "value": 0.003,
                                "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                                "children": {},
                                "closing_remark": null,
                                "backtracked": false
                            },
                            "0_4_3_2": {
                                "state": "10 - 2 = 8 (left: 8 9 12)\n12 - 9 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                                "thought": "Answer: (10 - 2) * (12 - 9) = 24",
                                "value": 60.0,
                                "opening_remark": "Value does exceed heuristic threshold, childs will be traversed.",
                                "children": {
                                    "0_4_3_2_0": {
                                        "state": "10 - 2 = 8 (left: 8 9 12)\n12 - 9 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (10 - 2) * (12 - 9) = 24",
                                        "thought": null,
                                        "value": 0.003,
                                        "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                                        "children": {},
                                        "closing_remark": null,
                                        "backtracked": true,
                                        "backtracked_to": "0_4_3_2"
                                    }
                                },
                                "closing_remark": null,
                                "backtracked": false
                            }
                        },
                        "closing_remark": null,
                        "backtracked": true,
                        "backtracked_to": "0_4"
                    }
                },
                "closing_remark": null,
                "backtracked": true,
                "backtracked_to": "0"
            }
        },
        "closing_remark": null,
        "backtracked": false
    }
}