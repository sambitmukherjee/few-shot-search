{
    "0": {
        "state": null,
        "thought": "5 + 5 = 10 (left: 6 6 10)\n5 * 5 = 25 (left: 6 6 25)\n6 - 5 = 1 (left: 1 5 6)\n6 / 5 = 1.2 (left: 1.2 5 6)\n6 + 5 = 11 (left: 5 6 11)\n6 * 5 = 30 (left: 5 6 30)",
        "value": null,
        "opening_remark": null,
        "children": {
            "0_0": {
                "state": "5 + 5 = 10 (left: 6 6 10)",
                "thought": "6 + 6 = 12 (left: 10 12)\n6 * 6 = 36 (left: 10 36)\n10 - 6 = 4 (left: 4 6)\n10 / 6 = 1.67 (left: 1.67 6)\n6 - 6 = 0 (left: 0 10)\n10 + 6 = 16 (left: 6 16)",
                "value": 60.0,
                "opening_remark": "Value does exceed heuristic threshold, childs will be traversed.",
                "children": {
                    "0_0_0": {
                        "state": "5 + 5 = 10 (left: 6 6 10)\n6 + 6 = 12 (left: 10 12)",
                        "thought": null,
                        "value": 0.003,
                        "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                        "children": {},
                        "closing_remark": null,
                        "backtracked": false
                    },
                    "0_0_1": {
                        "state": "5 + 5 = 10 (left: 6 6 10)\n6 * 6 = 36 (left: 10 36)",
                        "thought": null,
                        "value": 0.003,
                        "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                        "children": {},
                        "closing_remark": null,
                        "backtracked": false
                    },
                    "0_0_2": {
                        "state": "5 + 5 = 10 (left: 6 6 10)\n10 - 6 = 4 (left: 4 6)",
                        "thought": "4 + 6 = 10 (left: 10)\n6 - 4 = 2 (left: 2)\n4 * 6 = 24 (left: 24)\n6 / 4 = 1.5 (left: 1.5)",
                        "value": 60.0,
                        "opening_remark": "Value does exceed heuristic threshold, childs will be traversed.",
                        "children": {
                            "0_0_2_0": {
                                "state": "5 + 5 = 10 (left: 6 6 10)\n10 - 6 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                                "thought": null,
                                "value": 0.003,
                                "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                                "children": {},
                                "closing_remark": null,
                                "backtracked": false
                            },
                            "0_0_2_1": {
                                "state": "5 + 5 = 10 (left: 6 6 10)\n10 - 6 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                                "thought": null,
                                "value": 0.002,
                                "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                                "children": {},
                                "closing_remark": null,
                                "backtracked": false
                            },
                            "0_0_2_2": {
                                "state": "5 + 5 = 10 (left: 6 6 10)\n10 - 6 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                                "thought": "Answer: (5 + 5 - 6) * 6 = 24",
                                "value": 40.0,
                                "opening_remark": "Value does exceed heuristic threshold, childs will be traversed.",
                                "children": {
                                    "0_0_2_2_0": {
                                        "state": "5 + 5 = 10 (left: 6 6 10)\n10 - 6 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (5 + 5 - 6) * 6 = 24",
                                        "thought": null,
                                        "value": 60.0,
                                        "opening_remark": "Value does exceed heuristic threshold, childs will be traversed.",
                                        "children": {},
                                        "closing_remark": null,
                                        "backtracked": false
                                    }
                                },
                                "closing_remark": null,
                                "backtracked": true,
                                "backtracked_to": "0_0_2"
                            }
                        },
                        "closing_remark": null,
                        "backtracked": true,
                        "backtracked_to": "0_0"
                    }
                },
                "closing_remark": null,
                "backtracked": true,
                "backtracked_to": "0"
            }
        },
        "closing_remark": null,
        "backtracked": false
    }
}