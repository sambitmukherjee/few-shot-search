{
  "summary": {
    "total_checks": 283,
    "passed": 282,
    "failed": 1
  },
  "checks_by_type": {
    "pseudo_recursive_call": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-29T22:42:09.522977",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-29T22:44:02.822372",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-29T22:45:48.025511",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-29T22:47:22.688111",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-29T22:48:37.541001",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_6",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-29T22:50:05.340886",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_7",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-29T22:51:28.043992",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_8",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-29T22:52:36.177912",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_9",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-29T22:53:52.556442",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        }
      ]
    },
    "child_state": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "child_state",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State validation passed: Last thought '1 + 3 = 4 (left: 4 5 6)' found in parent's thoughts",
          "timestamp": "2025-05-29T22:42:09.523027",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '1 + 3 = 4 (left: 4 5 6)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "1 + 3 = 4 (left: 4 5 6)",
              "3 - 1 = 2 (left: 2 5 6)",
              "5 - 1 = 4 (left: 3 4 6)",
              "6 - 1 = 5 (left: 3 5 5)",
              "1 * 3 = 3 (left: 3 5 6)",
              "3 * 1 = 3 (left: 3 5 6)",
              "5 * 1 = 5 (left: 3 5 6)",
              "6 * 1 = 6 (left: 3 5 6)",
              "5 / 1 = 5 (left: 3 5 6)",
              "6 / 1 = 6 (left: 3 5 6)",
              "3 + 5 = 8 (left: 1 6 8)",
              "5 - 3 = 2 (left: 1 2 6)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 5 = 15 (left: 1 6 15)",
              "5 * 3 = 15 (left: 1 6 15)",
              "5 / 3 = 1.66667 (left: 1 1.66667 6)",
              "6 + 5 = 11 (left: 1 3 11)",
              "5 - 6 = -1 (left: -1 1 3)",
              "6 - 5 = 1 (left: 1 1 3)",
              "5 * 6 = 30 (left: 1 3 30)",
              "6 * 5 = 30 (left: 1 3 30)",
              "6 / 5 = 1.2 (left: 1 1.2 3)",
              "3 + 6 = 9 (left: 1 5 9)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 6 = 18 (left: 1 5 18)",
              "6 * 3 = 18 (left: 1 5 18)",
              "6 / 3 = 2 (left: 1 2 5)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State validation passed: Last thought '3 - 1 = 2 (left: 2 5 6)' found in parent's thoughts",
          "timestamp": "2025-05-29T22:44:02.822416",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '3 - 1 = 2 (left: 2 5 6)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "1 + 3 = 4 (left: 4 5 6)",
              "3 - 1 = 2 (left: 2 5 6)",
              "5 - 1 = 4 (left: 3 4 6)",
              "6 - 1 = 5 (left: 3 5 5)",
              "1 * 3 = 3 (left: 3 5 6)",
              "3 * 1 = 3 (left: 3 5 6)",
              "5 * 1 = 5 (left: 3 5 6)",
              "6 * 1 = 6 (left: 3 5 6)",
              "5 / 1 = 5 (left: 3 5 6)",
              "6 / 1 = 6 (left: 3 5 6)",
              "3 + 5 = 8 (left: 1 6 8)",
              "5 - 3 = 2 (left: 1 2 6)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 5 = 15 (left: 1 6 15)",
              "5 * 3 = 15 (left: 1 6 15)",
              "5 / 3 = 1.66667 (left: 1 1.66667 6)",
              "6 + 5 = 11 (left: 1 3 11)",
              "5 - 6 = -1 (left: -1 1 3)",
              "6 - 5 = 1 (left: 1 1 3)",
              "5 * 6 = 30 (left: 1 3 30)",
              "6 * 5 = 30 (left: 1 3 30)",
              "6 / 5 = 1.2 (left: 1 1.2 3)",
              "3 + 6 = 9 (left: 1 5 9)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 6 = 18 (left: 1 5 18)",
              "6 * 3 = 18 (left: 1 5 18)",
              "6 / 3 = 2 (left: 1 2 5)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "State validation passed: Last thought '5 - 1 = 4 (left: 3 4 6)' found in parent's thoughts",
          "timestamp": "2025-05-29T22:45:48.025556",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '5 - 1 = 4 (left: 3 4 6)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "1 + 3 = 4 (left: 4 5 6)",
              "3 - 1 = 2 (left: 2 5 6)",
              "5 - 1 = 4 (left: 3 4 6)",
              "6 - 1 = 5 (left: 3 5 5)",
              "1 * 3 = 3 (left: 3 5 6)",
              "3 * 1 = 3 (left: 3 5 6)",
              "5 * 1 = 5 (left: 3 5 6)",
              "6 * 1 = 6 (left: 3 5 6)",
              "5 / 1 = 5 (left: 3 5 6)",
              "6 / 1 = 6 (left: 3 5 6)",
              "3 + 5 = 8 (left: 1 6 8)",
              "5 - 3 = 2 (left: 1 2 6)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 5 = 15 (left: 1 6 15)",
              "5 * 3 = 15 (left: 1 6 15)",
              "5 / 3 = 1.66667 (left: 1 1.66667 6)",
              "6 + 5 = 11 (left: 1 3 11)",
              "5 - 6 = -1 (left: -1 1 3)",
              "6 - 5 = 1 (left: 1 1 3)",
              "5 * 6 = 30 (left: 1 3 30)",
              "6 * 5 = 30 (left: 1 3 30)",
              "6 / 5 = 1.2 (left: 1 1.2 3)",
              "3 + 6 = 9 (left: 1 5 9)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 6 = 18 (left: 1 5 18)",
              "6 * 3 = 18 (left: 1 5 18)",
              "6 / 3 = 2 (left: 1 2 5)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "State validation passed: Last thought '1 * 3 = 3 (left: 3 5 6)' found in parent's thoughts",
          "timestamp": "2025-05-29T22:47:22.688156",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '1 * 3 = 3 (left: 3 5 6)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "1 + 3 = 4 (left: 4 5 6)",
              "3 - 1 = 2 (left: 2 5 6)",
              "5 - 1 = 4 (left: 3 4 6)",
              "6 - 1 = 5 (left: 3 5 5)",
              "1 * 3 = 3 (left: 3 5 6)",
              "3 * 1 = 3 (left: 3 5 6)",
              "5 * 1 = 5 (left: 3 5 6)",
              "6 * 1 = 6 (left: 3 5 6)",
              "5 / 1 = 5 (left: 3 5 6)",
              "6 / 1 = 6 (left: 3 5 6)",
              "3 + 5 = 8 (left: 1 6 8)",
              "5 - 3 = 2 (left: 1 2 6)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 5 = 15 (left: 1 6 15)",
              "5 * 3 = 15 (left: 1 6 15)",
              "5 / 3 = 1.66667 (left: 1 1.66667 6)",
              "6 + 5 = 11 (left: 1 3 11)",
              "5 - 6 = -1 (left: -1 1 3)",
              "6 - 5 = 1 (left: 1 1 3)",
              "5 * 6 = 30 (left: 1 3 30)",
              "6 * 5 = 30 (left: 1 3 30)",
              "6 / 5 = 1.2 (left: 1 1.2 3)",
              "3 + 6 = 9 (left: 1 5 9)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 6 = 18 (left: 1 5 18)",
              "6 * 3 = 18 (left: 1 5 18)",
              "6 / 3 = 2 (left: 1 2 5)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "State validation passed: Last thought '3 * 1 = 3 (left: 3 5 6)' found in parent's thoughts",
          "timestamp": "2025-05-29T22:48:37.541050",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '3 * 1 = 3 (left: 3 5 6)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "1 + 3 = 4 (left: 4 5 6)",
              "3 - 1 = 2 (left: 2 5 6)",
              "5 - 1 = 4 (left: 3 4 6)",
              "6 - 1 = 5 (left: 3 5 5)",
              "1 * 3 = 3 (left: 3 5 6)",
              "3 * 1 = 3 (left: 3 5 6)",
              "5 * 1 = 5 (left: 3 5 6)",
              "6 * 1 = 6 (left: 3 5 6)",
              "5 / 1 = 5 (left: 3 5 6)",
              "6 / 1 = 6 (left: 3 5 6)",
              "3 + 5 = 8 (left: 1 6 8)",
              "5 - 3 = 2 (left: 1 2 6)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 5 = 15 (left: 1 6 15)",
              "5 * 3 = 15 (left: 1 6 15)",
              "5 / 3 = 1.66667 (left: 1 1.66667 6)",
              "6 + 5 = 11 (left: 1 3 11)",
              "5 - 6 = -1 (left: -1 1 3)",
              "6 - 5 = 1 (left: 1 1 3)",
              "5 * 6 = 30 (left: 1 3 30)",
              "6 * 5 = 30 (left: 1 3 30)",
              "6 / 5 = 1.2 (left: 1 1.2 3)",
              "3 + 6 = 9 (left: 1 5 9)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 6 = 18 (left: 1 5 18)",
              "6 * 3 = 18 (left: 1 5 18)",
              "6 / 3 = 2 (left: 1 2 5)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_6",
          "result": "PASS",
          "reason": "State validation passed: Last thought '5 * 1 = 5 (left: 3 5 6)' found in parent's thoughts",
          "timestamp": "2025-05-29T22:50:05.340949",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '5 * 1 = 5 (left: 3 5 6)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "1 + 3 = 4 (left: 4 5 6)",
              "3 - 1 = 2 (left: 2 5 6)",
              "5 - 1 = 4 (left: 3 4 6)",
              "6 - 1 = 5 (left: 3 5 5)",
              "1 * 3 = 3 (left: 3 5 6)",
              "3 * 1 = 3 (left: 3 5 6)",
              "5 * 1 = 5 (left: 3 5 6)",
              "6 * 1 = 6 (left: 3 5 6)",
              "5 / 1 = 5 (left: 3 5 6)",
              "6 / 1 = 6 (left: 3 5 6)",
              "3 + 5 = 8 (left: 1 6 8)",
              "5 - 3 = 2 (left: 1 2 6)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 5 = 15 (left: 1 6 15)",
              "5 * 3 = 15 (left: 1 6 15)",
              "5 / 3 = 1.66667 (left: 1 1.66667 6)",
              "6 + 5 = 11 (left: 1 3 11)",
              "5 - 6 = -1 (left: -1 1 3)",
              "6 - 5 = 1 (left: 1 1 3)",
              "5 * 6 = 30 (left: 1 3 30)",
              "6 * 5 = 30 (left: 1 3 30)",
              "6 / 5 = 1.2 (left: 1 1.2 3)",
              "3 + 6 = 9 (left: 1 5 9)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 6 = 18 (left: 1 5 18)",
              "6 * 3 = 18 (left: 1 5 18)",
              "6 / 3 = 2 (left: 1 2 5)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_7",
          "result": "PASS",
          "reason": "State validation passed: Last thought '6 * 1 = 6 (left: 3 5 6)' found in parent's thoughts",
          "timestamp": "2025-05-29T22:51:28.044036",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '6 * 1 = 6 (left: 3 5 6)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "1 + 3 = 4 (left: 4 5 6)",
              "3 - 1 = 2 (left: 2 5 6)",
              "5 - 1 = 4 (left: 3 4 6)",
              "6 - 1 = 5 (left: 3 5 5)",
              "1 * 3 = 3 (left: 3 5 6)",
              "3 * 1 = 3 (left: 3 5 6)",
              "5 * 1 = 5 (left: 3 5 6)",
              "6 * 1 = 6 (left: 3 5 6)",
              "5 / 1 = 5 (left: 3 5 6)",
              "6 / 1 = 6 (left: 3 5 6)",
              "3 + 5 = 8 (left: 1 6 8)",
              "5 - 3 = 2 (left: 1 2 6)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 5 = 15 (left: 1 6 15)",
              "5 * 3 = 15 (left: 1 6 15)",
              "5 / 3 = 1.66667 (left: 1 1.66667 6)",
              "6 + 5 = 11 (left: 1 3 11)",
              "5 - 6 = -1 (left: -1 1 3)",
              "6 - 5 = 1 (left: 1 1 3)",
              "5 * 6 = 30 (left: 1 3 30)",
              "6 * 5 = 30 (left: 1 3 30)",
              "6 / 5 = 1.2 (left: 1 1.2 3)",
              "3 + 6 = 9 (left: 1 5 9)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 6 = 18 (left: 1 5 18)",
              "6 * 3 = 18 (left: 1 5 18)",
              "6 / 3 = 2 (left: 1 2 5)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_8",
          "result": "PASS",
          "reason": "State validation passed: Last thought '5 / 1 = 5 (left: 3 5 6)' found in parent's thoughts",
          "timestamp": "2025-05-29T22:52:36.177971",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '5 / 1 = 5 (left: 3 5 6)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "1 + 3 = 4 (left: 4 5 6)",
              "3 - 1 = 2 (left: 2 5 6)",
              "5 - 1 = 4 (left: 3 4 6)",
              "6 - 1 = 5 (left: 3 5 5)",
              "1 * 3 = 3 (left: 3 5 6)",
              "3 * 1 = 3 (left: 3 5 6)",
              "5 * 1 = 5 (left: 3 5 6)",
              "6 * 1 = 6 (left: 3 5 6)",
              "5 / 1 = 5 (left: 3 5 6)",
              "6 / 1 = 6 (left: 3 5 6)",
              "3 + 5 = 8 (left: 1 6 8)",
              "5 - 3 = 2 (left: 1 2 6)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 5 = 15 (left: 1 6 15)",
              "5 * 3 = 15 (left: 1 6 15)",
              "5 / 3 = 1.66667 (left: 1 1.66667 6)",
              "6 + 5 = 11 (left: 1 3 11)",
              "5 - 6 = -1 (left: -1 1 3)",
              "6 - 5 = 1 (left: 1 1 3)",
              "5 * 6 = 30 (left: 1 3 30)",
              "6 * 5 = 30 (left: 1 3 30)",
              "6 / 5 = 1.2 (left: 1 1.2 3)",
              "3 + 6 = 9 (left: 1 5 9)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 6 = 18 (left: 1 5 18)",
              "6 * 3 = 18 (left: 1 5 18)",
              "6 / 3 = 2 (left: 1 2 5)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_9",
          "result": "PASS",
          "reason": "State validation passed: Last thought '6 / 1 = 6 (left: 3 5 6)' found in parent's thoughts",
          "timestamp": "2025-05-29T22:53:52.556487",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '6 / 1 = 6 (left: 3 5 6)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "1 + 3 = 4 (left: 4 5 6)",
              "3 - 1 = 2 (left: 2 5 6)",
              "5 - 1 = 4 (left: 3 4 6)",
              "6 - 1 = 5 (left: 3 5 5)",
              "1 * 3 = 3 (left: 3 5 6)",
              "3 * 1 = 3 (left: 3 5 6)",
              "5 * 1 = 5 (left: 3 5 6)",
              "6 * 1 = 6 (left: 3 5 6)",
              "5 / 1 = 5 (left: 3 5 6)",
              "6 / 1 = 6 (left: 3 5 6)",
              "3 + 5 = 8 (left: 1 6 8)",
              "5 - 3 = 2 (left: 1 2 6)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 5 = 15 (left: 1 6 15)",
              "5 * 3 = 15 (left: 1 6 15)",
              "5 / 3 = 1.66667 (left: 1 1.66667 6)",
              "6 + 5 = 11 (left: 1 3 11)",
              "5 - 6 = -1 (left: -1 1 3)",
              "6 - 5 = 1 (left: 1 1 3)",
              "5 * 6 = 30 (left: 1 3 30)",
              "6 * 5 = 30 (left: 1 3 30)",
              "6 / 5 = 1.2 (left: 1 1.2 3)",
              "3 + 6 = 9 (left: 1 5 9)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 6 = 18 (left: 1 5 18)",
              "6 * 3 = 18 (left: 1 5 18)",
              "6 / 3 = 2 (left: 1 2 5)"
            ],
            "parent_state": null
          }
        }
      ]
    },
    "child_id_assignment": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "node_id 0_0 matches thought position.",
          "timestamp": "2025-05-29T22:42:09.523070",
          "event_type": "validation",
          "details": {
            "node_id": "0_0",
            "state": "1 + 3 = 4 (left: 4 5 6)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 5 6)",
              "3 - 1 = 2 (left: 2 5 6)",
              "5 - 1 = 4 (left: 3 4 6)",
              "6 - 1 = 5 (left: 3 5 5)",
              "1 * 3 = 3 (left: 3 5 6)",
              "3 * 1 = 3 (left: 3 5 6)",
              "5 * 1 = 5 (left: 3 5 6)",
              "6 * 1 = 6 (left: 3 5 6)",
              "5 / 1 = 5 (left: 3 5 6)",
              "6 / 1 = 6 (left: 3 5 6)",
              "3 + 5 = 8 (left: 1 6 8)",
              "5 - 3 = 2 (left: 1 2 6)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 5 = 15 (left: 1 6 15)",
              "5 * 3 = 15 (left: 1 6 15)",
              "5 / 3 = 1.66667 (left: 1 1.66667 6)",
              "6 + 5 = 11 (left: 1 3 11)",
              "5 - 6 = -1 (left: -1 1 3)",
              "6 - 5 = 1 (left: 1 1 3)",
              "5 * 6 = 30 (left: 1 3 30)",
              "6 * 5 = 30 (left: 1 3 30)",
              "6 / 5 = 1.2 (left: 1 1.2 3)",
              "3 + 6 = 9 (left: 1 5 9)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 6 = 18 (left: 1 5 18)",
              "6 * 3 = 18 (left: 1 5 18)",
              "6 / 3 = 2 (left: 1 2 5)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_0",
          "result": "PASS",
          "reason": "node_id 0_0_0 matches thought position.",
          "timestamp": "2025-05-29T22:42:36.301762",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_0",
            "state": "4 + 5 = 9 (left: 6 9)",
            "thoughts": [
              "4 + 5 = 9 (left: 6 9)",
              "5 + 6 = 11 (left: 4 11)",
              "6 + 4 = 10 (left: 5 10)",
              "5 - 4 = 1 (left: 1 6)",
              "6 - 4 = 2 (left: 2 5)",
              "6 - 5 = 1 (left: 1 4)",
              "4 * 5 = 20 (left: 6 20)",
              "5 * 6 = 30 (left: 4 30)",
              "6 / 4 = 1.5 (left: 1.5 5)",
              "5 / 4 = 1.25 (left: 1.25 6)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "node_id 0_0_1 matches thought position.",
          "timestamp": "2025-05-29T22:42:44.709073",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_1",
            "state": "5 + 6 = 11 (left: 4 11)",
            "thoughts": [
              "4 + 5 = 9 (left: 6 9)",
              "5 + 6 = 11 (left: 4 11)",
              "6 + 4 = 10 (left: 5 10)",
              "5 - 4 = 1 (left: 1 6)",
              "6 - 4 = 2 (left: 2 5)",
              "6 - 5 = 1 (left: 1 4)",
              "4 * 5 = 20 (left: 6 20)",
              "5 * 6 = 30 (left: 4 30)",
              "6 / 4 = 1.5 (left: 1.5 5)",
              "5 / 4 = 1.25 (left: 1.25 6)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_2",
          "result": "PASS",
          "reason": "node_id 0_0_2 matches thought position.",
          "timestamp": "2025-05-29T22:42:51.902661",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_2",
            "state": "6 + 4 = 10 (left: 5 10)",
            "thoughts": [
              "4 + 5 = 9 (left: 6 9)",
              "5 + 6 = 11 (left: 4 11)",
              "6 + 4 = 10 (left: 5 10)",
              "5 - 4 = 1 (left: 1 6)",
              "6 - 4 = 2 (left: 2 5)",
              "6 - 5 = 1 (left: 1 4)",
              "4 * 5 = 20 (left: 6 20)",
              "5 * 6 = 30 (left: 4 30)",
              "6 / 4 = 1.5 (left: 1.5 5)",
              "5 / 4 = 1.25 (left: 1.25 6)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_3",
          "result": "PASS",
          "reason": "node_id 0_0_3 matches thought position.",
          "timestamp": "2025-05-29T22:42:59.493503",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_3",
            "state": "5 - 4 = 1 (left: 1 6)",
            "thoughts": [
              "4 + 5 = 9 (left: 6 9)",
              "5 + 6 = 11 (left: 4 11)",
              "6 + 4 = 10 (left: 5 10)",
              "5 - 4 = 1 (left: 1 6)",
              "6 - 4 = 2 (left: 2 5)",
              "6 - 5 = 1 (left: 1 4)",
              "4 * 5 = 20 (left: 6 20)",
              "5 * 6 = 30 (left: 4 30)",
              "6 / 4 = 1.5 (left: 1.5 5)",
              "5 / 4 = 1.25 (left: 1.25 6)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_4",
          "result": "PASS",
          "reason": "node_id 0_0_4 matches thought position.",
          "timestamp": "2025-05-29T22:43:06.884327",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_4",
            "state": "6 - 4 = 2 (left: 2 5)",
            "thoughts": [
              "4 + 5 = 9 (left: 6 9)",
              "5 + 6 = 11 (left: 4 11)",
              "6 + 4 = 10 (left: 5 10)",
              "5 - 4 = 1 (left: 1 6)",
              "6 - 4 = 2 (left: 2 5)",
              "6 - 5 = 1 (left: 1 4)",
              "4 * 5 = 20 (left: 6 20)",
              "5 * 6 = 30 (left: 4 30)",
              "6 / 4 = 1.5 (left: 1.5 5)",
              "5 / 4 = 1.25 (left: 1.25 6)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_5",
          "result": "PASS",
          "reason": "node_id 0_0_5 matches thought position.",
          "timestamp": "2025-05-29T22:43:14.948569",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_5",
            "state": "6 - 5 = 1 (left: 1 4)",
            "thoughts": [
              "4 + 5 = 9 (left: 6 9)",
              "5 + 6 = 11 (left: 4 11)",
              "6 + 4 = 10 (left: 5 10)",
              "5 - 4 = 1 (left: 1 6)",
              "6 - 4 = 2 (left: 2 5)",
              "6 - 5 = 1 (left: 1 4)",
              "4 * 5 = 20 (left: 6 20)",
              "5 * 6 = 30 (left: 4 30)",
              "6 / 4 = 1.5 (left: 1.5 5)",
              "5 / 4 = 1.25 (left: 1.25 6)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_6",
          "result": "PASS",
          "reason": "node_id 0_0_6 matches thought position.",
          "timestamp": "2025-05-29T22:43:23.729860",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_6",
            "state": "4 * 5 = 20 (left: 6 20)",
            "thoughts": [
              "4 + 5 = 9 (left: 6 9)",
              "5 + 6 = 11 (left: 4 11)",
              "6 + 4 = 10 (left: 5 10)",
              "5 - 4 = 1 (left: 1 6)",
              "6 - 4 = 2 (left: 2 5)",
              "6 - 5 = 1 (left: 1 4)",
              "4 * 5 = 20 (left: 6 20)",
              "5 * 6 = 30 (left: 4 30)",
              "6 / 4 = 1.5 (left: 1.5 5)",
              "5 / 4 = 1.25 (left: 1.25 6)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_7",
          "result": "PASS",
          "reason": "node_id 0_0_7 matches thought position.",
          "timestamp": "2025-05-29T22:43:32.493479",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_7",
            "state": "5 * 6 = 30 (left: 4 30)",
            "thoughts": [
              "4 + 5 = 9 (left: 6 9)",
              "5 + 6 = 11 (left: 4 11)",
              "6 + 4 = 10 (left: 5 10)",
              "5 - 4 = 1 (left: 1 6)",
              "6 - 4 = 2 (left: 2 5)",
              "6 - 5 = 1 (left: 1 4)",
              "4 * 5 = 20 (left: 6 20)",
              "5 * 6 = 30 (left: 4 30)",
              "6 / 4 = 1.5 (left: 1.5 5)",
              "5 / 4 = 1.25 (left: 1.25 6)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_8",
          "result": "PASS",
          "reason": "node_id 0_0_8 matches thought position.",
          "timestamp": "2025-05-29T22:43:40.504291",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_8",
            "state": "6 / 4 = 1.5 (left: 1.5 5)",
            "thoughts": [
              "4 + 5 = 9 (left: 6 9)",
              "5 + 6 = 11 (left: 4 11)",
              "6 + 4 = 10 (left: 5 10)",
              "5 - 4 = 1 (left: 1 6)",
              "6 - 4 = 2 (left: 2 5)",
              "6 - 5 = 1 (left: 1 4)",
              "4 * 5 = 20 (left: 6 20)",
              "5 * 6 = 30 (left: 4 30)",
              "6 / 4 = 1.5 (left: 1.5 5)",
              "5 / 4 = 1.25 (left: 1.25 6)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_9",
          "result": "PASS",
          "reason": "node_id 0_0_9 matches thought position.",
          "timestamp": "2025-05-29T22:43:49.533911",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_9",
            "state": "5 / 4 = 1.25 (left: 1.25 6)",
            "thoughts": [
              "4 + 5 = 9 (left: 6 9)",
              "5 + 6 = 11 (left: 4 11)",
              "6 + 4 = 10 (left: 5 10)",
              "5 - 4 = 1 (left: 1 6)",
              "6 - 4 = 2 (left: 2 5)",
              "6 - 5 = 1 (left: 1 4)",
              "4 * 5 = 20 (left: 6 20)",
              "5 * 6 = 30 (left: 4 30)",
              "6 / 4 = 1.5 (left: 1.5 5)",
              "5 / 4 = 1.25 (left: 1.25 6)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "node_id 0_1 matches thought position.",
          "timestamp": "2025-05-29T22:44:02.822518",
          "event_type": "validation",
          "details": {
            "node_id": "0_1",
            "state": "3 - 1 = 2 (left: 2 5 6)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 5 6)",
              "3 - 1 = 2 (left: 2 5 6)",
              "5 - 1 = 4 (left: 3 4 6)",
              "6 - 1 = 5 (left: 3 5 5)",
              "1 * 3 = 3 (left: 3 5 6)",
              "3 * 1 = 3 (left: 3 5 6)",
              "5 * 1 = 5 (left: 3 5 6)",
              "6 * 1 = 6 (left: 3 5 6)",
              "5 / 1 = 5 (left: 3 5 6)",
              "6 / 1 = 6 (left: 3 5 6)",
              "3 + 5 = 8 (left: 1 6 8)",
              "5 - 3 = 2 (left: 1 2 6)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 5 = 15 (left: 1 6 15)",
              "5 * 3 = 15 (left: 1 6 15)",
              "5 / 3 = 1.66667 (left: 1 1.66667 6)",
              "6 + 5 = 11 (left: 1 3 11)",
              "5 - 6 = -1 (left: -1 1 3)",
              "6 - 5 = 1 (left: 1 1 3)",
              "5 * 6 = 30 (left: 1 3 30)",
              "6 * 5 = 30 (left: 1 3 30)",
              "6 / 5 = 1.2 (left: 1 1.2 3)",
              "3 + 6 = 9 (left: 1 5 9)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 6 = 18 (left: 1 5 18)",
              "6 * 3 = 18 (left: 1 5 18)",
              "6 / 3 = 2 (left: 1 2 5)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "node_id 0_1_0 matches thought position.",
          "timestamp": "2025-05-29T22:44:19.421966",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_0",
            "state": "2 + 5 = 7 (left: 6 7)",
            "thoughts": [
              "2 + 5 = 7 (left: 6 7)",
              "5 - 2 = 3 (left: 3 6)",
              "6 - 2 = 4 (left: 4 5)",
              "2 * 5 = 10 (left: 6 10)",
              "5 / 2 = 2.5 (left: 2.5 6)",
              "6 / 2 = 3 (left: 3 5)",
              "6 - 5 = 1 (left: 1 2)",
              "2 * 6 = 12 (left: 5 12)",
              "5 * 2 = 10 (left: 6 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_1",
          "result": "PASS",
          "reason": "node_id 0_1_1 matches thought position.",
          "timestamp": "2025-05-29T22:44:27.821597",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_1",
            "state": "5 - 2 = 3 (left: 3 6)",
            "thoughts": [
              "2 + 5 = 7 (left: 6 7)",
              "5 - 2 = 3 (left: 3 6)",
              "6 - 2 = 4 (left: 4 5)",
              "2 * 5 = 10 (left: 6 10)",
              "5 / 2 = 2.5 (left: 2.5 6)",
              "6 / 2 = 3 (left: 3 5)",
              "6 - 5 = 1 (left: 1 2)",
              "2 * 6 = 12 (left: 5 12)",
              "5 * 2 = 10 (left: 6 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_2",
          "result": "PASS",
          "reason": "node_id 0_1_2 matches thought position.",
          "timestamp": "2025-05-29T22:44:35.590406",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_2",
            "state": "6 - 2 = 4 (left: 4 5)",
            "thoughts": [
              "2 + 5 = 7 (left: 6 7)",
              "5 - 2 = 3 (left: 3 6)",
              "6 - 2 = 4 (left: 4 5)",
              "2 * 5 = 10 (left: 6 10)",
              "5 / 2 = 2.5 (left: 2.5 6)",
              "6 / 2 = 3 (left: 3 5)",
              "6 - 5 = 1 (left: 1 2)",
              "2 * 6 = 12 (left: 5 12)",
              "5 * 2 = 10 (left: 6 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_3",
          "result": "PASS",
          "reason": "node_id 0_1_3 matches thought position.",
          "timestamp": "2025-05-29T22:44:46.009429",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_3",
            "state": "2 * 5 = 10 (left: 6 10)",
            "thoughts": [
              "2 + 5 = 7 (left: 6 7)",
              "5 - 2 = 3 (left: 3 6)",
              "6 - 2 = 4 (left: 4 5)",
              "2 * 5 = 10 (left: 6 10)",
              "5 / 2 = 2.5 (left: 2.5 6)",
              "6 / 2 = 3 (left: 3 5)",
              "6 - 5 = 1 (left: 1 2)",
              "2 * 6 = 12 (left: 5 12)",
              "5 * 2 = 10 (left: 6 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_4",
          "result": "PASS",
          "reason": "node_id 0_1_4 matches thought position.",
          "timestamp": "2025-05-29T22:44:55.731030",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_4",
            "state": "5 / 2 = 2.5 (left: 2.5 6)",
            "thoughts": [
              "2 + 5 = 7 (left: 6 7)",
              "5 - 2 = 3 (left: 3 6)",
              "6 - 2 = 4 (left: 4 5)",
              "2 * 5 = 10 (left: 6 10)",
              "5 / 2 = 2.5 (left: 2.5 6)",
              "6 / 2 = 3 (left: 3 5)",
              "6 - 5 = 1 (left: 1 2)",
              "2 * 6 = 12 (left: 5 12)",
              "5 * 2 = 10 (left: 6 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_5",
          "result": "PASS",
          "reason": "node_id 0_1_5 matches thought position.",
          "timestamp": "2025-05-29T22:45:03.919914",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_5",
            "state": "6 / 2 = 3 (left: 3 5)",
            "thoughts": [
              "2 + 5 = 7 (left: 6 7)",
              "5 - 2 = 3 (left: 3 6)",
              "6 - 2 = 4 (left: 4 5)",
              "2 * 5 = 10 (left: 6 10)",
              "5 / 2 = 2.5 (left: 2.5 6)",
              "6 / 2 = 3 (left: 3 5)",
              "6 - 5 = 1 (left: 1 2)",
              "2 * 6 = 12 (left: 5 12)",
              "5 * 2 = 10 (left: 6 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_6",
          "result": "PASS",
          "reason": "node_id 0_1_6 matches thought position.",
          "timestamp": "2025-05-29T22:45:13.945281",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_6",
            "state": "6 - 5 = 1 (left: 1 2)",
            "thoughts": [
              "2 + 5 = 7 (left: 6 7)",
              "5 - 2 = 3 (left: 3 6)",
              "6 - 2 = 4 (left: 4 5)",
              "2 * 5 = 10 (left: 6 10)",
              "5 / 2 = 2.5 (left: 2.5 6)",
              "6 / 2 = 3 (left: 3 5)",
              "6 - 5 = 1 (left: 1 2)",
              "2 * 6 = 12 (left: 5 12)",
              "5 * 2 = 10 (left: 6 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_7",
          "result": "PASS",
          "reason": "node_id 0_1_7 matches thought position.",
          "timestamp": "2025-05-29T22:45:21.822146",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_7",
            "state": "2 * 6 = 12 (left: 5 12)",
            "thoughts": [
              "2 + 5 = 7 (left: 6 7)",
              "5 - 2 = 3 (left: 3 6)",
              "6 - 2 = 4 (left: 4 5)",
              "2 * 5 = 10 (left: 6 10)",
              "5 / 2 = 2.5 (left: 2.5 6)",
              "6 / 2 = 3 (left: 3 5)",
              "6 - 5 = 1 (left: 1 2)",
              "2 * 6 = 12 (left: 5 12)",
              "5 * 2 = 10 (left: 6 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_8",
          "result": "PASS",
          "reason": "node_id 0_1_8 matches thought position.",
          "timestamp": "2025-05-29T22:45:33.388479",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_8",
            "state": "5 * 2 = 10 (left: 6 10)",
            "thoughts": [
              "2 + 5 = 7 (left: 6 7)",
              "5 - 2 = 3 (left: 3 6)",
              "6 - 2 = 4 (left: 4 5)",
              "2 * 5 = 10 (left: 6 10)",
              "5 / 2 = 2.5 (left: 2.5 6)",
              "6 / 2 = 3 (left: 3 5)",
              "6 - 5 = 1 (left: 1 2)",
              "2 * 6 = 12 (left: 5 12)",
              "5 * 2 = 10 (left: 6 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "node_id 0_2 matches thought position.",
          "timestamp": "2025-05-29T22:45:48.025627",
          "event_type": "validation",
          "details": {
            "node_id": "0_2",
            "state": "5 - 1 = 4 (left: 3 4 6)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 5 6)",
              "3 - 1 = 2 (left: 2 5 6)",
              "5 - 1 = 4 (left: 3 4 6)",
              "6 - 1 = 5 (left: 3 5 5)",
              "1 * 3 = 3 (left: 3 5 6)",
              "3 * 1 = 3 (left: 3 5 6)",
              "5 * 1 = 5 (left: 3 5 6)",
              "6 * 1 = 6 (left: 3 5 6)",
              "5 / 1 = 5 (left: 3 5 6)",
              "6 / 1 = 6 (left: 3 5 6)",
              "3 + 5 = 8 (left: 1 6 8)",
              "5 - 3 = 2 (left: 1 2 6)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 5 = 15 (left: 1 6 15)",
              "5 * 3 = 15 (left: 1 6 15)",
              "5 / 3 = 1.66667 (left: 1 1.66667 6)",
              "6 + 5 = 11 (left: 1 3 11)",
              "5 - 6 = -1 (left: -1 1 3)",
              "6 - 5 = 1 (left: 1 1 3)",
              "5 * 6 = 30 (left: 1 3 30)",
              "6 * 5 = 30 (left: 1 3 30)",
              "6 / 5 = 1.2 (left: 1 1.2 3)",
              "3 + 6 = 9 (left: 1 5 9)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 6 = 18 (left: 1 5 18)",
              "6 * 3 = 18 (left: 1 5 18)",
              "6 / 3 = 2 (left: 1 2 5)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_0",
          "result": "PASS",
          "reason": "node_id 0_2_0 matches thought position.",
          "timestamp": "2025-05-29T22:46:07.037199",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_0",
            "state": "3 + 4 = 7 (left: 6 7)",
            "thoughts": [
              "3 + 4 = 7 (left: 6 7)",
              "4 + 6 = 10 (left: 3 10)",
              "6 - 4 = 2 (left: 2 3)",
              "4 * 3 = 12 (left: 6 12)",
              "6 / 3 = 2 (left: 2 4)",
              "3 * 6 = 18 (left: 4 18)",
              "4 - 3 = 1 (left: 1 6)",
              "6 - 3 = 3 (left: 3 4)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_1",
          "result": "PASS",
          "reason": "node_id 0_2_1 matches thought position.",
          "timestamp": "2025-05-29T22:46:13.881356",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_1",
            "state": "4 + 6 = 10 (left: 3 10)",
            "thoughts": [
              "3 + 4 = 7 (left: 6 7)",
              "4 + 6 = 10 (left: 3 10)",
              "6 - 4 = 2 (left: 2 3)",
              "4 * 3 = 12 (left: 6 12)",
              "6 / 3 = 2 (left: 2 4)",
              "3 * 6 = 18 (left: 4 18)",
              "4 - 3 = 1 (left: 1 6)",
              "6 - 3 = 3 (left: 3 4)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_2",
          "result": "PASS",
          "reason": "node_id 0_2_2 matches thought position.",
          "timestamp": "2025-05-29T22:46:20.867989",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_2",
            "state": "6 - 4 = 2 (left: 2 3)",
            "thoughts": [
              "3 + 4 = 7 (left: 6 7)",
              "4 + 6 = 10 (left: 3 10)",
              "6 - 4 = 2 (left: 2 3)",
              "4 * 3 = 12 (left: 6 12)",
              "6 / 3 = 2 (left: 2 4)",
              "3 * 6 = 18 (left: 4 18)",
              "4 - 3 = 1 (left: 1 6)",
              "6 - 3 = 3 (left: 3 4)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_3",
          "result": "PASS",
          "reason": "node_id 0_2_3 matches thought position.",
          "timestamp": "2025-05-29T22:46:28.174102",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_3",
            "state": "4 * 3 = 12 (left: 6 12)",
            "thoughts": [
              "3 + 4 = 7 (left: 6 7)",
              "4 + 6 = 10 (left: 3 10)",
              "6 - 4 = 2 (left: 2 3)",
              "4 * 3 = 12 (left: 6 12)",
              "6 / 3 = 2 (left: 2 4)",
              "3 * 6 = 18 (left: 4 18)",
              "4 - 3 = 1 (left: 1 6)",
              "6 - 3 = 3 (left: 3 4)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_4",
          "result": "PASS",
          "reason": "node_id 0_2_4 matches thought position.",
          "timestamp": "2025-05-29T22:46:36.621693",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_4",
            "state": "6 / 3 = 2 (left: 2 4)",
            "thoughts": [
              "3 + 4 = 7 (left: 6 7)",
              "4 + 6 = 10 (left: 3 10)",
              "6 - 4 = 2 (left: 2 3)",
              "4 * 3 = 12 (left: 6 12)",
              "6 / 3 = 2 (left: 2 4)",
              "3 * 6 = 18 (left: 4 18)",
              "4 - 3 = 1 (left: 1 6)",
              "6 - 3 = 3 (left: 3 4)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_5",
          "result": "PASS",
          "reason": "node_id 0_2_5 matches thought position.",
          "timestamp": "2025-05-29T22:46:43.645403",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_5",
            "state": "3 * 6 = 18 (left: 4 18)",
            "thoughts": [
              "3 + 4 = 7 (left: 6 7)",
              "4 + 6 = 10 (left: 3 10)",
              "6 - 4 = 2 (left: 2 3)",
              "4 * 3 = 12 (left: 6 12)",
              "6 / 3 = 2 (left: 2 4)",
              "3 * 6 = 18 (left: 4 18)",
              "4 - 3 = 1 (left: 1 6)",
              "6 - 3 = 3 (left: 3 4)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_6",
          "result": "PASS",
          "reason": "node_id 0_2_6 matches thought position.",
          "timestamp": "2025-05-29T22:46:52.067573",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_6",
            "state": "4 - 3 = 1 (left: 1 6)",
            "thoughts": [
              "3 + 4 = 7 (left: 6 7)",
              "4 + 6 = 10 (left: 3 10)",
              "6 - 4 = 2 (left: 2 3)",
              "4 * 3 = 12 (left: 6 12)",
              "6 / 3 = 2 (left: 2 4)",
              "3 * 6 = 18 (left: 4 18)",
              "4 - 3 = 1 (left: 1 6)",
              "6 - 3 = 3 (left: 3 4)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_7",
          "result": "PASS",
          "reason": "node_id 0_2_7 matches thought position.",
          "timestamp": "2025-05-29T22:47:00.192310",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_7",
            "state": "6 - 3 = 3 (left: 3 4)",
            "thoughts": [
              "3 + 4 = 7 (left: 6 7)",
              "4 + 6 = 10 (left: 3 10)",
              "6 - 4 = 2 (left: 2 3)",
              "4 * 3 = 12 (left: 6 12)",
              "6 / 3 = 2 (left: 2 4)",
              "3 * 6 = 18 (left: 4 18)",
              "4 - 3 = 1 (left: 1 6)",
              "6 - 3 = 3 (left: 3 4)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "node_id 0_3 matches thought position.",
          "timestamp": "2025-05-29T22:47:13.969286",
          "event_type": "validation",
          "details": {
            "node_id": "0_3",
            "state": "6 - 1 = 5 (left: 3 5 5)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 5 6)",
              "3 - 1 = 2 (left: 2 5 6)",
              "5 - 1 = 4 (left: 3 4 6)",
              "6 - 1 = 5 (left: 3 5 5)",
              "1 * 3 = 3 (left: 3 5 6)",
              "3 * 1 = 3 (left: 3 5 6)",
              "5 * 1 = 5 (left: 3 5 6)",
              "6 * 1 = 6 (left: 3 5 6)",
              "5 / 1 = 5 (left: 3 5 6)",
              "6 / 1 = 6 (left: 3 5 6)",
              "3 + 5 = 8 (left: 1 6 8)",
              "5 - 3 = 2 (left: 1 2 6)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 5 = 15 (left: 1 6 15)",
              "5 * 3 = 15 (left: 1 6 15)",
              "5 / 3 = 1.66667 (left: 1 1.66667 6)",
              "6 + 5 = 11 (left: 1 3 11)",
              "5 - 6 = -1 (left: -1 1 3)",
              "6 - 5 = 1 (left: 1 1 3)",
              "5 * 6 = 30 (left: 1 3 30)",
              "6 * 5 = 30 (left: 1 3 30)",
              "6 / 5 = 1.2 (left: 1 1.2 3)",
              "3 + 6 = 9 (left: 1 5 9)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 6 = 18 (left: 1 5 18)",
              "6 * 3 = 18 (left: 1 5 18)",
              "6 / 3 = 2 (left: 1 2 5)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "node_id 0_4 matches thought position.",
          "timestamp": "2025-05-29T22:47:22.688190",
          "event_type": "validation",
          "details": {
            "node_id": "0_4",
            "state": "1 * 3 = 3 (left: 3 5 6)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 5 6)",
              "3 - 1 = 2 (left: 2 5 6)",
              "5 - 1 = 4 (left: 3 4 6)",
              "6 - 1 = 5 (left: 3 5 5)",
              "1 * 3 = 3 (left: 3 5 6)",
              "3 * 1 = 3 (left: 3 5 6)",
              "5 * 1 = 5 (left: 3 5 6)",
              "6 * 1 = 6 (left: 3 5 6)",
              "5 / 1 = 5 (left: 3 5 6)",
              "6 / 1 = 6 (left: 3 5 6)",
              "3 + 5 = 8 (left: 1 6 8)",
              "5 - 3 = 2 (left: 1 2 6)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 5 = 15 (left: 1 6 15)",
              "5 * 3 = 15 (left: 1 6 15)",
              "5 / 3 = 1.66667 (left: 1 1.66667 6)",
              "6 + 5 = 11 (left: 1 3 11)",
              "5 - 6 = -1 (left: -1 1 3)",
              "6 - 5 = 1 (left: 1 1 3)",
              "5 * 6 = 30 (left: 1 3 30)",
              "6 * 5 = 30 (left: 1 3 30)",
              "6 / 5 = 1.2 (left: 1 1.2 3)",
              "3 + 6 = 9 (left: 1 5 9)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 6 = 18 (left: 1 5 18)",
              "6 * 3 = 18 (left: 1 5 18)",
              "6 / 3 = 2 (left: 1 2 5)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_0",
          "result": "PASS",
          "reason": "node_id 0_4_0 matches thought position.",
          "timestamp": "2025-05-29T22:47:39.722333",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_0",
            "state": "3 + 5 = 8 (left: 6 8)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 / 3 = 2 (left: 2 5)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_1",
          "result": "PASS",
          "reason": "node_id 0_4_1 matches thought position.",
          "timestamp": "2025-05-29T22:47:49.139547",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_1",
            "state": "5 - 3 = 2 (left: 2 6)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 / 3 = 2 (left: 2 5)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_2",
          "result": "PASS",
          "reason": "node_id 0_4_2 matches thought position.",
          "timestamp": "2025-05-29T22:47:57.892444",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_2",
            "state": "6 - 3 = 3 (left: 3 5)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 / 3 = 2 (left: 2 5)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_3",
          "result": "PASS",
          "reason": "node_id 0_4_3 matches thought position.",
          "timestamp": "2025-05-29T22:48:06.023689",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_3",
            "state": "3 * 5 = 15 (left: 6 15)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 / 3 = 2 (left: 2 5)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_4",
          "result": "PASS",
          "reason": "node_id 0_4_4 matches thought position.",
          "timestamp": "2025-05-29T22:48:13.454979",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_4",
            "state": "5 * 6 = 30 (left: 3 30)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 / 3 = 2 (left: 2 5)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_5",
          "result": "PASS",
          "reason": "node_id 0_4_5 matches thought position.",
          "timestamp": "2025-05-29T22:48:24.665442",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_5",
            "state": "6 / 3 = 2 (left: 2 5)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 / 3 = 2 (left: 2 5)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "node_id 0_5 matches thought position.",
          "timestamp": "2025-05-29T22:48:37.541115",
          "event_type": "validation",
          "details": {
            "node_id": "0_5",
            "state": "3 * 1 = 3 (left: 3 5 6)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 5 6)",
              "3 - 1 = 2 (left: 2 5 6)",
              "5 - 1 = 4 (left: 3 4 6)",
              "6 - 1 = 5 (left: 3 5 5)",
              "1 * 3 = 3 (left: 3 5 6)",
              "3 * 1 = 3 (left: 3 5 6)",
              "5 * 1 = 5 (left: 3 5 6)",
              "6 * 1 = 6 (left: 3 5 6)",
              "5 / 1 = 5 (left: 3 5 6)",
              "6 / 1 = 6 (left: 3 5 6)",
              "3 + 5 = 8 (left: 1 6 8)",
              "5 - 3 = 2 (left: 1 2 6)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 5 = 15 (left: 1 6 15)",
              "5 * 3 = 15 (left: 1 6 15)",
              "5 / 3 = 1.66667 (left: 1 1.66667 6)",
              "6 + 5 = 11 (left: 1 3 11)",
              "5 - 6 = -1 (left: -1 1 3)",
              "6 - 5 = 1 (left: 1 1 3)",
              "5 * 6 = 30 (left: 1 3 30)",
              "6 * 5 = 30 (left: 1 3 30)",
              "6 / 5 = 1.2 (left: 1 1.2 3)",
              "3 + 6 = 9 (left: 1 5 9)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 6 = 18 (left: 1 5 18)",
              "6 * 3 = 18 (left: 1 5 18)",
              "6 / 3 = 2 (left: 1 2 5)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_0",
          "result": "PASS",
          "reason": "node_id 0_5_0 matches thought position.",
          "timestamp": "2025-05-29T22:48:56.619160",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_0",
            "state": "3 + 5 = 8 (left: 6 8)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 + 3 = 9 (left: 5 9)",
              "5 + 3 = 8 (left: 6 8)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_1",
          "result": "PASS",
          "reason": "node_id 0_5_1 matches thought position.",
          "timestamp": "2025-05-29T22:49:03.963841",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_1",
            "state": "5 - 3 = 2 (left: 2 6)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 + 3 = 9 (left: 5 9)",
              "5 + 3 = 8 (left: 6 8)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_2",
          "result": "PASS",
          "reason": "node_id 0_5_2 matches thought position.",
          "timestamp": "2025-05-29T22:49:11.636489",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_2",
            "state": "6 - 3 = 3 (left: 3 5)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 + 3 = 9 (left: 5 9)",
              "5 + 3 = 8 (left: 6 8)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_3",
          "result": "PASS",
          "reason": "node_id 0_5_3 matches thought position.",
          "timestamp": "2025-05-29T22:49:19.038439",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_3",
            "state": "6 / 3 = 2 (left: 2 5)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 + 3 = 9 (left: 5 9)",
              "5 + 3 = 8 (left: 6 8)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_4",
          "result": "PASS",
          "reason": "node_id 0_5_4 matches thought position.",
          "timestamp": "2025-05-29T22:49:28.284233",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_4",
            "state": "3 * 5 = 15 (left: 6 15)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 + 3 = 9 (left: 5 9)",
              "5 + 3 = 8 (left: 6 8)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_5",
          "result": "PASS",
          "reason": "node_id 0_5_5 matches thought position.",
          "timestamp": "2025-05-29T22:49:35.799372",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_5",
            "state": "5 * 6 = 30 (left: 3 30)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 + 3 = 9 (left: 5 9)",
              "5 + 3 = 8 (left: 6 8)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_6",
          "result": "PASS",
          "reason": "node_id 0_5_6 matches thought position.",
          "timestamp": "2025-05-29T22:49:45.587710",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_6",
            "state": "6 + 3 = 9 (left: 5 9)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 + 3 = 9 (left: 5 9)",
              "5 + 3 = 8 (left: 6 8)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_7",
          "result": "PASS",
          "reason": "node_id 0_5_7 matches thought position.",
          "timestamp": "2025-05-29T22:49:53.114349",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_7",
            "state": "5 + 3 = 8 (left: 6 8)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 + 3 = 9 (left: 5 9)",
              "5 + 3 = 8 (left: 6 8)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_6",
          "result": "PASS",
          "reason": "node_id 0_6 matches thought position.",
          "timestamp": "2025-05-29T22:50:05.341020",
          "event_type": "validation",
          "details": {
            "node_id": "0_6",
            "state": "5 * 1 = 5 (left: 3 5 6)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 5 6)",
              "3 - 1 = 2 (left: 2 5 6)",
              "5 - 1 = 4 (left: 3 4 6)",
              "6 - 1 = 5 (left: 3 5 5)",
              "1 * 3 = 3 (left: 3 5 6)",
              "3 * 1 = 3 (left: 3 5 6)",
              "5 * 1 = 5 (left: 3 5 6)",
              "6 * 1 = 6 (left: 3 5 6)",
              "5 / 1 = 5 (left: 3 5 6)",
              "6 / 1 = 6 (left: 3 5 6)",
              "3 + 5 = 8 (left: 1 6 8)",
              "5 - 3 = 2 (left: 1 2 6)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 5 = 15 (left: 1 6 15)",
              "5 * 3 = 15 (left: 1 6 15)",
              "5 / 3 = 1.66667 (left: 1 1.66667 6)",
              "6 + 5 = 11 (left: 1 3 11)",
              "5 - 6 = -1 (left: -1 1 3)",
              "6 - 5 = 1 (left: 1 1 3)",
              "5 * 6 = 30 (left: 1 3 30)",
              "6 * 5 = 30 (left: 1 3 30)",
              "6 / 5 = 1.2 (left: 1 1.2 3)",
              "3 + 6 = 9 (left: 1 5 9)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 6 = 18 (left: 1 5 18)",
              "6 * 3 = 18 (left: 1 5 18)",
              "6 / 3 = 2 (left: 1 2 5)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_6_0",
          "result": "PASS",
          "reason": "node_id 0_6_0 matches thought position.",
          "timestamp": "2025-05-29T22:50:23.081407",
          "event_type": "validation",
          "details": {
            "node_id": "0_6_0",
            "state": "3 + 5 = 8 (left: 6 8)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15) ",
              "5 + 6 = 11 (left: 3 11)",
              "6 - 3 = 3 (left: 3 5)",
              "6 - 5 = 1 (left: 1 3)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_6_1",
          "result": "PASS",
          "reason": "node_id 0_6_1 matches thought position.",
          "timestamp": "2025-05-29T22:50:32.387398",
          "event_type": "validation",
          "details": {
            "node_id": "0_6_1",
            "state": "5 - 3 = 2 (left: 2 6)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15) ",
              "5 + 6 = 11 (left: 3 11)",
              "6 - 3 = 3 (left: 3 5)",
              "6 - 5 = 1 (left: 1 3)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_6_2",
          "result": "PASS",
          "reason": "node_id 0_6_2 matches thought position.",
          "timestamp": "2025-05-29T22:50:39.223504",
          "event_type": "validation",
          "details": {
            "node_id": "0_6_2",
            "state": "6 / 3 = 2 (left: 2 5)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15) ",
              "5 + 6 = 11 (left: 3 11)",
              "6 - 3 = 3 (left: 3 5)",
              "6 - 5 = 1 (left: 1 3)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_6_3",
          "result": "PASS",
          "reason": "node_id 0_6_3 matches thought position.",
          "timestamp": "2025-05-29T22:50:47.581231",
          "event_type": "validation",
          "details": {
            "node_id": "0_6_3",
            "state": "3 * 5 = 15 (left: 6 15)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15) ",
              "5 + 6 = 11 (left: 3 11)",
              "6 - 3 = 3 (left: 3 5)",
              "6 - 5 = 1 (left: 1 3)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_6_4",
          "result": "PASS",
          "reason": "node_id 0_6_4 matches thought position.",
          "timestamp": "2025-05-29T22:50:57.426159",
          "event_type": "validation",
          "details": {
            "node_id": "0_6_4",
            "state": "5 + 6 = 11 (left: 3 11)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15) ",
              "5 + 6 = 11 (left: 3 11)",
              "6 - 3 = 3 (left: 3 5)",
              "6 - 5 = 1 (left: 1 3)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_6_5",
          "result": "PASS",
          "reason": "node_id 0_6_5 matches thought position.",
          "timestamp": "2025-05-29T22:51:08.104219",
          "event_type": "validation",
          "details": {
            "node_id": "0_6_5",
            "state": "6 - 3 = 3 (left: 3 5)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15) ",
              "5 + 6 = 11 (left: 3 11)",
              "6 - 3 = 3 (left: 3 5)",
              "6 - 5 = 1 (left: 1 3)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_6_6",
          "result": "PASS",
          "reason": "node_id 0_6_6 matches thought position.",
          "timestamp": "2025-05-29T22:51:16.820053",
          "event_type": "validation",
          "details": {
            "node_id": "0_6_6",
            "state": "6 - 5 = 1 (left: 1 3)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15) ",
              "5 + 6 = 11 (left: 3 11)",
              "6 - 3 = 3 (left: 3 5)",
              "6 - 5 = 1 (left: 1 3)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_7",
          "result": "PASS",
          "reason": "node_id 0_7 matches thought position.",
          "timestamp": "2025-05-29T22:51:28.044122",
          "event_type": "validation",
          "details": {
            "node_id": "0_7",
            "state": "6 * 1 = 6 (left: 3 5 6)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 5 6)",
              "3 - 1 = 2 (left: 2 5 6)",
              "5 - 1 = 4 (left: 3 4 6)",
              "6 - 1 = 5 (left: 3 5 5)",
              "1 * 3 = 3 (left: 3 5 6)",
              "3 * 1 = 3 (left: 3 5 6)",
              "5 * 1 = 5 (left: 3 5 6)",
              "6 * 1 = 6 (left: 3 5 6)",
              "5 / 1 = 5 (left: 3 5 6)",
              "6 / 1 = 6 (left: 3 5 6)",
              "3 + 5 = 8 (left: 1 6 8)",
              "5 - 3 = 2 (left: 1 2 6)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 5 = 15 (left: 1 6 15)",
              "5 * 3 = 15 (left: 1 6 15)",
              "5 / 3 = 1.66667 (left: 1 1.66667 6)",
              "6 + 5 = 11 (left: 1 3 11)",
              "5 - 6 = -1 (left: -1 1 3)",
              "6 - 5 = 1 (left: 1 1 3)",
              "5 * 6 = 30 (left: 1 3 30)",
              "6 * 5 = 30 (left: 1 3 30)",
              "6 / 5 = 1.2 (left: 1 1.2 3)",
              "3 + 6 = 9 (left: 1 5 9)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 6 = 18 (left: 1 5 18)",
              "6 * 3 = 18 (left: 1 5 18)",
              "6 / 3 = 2 (left: 1 2 5)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_7_0",
          "result": "PASS",
          "reason": "node_id 0_7_0 matches thought position.",
          "timestamp": "2025-05-29T22:51:43.890566",
          "event_type": "validation",
          "details": {
            "node_id": "0_7_0",
            "state": "3 + 5 = 8 (left: 6 8)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "6 / 3 = 2 (left: 2 5)",
              "5 * 3 = 15 (left: 6 15)",
              "6 + 3 = 9 (left: 5 9)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_7_1",
          "result": "PASS",
          "reason": "node_id 0_7_1 matches thought position.",
          "timestamp": "2025-05-29T22:51:50.822383",
          "event_type": "validation",
          "details": {
            "node_id": "0_7_1",
            "state": "5 - 3 = 2 (left: 2 6)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "6 / 3 = 2 (left: 2 5)",
              "5 * 3 = 15 (left: 6 15)",
              "6 + 3 = 9 (left: 5 9)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_7_2",
          "result": "PASS",
          "reason": "node_id 0_7_2 matches thought position.",
          "timestamp": "2025-05-29T22:51:58.446389",
          "event_type": "validation",
          "details": {
            "node_id": "0_7_2",
            "state": "6 - 3 = 3 (left: 3 5)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "6 / 3 = 2 (left: 2 5)",
              "5 * 3 = 15 (left: 6 15)",
              "6 + 3 = 9 (left: 5 9)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_7_3",
          "result": "PASS",
          "reason": "node_id 0_7_3 matches thought position.",
          "timestamp": "2025-05-29T22:52:06.893635",
          "event_type": "validation",
          "details": {
            "node_id": "0_7_3",
            "state": "6 / 3 = 2 (left: 2 5)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "6 / 3 = 2 (left: 2 5)",
              "5 * 3 = 15 (left: 6 15)",
              "6 + 3 = 9 (left: 5 9)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_7_4",
          "result": "PASS",
          "reason": "node_id 0_7_4 matches thought position.",
          "timestamp": "2025-05-29T22:52:14.436732",
          "event_type": "validation",
          "details": {
            "node_id": "0_7_4",
            "state": "5 * 3 = 15 (left: 6 15)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "6 / 3 = 2 (left: 2 5)",
              "5 * 3 = 15 (left: 6 15)",
              "6 + 3 = 9 (left: 5 9)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_7_5",
          "result": "PASS",
          "reason": "node_id 0_7_5 matches thought position.",
          "timestamp": "2025-05-29T22:52:23.558615",
          "event_type": "validation",
          "details": {
            "node_id": "0_7_5",
            "state": "6 + 3 = 9 (left: 5 9)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "6 / 3 = 2 (left: 2 5)",
              "5 * 3 = 15 (left: 6 15)",
              "6 + 3 = 9 (left: 5 9)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_8",
          "result": "PASS",
          "reason": "node_id 0_8 matches thought position.",
          "timestamp": "2025-05-29T22:52:36.178058",
          "event_type": "validation",
          "details": {
            "node_id": "0_8",
            "state": "5 / 1 = 5 (left: 3 5 6)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 5 6)",
              "3 - 1 = 2 (left: 2 5 6)",
              "5 - 1 = 4 (left: 3 4 6)",
              "6 - 1 = 5 (left: 3 5 5)",
              "1 * 3 = 3 (left: 3 5 6)",
              "3 * 1 = 3 (left: 3 5 6)",
              "5 * 1 = 5 (left: 3 5 6)",
              "6 * 1 = 6 (left: 3 5 6)",
              "5 / 1 = 5 (left: 3 5 6)",
              "6 / 1 = 6 (left: 3 5 6)",
              "3 + 5 = 8 (left: 1 6 8)",
              "5 - 3 = 2 (left: 1 2 6)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 5 = 15 (left: 1 6 15)",
              "5 * 3 = 15 (left: 1 6 15)",
              "5 / 3 = 1.66667 (left: 1 1.66667 6)",
              "6 + 5 = 11 (left: 1 3 11)",
              "5 - 6 = -1 (left: -1 1 3)",
              "6 - 5 = 1 (left: 1 1 3)",
              "5 * 6 = 30 (left: 1 3 30)",
              "6 * 5 = 30 (left: 1 3 30)",
              "6 / 5 = 1.2 (left: 1 1.2 3)",
              "3 + 6 = 9 (left: 1 5 9)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 6 = 18 (left: 1 5 18)",
              "6 * 3 = 18 (left: 1 5 18)",
              "6 / 3 = 2 (left: 1 2 5)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_8_0",
          "result": "PASS",
          "reason": "node_id 0_8_0 matches thought position.",
          "timestamp": "2025-05-29T22:52:52.135005",
          "event_type": "validation",
          "details": {
            "node_id": "0_8_0",
            "state": "3 + 5 = 8 (left: 6 8)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "3 * 5 = 15 (left: 6 15)",
              "6 / 3 = 2 (left: 2 5)",
              "5 * 3 = 15 (left: 6 15)",
              "6 - 5 = 1 (left: 1 3)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_8_1",
          "result": "PASS",
          "reason": "node_id 0_8_1 matches thought position.",
          "timestamp": "2025-05-29T22:52:58.786175",
          "event_type": "validation",
          "details": {
            "node_id": "0_8_1",
            "state": "5 - 3 = 2 (left: 2 6)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "3 * 5 = 15 (left: 6 15)",
              "6 / 3 = 2 (left: 2 5)",
              "5 * 3 = 15 (left: 6 15)",
              "6 - 5 = 1 (left: 1 3)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_8_2",
          "result": "PASS",
          "reason": "node_id 0_8_2 matches thought position.",
          "timestamp": "2025-05-29T22:53:06.270543",
          "event_type": "validation",
          "details": {
            "node_id": "0_8_2",
            "state": "6 - 3 = 3 (left: 3 5)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "3 * 5 = 15 (left: 6 15)",
              "6 / 3 = 2 (left: 2 5)",
              "5 * 3 = 15 (left: 6 15)",
              "6 - 5 = 1 (left: 1 3)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_8_3",
          "result": "PASS",
          "reason": "node_id 0_8_3 matches thought position.",
          "timestamp": "2025-05-29T22:53:15.783007",
          "event_type": "validation",
          "details": {
            "node_id": "0_8_3",
            "state": "3 * 5 = 15 (left: 6 15)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "3 * 5 = 15 (left: 6 15)",
              "6 / 3 = 2 (left: 2 5)",
              "5 * 3 = 15 (left: 6 15)",
              "6 - 5 = 1 (left: 1 3)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_8_4",
          "result": "PASS",
          "reason": "node_id 0_8_4 matches thought position.",
          "timestamp": "2025-05-29T22:53:24.949723",
          "event_type": "validation",
          "details": {
            "node_id": "0_8_4",
            "state": "6 / 3 = 2 (left: 2 5)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "3 * 5 = 15 (left: 6 15)",
              "6 / 3 = 2 (left: 2 5)",
              "5 * 3 = 15 (left: 6 15)",
              "6 - 5 = 1 (left: 1 3)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_8_5",
          "result": "PASS",
          "reason": "node_id 0_8_5 matches thought position.",
          "timestamp": "2025-05-29T22:53:33.148716",
          "event_type": "validation",
          "details": {
            "node_id": "0_8_5",
            "state": "5 * 3 = 15 (left: 6 15)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "3 * 5 = 15 (left: 6 15)",
              "6 / 3 = 2 (left: 2 5)",
              "5 * 3 = 15 (left: 6 15)",
              "6 - 5 = 1 (left: 1 3)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_8_6",
          "result": "PASS",
          "reason": "node_id 0_8_6 matches thought position.",
          "timestamp": "2025-05-29T22:53:40.626378",
          "event_type": "validation",
          "details": {
            "node_id": "0_8_6",
            "state": "6 - 5 = 1 (left: 1 3)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 - 3 = 2 (left: 2 6)",
              "6 - 3 = 3 (left: 3 5)",
              "3 * 5 = 15 (left: 6 15)",
              "6 / 3 = 2 (left: 2 5)",
              "5 * 3 = 15 (left: 6 15)",
              "6 - 5 = 1 (left: 1 3)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_9",
          "result": "PASS",
          "reason": "node_id 0_9 matches thought position.",
          "timestamp": "2025-05-29T22:53:52.556552",
          "event_type": "validation",
          "details": {
            "node_id": "0_9",
            "state": "6 / 1 = 6 (left: 3 5 6)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 5 6)",
              "3 - 1 = 2 (left: 2 5 6)",
              "5 - 1 = 4 (left: 3 4 6)",
              "6 - 1 = 5 (left: 3 5 5)",
              "1 * 3 = 3 (left: 3 5 6)",
              "3 * 1 = 3 (left: 3 5 6)",
              "5 * 1 = 5 (left: 3 5 6)",
              "6 * 1 = 6 (left: 3 5 6)",
              "5 / 1 = 5 (left: 3 5 6)",
              "6 / 1 = 6 (left: 3 5 6)",
              "3 + 5 = 8 (left: 1 6 8)",
              "5 - 3 = 2 (left: 1 2 6)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 5 = 15 (left: 1 6 15)",
              "5 * 3 = 15 (left: 1 6 15)",
              "5 / 3 = 1.66667 (left: 1 1.66667 6)",
              "6 + 5 = 11 (left: 1 3 11)",
              "5 - 6 = -1 (left: -1 1 3)",
              "6 - 5 = 1 (left: 1 1 3)",
              "5 * 6 = 30 (left: 1 3 30)",
              "6 * 5 = 30 (left: 1 3 30)",
              "6 / 5 = 1.2 (left: 1 1.2 3)",
              "3 + 6 = 9 (left: 1 5 9)",
              "6 - 3 = 3 (left: 1 3 5)",
              "3 * 6 = 18 (left: 1 5 18)",
              "6 * 3 = 18 (left: 1 5 18)",
              "6 / 3 = 2 (left: 1 2 5)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_9_0",
          "result": "PASS",
          "reason": "node_id 0_9_0 matches thought position.",
          "timestamp": "2025-05-29T22:54:10.487298",
          "event_type": "validation",
          "details": {
            "node_id": "0_9_0",
            "state": "3 + 5 = 8 (left: 6 8)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 + 6 = 11 (left: 3 11)",
              "6 - 3 = 3 (left: 3 5)",
              "5 - 3 = 2 (left: 2 6)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 * 3 = 18 (left: 5 18)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_9_1",
          "result": "PASS",
          "reason": "node_id 0_9_1 matches thought position.",
          "timestamp": "2025-05-29T22:54:18.436655",
          "event_type": "validation",
          "details": {
            "node_id": "0_9_1",
            "state": "5 + 6 = 11 (left: 3 11)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 + 6 = 11 (left: 3 11)",
              "6 - 3 = 3 (left: 3 5)",
              "5 - 3 = 2 (left: 2 6)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 * 3 = 18 (left: 5 18)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_9_2",
          "result": "PASS",
          "reason": "node_id 0_9_2 matches thought position.",
          "timestamp": "2025-05-29T22:54:25.631201",
          "event_type": "validation",
          "details": {
            "node_id": "0_9_2",
            "state": "6 - 3 = 3 (left: 3 5)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 + 6 = 11 (left: 3 11)",
              "6 - 3 = 3 (left: 3 5)",
              "5 - 3 = 2 (left: 2 6)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 * 3 = 18 (left: 5 18)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_9_3",
          "result": "PASS",
          "reason": "node_id 0_9_3 matches thought position.",
          "timestamp": "2025-05-29T22:54:57.577751",
          "event_type": "validation",
          "details": {
            "node_id": "0_9_3",
            "state": "5 - 3 = 2 (left: 2 6)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 + 6 = 11 (left: 3 11)",
              "6 - 3 = 3 (left: 3 5)",
              "5 - 3 = 2 (left: 2 6)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 * 3 = 18 (left: 5 18)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_9_4",
          "result": "PASS",
          "reason": "node_id 0_9_4 matches thought position.",
          "timestamp": "2025-05-29T22:55:04.826558",
          "event_type": "validation",
          "details": {
            "node_id": "0_9_4",
            "state": "6 / 3 = 2 (left: 2 5)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 + 6 = 11 (left: 3 11)",
              "6 - 3 = 3 (left: 3 5)",
              "5 - 3 = 2 (left: 2 6)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 * 3 = 18 (left: 5 18)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_9_5",
          "result": "PASS",
          "reason": "node_id 0_9_5 matches thought position.",
          "timestamp": "2025-05-29T22:55:13.513404",
          "event_type": "validation",
          "details": {
            "node_id": "0_9_5",
            "state": "3 * 5 = 15 (left: 6 15)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 + 6 = 11 (left: 3 11)",
              "6 - 3 = 3 (left: 3 5)",
              "5 - 3 = 2 (left: 2 6)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 * 3 = 18 (left: 5 18)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_9_6",
          "result": "PASS",
          "reason": "node_id 0_9_6 matches thought position.",
          "timestamp": "2025-05-29T22:55:21.874434",
          "event_type": "validation",
          "details": {
            "node_id": "0_9_6",
            "state": "5 * 6 = 30 (left: 3 30)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 + 6 = 11 (left: 3 11)",
              "6 - 3 = 3 (left: 3 5)",
              "5 - 3 = 2 (left: 2 6)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 * 3 = 18 (left: 5 18)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_9_7",
          "result": "PASS",
          "reason": "node_id 0_9_7 matches thought position.",
          "timestamp": "2025-05-29T22:55:29.753670",
          "event_type": "validation",
          "details": {
            "node_id": "0_9_7",
            "state": "6 * 3 = 18 (left: 5 18)",
            "thoughts": [
              "3 + 5 = 8 (left: 6 8)",
              "5 + 6 = 11 (left: 3 11)",
              "6 - 3 = 3 (left: 3 5)",
              "5 - 3 = 2 (left: 2 6)",
              "6 / 3 = 2 (left: 2 5)",
              "3 * 5 = 15 (left: 6 15)",
              "5 * 6 = 30 (left: 3 30)",
              "6 * 3 = 18 (left: 5 18)"
            ]
          }
        }
      ]
    },
    "node_state": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "node_state",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-29T22:42:19.283267",
          "event_type": "validation",
          "details": {
            "expected_state": "1 + 3 = 4 (left: 4 5 6)",
            "actual_state": "1 + 3 = 4 (left: 4 5 6)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-29T22:44:10.848696",
          "event_type": "validation",
          "details": {
            "expected_state": "3 - 1 = 2 (left: 2 5 6)",
            "actual_state": "3 - 1 = 2 (left: 2 5 6)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-29T22:45:56.392337",
          "event_type": "validation",
          "details": {
            "expected_state": "5 - 1 = 4 (left: 3 4 6)",
            "actual_state": "5 - 1 = 4 (left: 3 4 6)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-29T22:47:30.792971",
          "event_type": "validation",
          "details": {
            "expected_state": "1 * 3 = 3 (left: 3 5 6)",
            "actual_state": "1 * 3 = 3 (left: 3 5 6)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-29T22:48:45.428300",
          "event_type": "validation",
          "details": {
            "expected_state": "3 * 1 = 3 (left: 3 5 6)",
            "actual_state": "3 * 1 = 3 (left: 3 5 6)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_6",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-29T22:50:12.466491",
          "event_type": "validation",
          "details": {
            "expected_state": "5 * 1 = 5 (left: 3 5 6)",
            "actual_state": "5 * 1 = 5 (left: 3 5 6)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_7",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-29T22:51:34.360401",
          "event_type": "validation",
          "details": {
            "expected_state": "6 * 1 = 6 (left: 3 5 6)",
            "actual_state": "6 * 1 = 6 (left: 3 5 6)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_8",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-29T22:52:42.923512",
          "event_type": "validation",
          "details": {
            "expected_state": "5 / 1 = 5 (left: 3 5 6)",
            "actual_state": "5 / 1 = 5 (left: 3 5 6)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_9",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-29T22:54:01.193612",
          "event_type": "validation",
          "details": {
            "expected_state": "6 / 1 = 6 (left: 3 5 6)",
            "actual_state": "6 / 1 = 6 (left: 3 5 6)"
          }
        }
      ]
    },
    "pruning": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pruning",
          "node_id": "0_0_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:42:36.301705",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:42:44.709019",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:42:51.902590",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:42:59.493443",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:43:06.884269",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:43:14.948509",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:43:23.729800",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_7",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:43:32.493426",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_8",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:43:40.504237",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_9",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-29T22:43:49.533849",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:44:19.421874",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:44:27.821538",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:44:35.590355",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:44:46.009375",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_4",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-29T22:44:55.730965",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:45:03.919858",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:45:13.945225",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_7",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-29T22:45:21.822090",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_8",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:45:33.388416",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:46:07.037139",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:46:13.881300",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:46:20.867913",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:46:28.174045",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:46:36.621628",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_5",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-29T22:46:43.645337",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:46:52.067514",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_7",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:47:00.192247",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "Value 2.001 meets threshold 3.0",
          "timestamp": "2025-05-29T22:47:13.969250",
          "event_type": "validation",
          "details": {
            "value": 2.001,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:47:39.722267",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:47:49.139491",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:47:57.892389",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:48:06.023633",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:48:13.454900",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:48:24.665390",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:48:56.619092",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:49:03.963787",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:49:11.636434",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:49:19.038380",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:49:28.284175",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:49:35.799316",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:49:45.587647",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_7",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:49:53.114294",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_6_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:50:23.081352",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_6_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:50:32.387344",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_6_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:50:39.223448",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_6_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:50:47.581171",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_6_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:50:57.426098",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_6_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:51:08.104153",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_6_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:51:16.819988",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_7_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:51:43.890512",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_7_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:51:50.822336",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_7_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:51:58.446334",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_7_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:52:06.893572",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_7_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:52:14.436676",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_7_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:52:23.558558",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_8_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:52:52.134923",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_8_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:52:58.786111",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_8_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:53:06.270483",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_8_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:53:15.782953",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_8_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:53:24.949665",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_8_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:53:33.148661",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_8_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:53:40.626321",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_9_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:54:10.487245",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_9_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:54:18.436592",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_9_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:54:25.631137",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_9_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:54:57.577691",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_9_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:55:04.826492",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_9_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:55:13.513338",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_9_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:55:21.874378",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_9_7",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T22:55:29.753607",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        }
      ]
    },
    "backtracking_I": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_I",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_0; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-29T22:43:51.986757",
          "event_type": "validation",
          "details": {
            "popped_node": "0_0",
            "expected_popped": "0_0",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_0",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_1; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-29T22:45:35.826415",
          "event_type": "validation",
          "details": {
            "popped_node": "0_1",
            "expected_popped": "0_1",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_1",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_2; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-29T22:47:02.489338",
          "event_type": "validation",
          "details": {
            "popped_node": "0_2",
            "expected_popped": "0_2",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_2",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_4; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-29T22:48:27.724901",
          "event_type": "validation",
          "details": {
            "popped_node": "0_4",
            "expected_popped": "0_4",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_4",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_5; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-29T22:49:55.198180",
          "event_type": "validation",
          "details": {
            "popped_node": "0_5",
            "expected_popped": "0_5",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_5",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_6",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_6; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-29T22:51:19.534742",
          "event_type": "validation",
          "details": {
            "popped_node": "0_6",
            "expected_popped": "0_6",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_6",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_7",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_7; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-29T22:52:26.053295",
          "event_type": "validation",
          "details": {
            "popped_node": "0_7",
            "expected_popped": "0_7",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_7",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_8",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_8; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-29T22:53:43.725071",
          "event_type": "validation",
          "details": {
            "popped_node": "0_8",
            "expected_popped": "0_8",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_8",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_9",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_9; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-29T22:55:33.250422",
          "event_type": "validation",
          "details": {
            "popped_node": "0_9",
            "expected_popped": "0_9",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_9",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
          "timestamp": "2025-05-29T22:55:35.601413",
          "event_type": "validation",
          "details": {
            "popped_node": "0",
            "expected_popped": "0",
            "backtrack_to": "None",
            "expected_parent": "None",
            "validation_details": [
              "Correctly popped expected node 0",
              "Correctly backtracking to parent 'None'"
            ]
          }
        }
      ]
    },
    "backtracking_III": {
      "FAIL": 1,
      "details": [
        {
          "check_name": "backtracking_III",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "All 10 children explored - valid backtrack",
          "timestamp": "2025-05-29T22:43:51.986779",
          "event_type": "validation",
          "details": {
            "total_thoughts": 10,
            "evaluated_children": 10
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "All 9 children explored - valid backtrack",
          "timestamp": "2025-05-29T22:45:35.826438",
          "event_type": "validation",
          "details": {
            "total_thoughts": 9,
            "evaluated_children": 9
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "All 8 children explored - valid backtrack",
          "timestamp": "2025-05-29T22:47:02.489364",
          "event_type": "validation",
          "details": {
            "total_thoughts": 8,
            "evaluated_children": 8
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "All 6 children explored - valid backtrack",
          "timestamp": "2025-05-29T22:48:27.724920",
          "event_type": "validation",
          "details": {
            "total_thoughts": 6,
            "evaluated_children": 6
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "All 8 children explored - valid backtrack",
          "timestamp": "2025-05-29T22:49:55.198201",
          "event_type": "validation",
          "details": {
            "total_thoughts": 8,
            "evaluated_children": 8
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_6",
          "result": "PASS",
          "reason": "All 7 children explored - valid backtrack",
          "timestamp": "2025-05-29T22:51:19.534762",
          "event_type": "validation",
          "details": {
            "total_thoughts": 7,
            "evaluated_children": 7
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_7",
          "result": "PASS",
          "reason": "All 6 children explored - valid backtrack",
          "timestamp": "2025-05-29T22:52:26.053315",
          "event_type": "validation",
          "details": {
            "total_thoughts": 6,
            "evaluated_children": 6
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_8",
          "result": "PASS",
          "reason": "All 7 children explored - valid backtrack",
          "timestamp": "2025-05-29T22:53:43.725092",
          "event_type": "validation",
          "details": {
            "total_thoughts": 7,
            "evaluated_children": 7
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_9",
          "result": "PASS",
          "reason": "All 8 children explored - valid backtrack",
          "timestamp": "2025-05-29T22:55:33.250443",
          "event_type": "validation",
          "details": {
            "total_thoughts": 8,
            "evaluated_children": 8
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0",
          "result": "FAIL",
          "reason": "Only 10 of 27 children explored",
          "timestamp": "2025-05-29T22:55:35.601437",
          "event_type": "validation",
          "details": {
            "total_thoughts": 27,
            "evaluated_children": 10
          }
        }
      ]
    },
    "backtracking_IV": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_IV",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_1 follows 0_0",
          "timestamp": "2025-05-29T22:44:02.822480",
          "event_type": "validation",
          "details": {
            "popped_node": "0_0",
            "current_node": "0_1",
            "expected_index": 1,
            "actual_index": 1
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_2 follows 0_1",
          "timestamp": "2025-05-29T22:45:48.025597",
          "event_type": "validation",
          "details": {
            "popped_node": "0_1",
            "current_node": "0_2",
            "expected_index": 2,
            "actual_index": 2
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_3 follows 0_2",
          "timestamp": "2025-05-29T22:47:13.969215",
          "event_type": "validation",
          "details": {
            "popped_node": "0_2",
            "current_node": "0_3",
            "expected_index": 3,
            "actual_index": 3
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_5 follows 0_4",
          "timestamp": "2025-05-29T22:48:37.541087",
          "event_type": "validation",
          "details": {
            "popped_node": "0_4",
            "current_node": "0_5",
            "expected_index": 5,
            "actual_index": 5
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_6",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_6 follows 0_5",
          "timestamp": "2025-05-29T22:50:05.340991",
          "event_type": "validation",
          "details": {
            "popped_node": "0_5",
            "current_node": "0_6",
            "expected_index": 6,
            "actual_index": 6
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_7",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_7 follows 0_6",
          "timestamp": "2025-05-29T22:51:28.044084",
          "event_type": "validation",
          "details": {
            "popped_node": "0_6",
            "current_node": "0_7",
            "expected_index": 7,
            "actual_index": 7
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_8",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_8 follows 0_7",
          "timestamp": "2025-05-29T22:52:36.178020",
          "event_type": "validation",
          "details": {
            "popped_node": "0_7",
            "current_node": "0_8",
            "expected_index": 8,
            "actual_index": 8
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_9",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_9 follows 0_8",
          "timestamp": "2025-05-29T22:53:52.556523",
          "event_type": "validation",
          "details": {
            "popped_node": "0_8",
            "current_node": "0_9",
            "expected_index": 9,
            "actual_index": 9
          }
        }
      ]
    },
    "looping_order": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "looping_order",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132475",
          "event_type": "validation",
          "details": {
            "state": "1 + 3 = 4 (left: 4 5 6)",
            "thought": "1 + 3 = 4 (left: 4 5 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132494",
          "event_type": "validation",
          "details": {
            "state": "3 - 1 = 2 (left: 2 5 6)",
            "thought": "3 - 1 = 2 (left: 2 5 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132500",
          "event_type": "validation",
          "details": {
            "state": "5 - 1 = 4 (left: 3 4 6)",
            "thought": "5 - 1 = 4 (left: 3 4 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132505",
          "event_type": "validation",
          "details": {
            "state": "6 - 1 = 5 (left: 3 5 5)",
            "thought": "6 - 1 = 5 (left: 3 5 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132510",
          "event_type": "validation",
          "details": {
            "state": "1 * 3 = 3 (left: 3 5 6)",
            "thought": "1 * 3 = 3 (left: 3 5 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132514",
          "event_type": "validation",
          "details": {
            "state": "3 * 1 = 3 (left: 3 5 6)",
            "thought": "3 * 1 = 3 (left: 3 5 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132519",
          "event_type": "validation",
          "details": {
            "state": "5 * 1 = 5 (left: 3 5 6)",
            "thought": "5 * 1 = 5 (left: 3 5 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_7",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132524",
          "event_type": "validation",
          "details": {
            "state": "6 * 1 = 6 (left: 3 5 6)",
            "thought": "6 * 1 = 6 (left: 3 5 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_8",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132529",
          "event_type": "validation",
          "details": {
            "state": "5 / 1 = 5 (left: 3 5 6)",
            "thought": "5 / 1 = 5 (left: 3 5 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_9",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132533",
          "event_type": "validation",
          "details": {
            "state": "6 / 1 = 6 (left: 3 5 6)",
            "thought": "6 / 1 = 6 (left: 3 5 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132565",
          "event_type": "validation",
          "details": {
            "state": "4 + 5 = 9 (left: 6 9)",
            "thought": "4 + 5 = 9 (left: 6 9)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132573",
          "event_type": "validation",
          "details": {
            "state": "5 + 6 = 11 (left: 4 11)",
            "thought": "5 + 6 = 11 (left: 4 11)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132582",
          "event_type": "validation",
          "details": {
            "state": "6 + 4 = 10 (left: 5 10)",
            "thought": "6 + 4 = 10 (left: 5 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132590",
          "event_type": "validation",
          "details": {
            "state": "5 - 4 = 1 (left: 1 6)",
            "thought": "5 - 4 = 1 (left: 1 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132596",
          "event_type": "validation",
          "details": {
            "state": "6 - 4 = 2 (left: 2 5)",
            "thought": "6 - 4 = 2 (left: 2 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132602",
          "event_type": "validation",
          "details": {
            "state": "6 - 5 = 1 (left: 1 4)",
            "thought": "6 - 5 = 1 (left: 1 4)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132606",
          "event_type": "validation",
          "details": {
            "state": "4 * 5 = 20 (left: 6 20)",
            "thought": "4 * 5 = 20 (left: 6 20)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_7",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132611",
          "event_type": "validation",
          "details": {
            "state": "5 * 6 = 30 (left: 4 30)",
            "thought": "5 * 6 = 30 (left: 4 30)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_8",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132616",
          "event_type": "validation",
          "details": {
            "state": "6 / 4 = 1.5 (left: 1.5 5)",
            "thought": "6 / 4 = 1.5 (left: 1.5 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_9",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132621",
          "event_type": "validation",
          "details": {
            "state": "5 / 4 = 1.25 (left: 1.25 6)",
            "thought": "5 / 4 = 1.25 (left: 1.25 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132673",
          "event_type": "validation",
          "details": {
            "state": "2 + 5 = 7 (left: 6 7)",
            "thought": "2 + 5 = 7 (left: 6 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132679",
          "event_type": "validation",
          "details": {
            "state": "5 - 2 = 3 (left: 3 6)",
            "thought": "5 - 2 = 3 (left: 3 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132684",
          "event_type": "validation",
          "details": {
            "state": "6 - 2 = 4 (left: 4 5)",
            "thought": "6 - 2 = 4 (left: 4 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132689",
          "event_type": "validation",
          "details": {
            "state": "2 * 5 = 10 (left: 6 10)",
            "thought": "2 * 5 = 10 (left: 6 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132694",
          "event_type": "validation",
          "details": {
            "state": "5 / 2 = 2.5 (left: 2.5 6)",
            "thought": "5 / 2 = 2.5 (left: 2.5 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132699",
          "event_type": "validation",
          "details": {
            "state": "6 / 2 = 3 (left: 3 5)",
            "thought": "6 / 2 = 3 (left: 3 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132704",
          "event_type": "validation",
          "details": {
            "state": "6 - 5 = 1 (left: 1 2)",
            "thought": "6 - 5 = 1 (left: 1 2)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_7",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132709",
          "event_type": "validation",
          "details": {
            "state": "2 * 6 = 12 (left: 5 12)",
            "thought": "2 * 6 = 12 (left: 5 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_8",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132714",
          "event_type": "validation",
          "details": {
            "state": "5 * 2 = 10 (left: 6 10)",
            "thought": "5 * 2 = 10 (left: 6 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132758",
          "event_type": "validation",
          "details": {
            "state": "3 + 4 = 7 (left: 6 7)",
            "thought": "3 + 4 = 7 (left: 6 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132764",
          "event_type": "validation",
          "details": {
            "state": "4 + 6 = 10 (left: 3 10)",
            "thought": "4 + 6 = 10 (left: 3 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132769",
          "event_type": "validation",
          "details": {
            "state": "6 - 4 = 2 (left: 2 3)",
            "thought": "6 - 4 = 2 (left: 2 3)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132774",
          "event_type": "validation",
          "details": {
            "state": "4 * 3 = 12 (left: 6 12)",
            "thought": "4 * 3 = 12 (left: 6 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132779",
          "event_type": "validation",
          "details": {
            "state": "6 / 3 = 2 (left: 2 4)",
            "thought": "6 / 3 = 2 (left: 2 4)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132783",
          "event_type": "validation",
          "details": {
            "state": "3 * 6 = 18 (left: 4 18)",
            "thought": "3 * 6 = 18 (left: 4 18)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132788",
          "event_type": "validation",
          "details": {
            "state": "4 - 3 = 1 (left: 1 6)",
            "thought": "4 - 3 = 1 (left: 1 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_7",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132793",
          "event_type": "validation",
          "details": {
            "state": "6 - 3 = 3 (left: 3 4)",
            "thought": "6 - 3 = 3 (left: 3 4)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132832",
          "event_type": "validation",
          "details": {
            "state": "3 + 5 = 8 (left: 6 8)",
            "thought": "3 + 5 = 8 (left: 6 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132837",
          "event_type": "validation",
          "details": {
            "state": "5 - 3 = 2 (left: 2 6)",
            "thought": "5 - 3 = 2 (left: 2 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132842",
          "event_type": "validation",
          "details": {
            "state": "6 - 3 = 3 (left: 3 5)",
            "thought": "6 - 3 = 3 (left: 3 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132847",
          "event_type": "validation",
          "details": {
            "state": "3 * 5 = 15 (left: 6 15)",
            "thought": "3 * 5 = 15 (left: 6 15)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132854",
          "event_type": "validation",
          "details": {
            "state": "5 * 6 = 30 (left: 3 30)",
            "thought": "5 * 6 = 30 (left: 3 30)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132859",
          "event_type": "validation",
          "details": {
            "state": "6 / 3 = 2 (left: 2 5)",
            "thought": "6 / 3 = 2 (left: 2 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132893",
          "event_type": "validation",
          "details": {
            "state": "3 + 5 = 8 (left: 6 8)",
            "thought": "3 + 5 = 8 (left: 6 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132898",
          "event_type": "validation",
          "details": {
            "state": "5 - 3 = 2 (left: 2 6)",
            "thought": "5 - 3 = 2 (left: 2 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132903",
          "event_type": "validation",
          "details": {
            "state": "6 - 3 = 3 (left: 3 5)",
            "thought": "6 - 3 = 3 (left: 3 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132908",
          "event_type": "validation",
          "details": {
            "state": "6 / 3 = 2 (left: 2 5)",
            "thought": "6 / 3 = 2 (left: 2 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132913",
          "event_type": "validation",
          "details": {
            "state": "3 * 5 = 15 (left: 6 15)",
            "thought": "3 * 5 = 15 (left: 6 15)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132918",
          "event_type": "validation",
          "details": {
            "state": "5 * 6 = 30 (left: 3 30)",
            "thought": "5 * 6 = 30 (left: 3 30)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132923",
          "event_type": "validation",
          "details": {
            "state": "6 + 3 = 9 (left: 5 9)",
            "thought": "6 + 3 = 9 (left: 5 9)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_7",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132945",
          "event_type": "validation",
          "details": {
            "state": "5 + 3 = 8 (left: 6 8)",
            "thought": "5 + 3 = 8 (left: 6 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_6_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132984",
          "event_type": "validation",
          "details": {
            "state": "3 + 5 = 8 (left: 6 8)",
            "thought": "3 + 5 = 8 (left: 6 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_6_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132990",
          "event_type": "validation",
          "details": {
            "state": "5 - 3 = 2 (left: 2 6)",
            "thought": "5 - 3 = 2 (left: 2 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_6_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.132995",
          "event_type": "validation",
          "details": {
            "state": "6 / 3 = 2 (left: 2 5)",
            "thought": "6 / 3 = 2 (left: 2 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_6_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133001",
          "event_type": "validation",
          "details": {
            "state": "3 * 5 = 15 (left: 6 15)",
            "thought": "3 * 5 = 15 (left: 6 15)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_6_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133006",
          "event_type": "validation",
          "details": {
            "state": "5 + 6 = 11 (left: 3 11)",
            "thought": "5 + 6 = 11 (left: 3 11)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_6_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133011",
          "event_type": "validation",
          "details": {
            "state": "6 - 3 = 3 (left: 3 5)",
            "thought": "6 - 3 = 3 (left: 3 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_6_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133015",
          "event_type": "validation",
          "details": {
            "state": "6 - 5 = 1 (left: 1 3)",
            "thought": "6 - 5 = 1 (left: 1 3)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_7_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133048",
          "event_type": "validation",
          "details": {
            "state": "3 + 5 = 8 (left: 6 8)",
            "thought": "3 + 5 = 8 (left: 6 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_7_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133053",
          "event_type": "validation",
          "details": {
            "state": "5 - 3 = 2 (left: 2 6)",
            "thought": "5 - 3 = 2 (left: 2 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_7_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133058",
          "event_type": "validation",
          "details": {
            "state": "6 - 3 = 3 (left: 3 5)",
            "thought": "6 - 3 = 3 (left: 3 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_7_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133062",
          "event_type": "validation",
          "details": {
            "state": "6 / 3 = 2 (left: 2 5)",
            "thought": "6 / 3 = 2 (left: 2 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_7_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133067",
          "event_type": "validation",
          "details": {
            "state": "5 * 3 = 15 (left: 6 15)",
            "thought": "5 * 3 = 15 (left: 6 15)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_7_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133071",
          "event_type": "validation",
          "details": {
            "state": "6 + 3 = 9 (left: 5 9)",
            "thought": "6 + 3 = 9 (left: 5 9)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_8_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133109",
          "event_type": "validation",
          "details": {
            "state": "3 + 5 = 8 (left: 6 8)",
            "thought": "3 + 5 = 8 (left: 6 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_8_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133115",
          "event_type": "validation",
          "details": {
            "state": "5 - 3 = 2 (left: 2 6)",
            "thought": "5 - 3 = 2 (left: 2 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_8_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133120",
          "event_type": "validation",
          "details": {
            "state": "6 - 3 = 3 (left: 3 5)",
            "thought": "6 - 3 = 3 (left: 3 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_8_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133124",
          "event_type": "validation",
          "details": {
            "state": "3 * 5 = 15 (left: 6 15)",
            "thought": "3 * 5 = 15 (left: 6 15)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_8_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133129",
          "event_type": "validation",
          "details": {
            "state": "6 / 3 = 2 (left: 2 5)",
            "thought": "6 / 3 = 2 (left: 2 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_8_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133135",
          "event_type": "validation",
          "details": {
            "state": "5 * 3 = 15 (left: 6 15)",
            "thought": "5 * 3 = 15 (left: 6 15)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_8_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133140",
          "event_type": "validation",
          "details": {
            "state": "6 - 5 = 1 (left: 1 3)",
            "thought": "6 - 5 = 1 (left: 1 3)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_9_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133176",
          "event_type": "validation",
          "details": {
            "state": "3 + 5 = 8 (left: 6 8)",
            "thought": "3 + 5 = 8 (left: 6 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_9_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133181",
          "event_type": "validation",
          "details": {
            "state": "5 + 6 = 11 (left: 3 11)",
            "thought": "5 + 6 = 11 (left: 3 11)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_9_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133186",
          "event_type": "validation",
          "details": {
            "state": "6 - 3 = 3 (left: 3 5)",
            "thought": "6 - 3 = 3 (left: 3 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_9_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133190",
          "event_type": "validation",
          "details": {
            "state": "5 - 3 = 2 (left: 2 6)",
            "thought": "5 - 3 = 2 (left: 2 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_9_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133195",
          "event_type": "validation",
          "details": {
            "state": "6 / 3 = 2 (left: 2 5)",
            "thought": "6 / 3 = 2 (left: 2 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_9_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133199",
          "event_type": "validation",
          "details": {
            "state": "3 * 5 = 15 (left: 6 15)",
            "thought": "3 * 5 = 15 (left: 6 15)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_9_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133204",
          "event_type": "validation",
          "details": {
            "state": "5 * 6 = 30 (left: 3 30)",
            "thought": "5 * 6 = 30 (left: 3 30)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_9_7",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T22:55:37.133209",
          "event_type": "validation",
          "details": {
            "state": "6 * 3 = 18 (left: 5 18)",
            "thought": "6 * 3 = 18 (left: 5 18)"
          }
        }
      ]
    },
    "valid_search_trace": {
      "success_trace": false
    }
  },
  "detailed_results": [
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-29T22:42:09.522977",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State validation passed: Last thought '1 + 3 = 4 (left: 4 5 6)' found in parent's thoughts",
      "timestamp": "2025-05-29T22:42:09.523027",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '1 + 3 = 4 (left: 4 5 6)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "1 + 3 = 4 (left: 4 5 6)",
          "3 - 1 = 2 (left: 2 5 6)",
          "5 - 1 = 4 (left: 3 4 6)",
          "6 - 1 = 5 (left: 3 5 5)",
          "1 * 3 = 3 (left: 3 5 6)",
          "3 * 1 = 3 (left: 3 5 6)",
          "5 * 1 = 5 (left: 3 5 6)",
          "6 * 1 = 6 (left: 3 5 6)",
          "5 / 1 = 5 (left: 3 5 6)",
          "6 / 1 = 6 (left: 3 5 6)",
          "3 + 5 = 8 (left: 1 6 8)",
          "5 - 3 = 2 (left: 1 2 6)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 5 = 15 (left: 1 6 15)",
          "5 * 3 = 15 (left: 1 6 15)",
          "5 / 3 = 1.66667 (left: 1 1.66667 6)",
          "6 + 5 = 11 (left: 1 3 11)",
          "5 - 6 = -1 (left: -1 1 3)",
          "6 - 5 = 1 (left: 1 1 3)",
          "5 * 6 = 30 (left: 1 3 30)",
          "6 * 5 = 30 (left: 1 3 30)",
          "6 / 5 = 1.2 (left: 1 1.2 3)",
          "3 + 6 = 9 (left: 1 5 9)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 6 = 18 (left: 1 5 18)",
          "6 * 3 = 18 (left: 1 5 18)",
          "6 / 3 = 2 (left: 1 2 5)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "node_id 0_0 matches thought position.",
      "timestamp": "2025-05-29T22:42:09.523070",
      "event_type": "validation",
      "details": {
        "node_id": "0_0",
        "state": "1 + 3 = 4 (left: 4 5 6)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 5 6)",
          "3 - 1 = 2 (left: 2 5 6)",
          "5 - 1 = 4 (left: 3 4 6)",
          "6 - 1 = 5 (left: 3 5 5)",
          "1 * 3 = 3 (left: 3 5 6)",
          "3 * 1 = 3 (left: 3 5 6)",
          "5 * 1 = 5 (left: 3 5 6)",
          "6 * 1 = 6 (left: 3 5 6)",
          "5 / 1 = 5 (left: 3 5 6)",
          "6 / 1 = 6 (left: 3 5 6)",
          "3 + 5 = 8 (left: 1 6 8)",
          "5 - 3 = 2 (left: 1 2 6)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 5 = 15 (left: 1 6 15)",
          "5 * 3 = 15 (left: 1 6 15)",
          "5 / 3 = 1.66667 (left: 1 1.66667 6)",
          "6 + 5 = 11 (left: 1 3 11)",
          "5 - 6 = -1 (left: -1 1 3)",
          "6 - 5 = 1 (left: 1 1 3)",
          "5 * 6 = 30 (left: 1 3 30)",
          "6 * 5 = 30 (left: 1 3 30)",
          "6 / 5 = 1.2 (left: 1 1.2 3)",
          "3 + 6 = 9 (left: 1 5 9)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 6 = 18 (left: 1 5 18)",
          "6 * 3 = 18 (left: 1 5 18)",
          "6 / 3 = 2 (left: 1 2 5)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-29T22:42:19.283267",
      "event_type": "validation",
      "details": {
        "expected_state": "1 + 3 = 4 (left: 4 5 6)",
        "actual_state": "1 + 3 = 4 (left: 4 5 6)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:42:36.301705",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_0",
      "result": "PASS",
      "reason": "node_id 0_0_0 matches thought position.",
      "timestamp": "2025-05-29T22:42:36.301762",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_0",
        "state": "4 + 5 = 9 (left: 6 9)",
        "thoughts": [
          "4 + 5 = 9 (left: 6 9)",
          "5 + 6 = 11 (left: 4 11)",
          "6 + 4 = 10 (left: 5 10)",
          "5 - 4 = 1 (left: 1 6)",
          "6 - 4 = 2 (left: 2 5)",
          "6 - 5 = 1 (left: 1 4)",
          "4 * 5 = 20 (left: 6 20)",
          "5 * 6 = 30 (left: 4 30)",
          "6 / 4 = 1.5 (left: 1.5 5)",
          "5 / 4 = 1.25 (left: 1.25 6)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:42:44.709019",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "node_id 0_0_1 matches thought position.",
      "timestamp": "2025-05-29T22:42:44.709073",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_1",
        "state": "5 + 6 = 11 (left: 4 11)",
        "thoughts": [
          "4 + 5 = 9 (left: 6 9)",
          "5 + 6 = 11 (left: 4 11)",
          "6 + 4 = 10 (left: 5 10)",
          "5 - 4 = 1 (left: 1 6)",
          "6 - 4 = 2 (left: 2 5)",
          "6 - 5 = 1 (left: 1 4)",
          "4 * 5 = 20 (left: 6 20)",
          "5 * 6 = 30 (left: 4 30)",
          "6 / 4 = 1.5 (left: 1.5 5)",
          "5 / 4 = 1.25 (left: 1.25 6)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:42:51.902590",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_2",
      "result": "PASS",
      "reason": "node_id 0_0_2 matches thought position.",
      "timestamp": "2025-05-29T22:42:51.902661",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_2",
        "state": "6 + 4 = 10 (left: 5 10)",
        "thoughts": [
          "4 + 5 = 9 (left: 6 9)",
          "5 + 6 = 11 (left: 4 11)",
          "6 + 4 = 10 (left: 5 10)",
          "5 - 4 = 1 (left: 1 6)",
          "6 - 4 = 2 (left: 2 5)",
          "6 - 5 = 1 (left: 1 4)",
          "4 * 5 = 20 (left: 6 20)",
          "5 * 6 = 30 (left: 4 30)",
          "6 / 4 = 1.5 (left: 1.5 5)",
          "5 / 4 = 1.25 (left: 1.25 6)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:42:59.493443",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_3",
      "result": "PASS",
      "reason": "node_id 0_0_3 matches thought position.",
      "timestamp": "2025-05-29T22:42:59.493503",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_3",
        "state": "5 - 4 = 1 (left: 1 6)",
        "thoughts": [
          "4 + 5 = 9 (left: 6 9)",
          "5 + 6 = 11 (left: 4 11)",
          "6 + 4 = 10 (left: 5 10)",
          "5 - 4 = 1 (left: 1 6)",
          "6 - 4 = 2 (left: 2 5)",
          "6 - 5 = 1 (left: 1 4)",
          "4 * 5 = 20 (left: 6 20)",
          "5 * 6 = 30 (left: 4 30)",
          "6 / 4 = 1.5 (left: 1.5 5)",
          "5 / 4 = 1.25 (left: 1.25 6)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:43:06.884269",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_4",
      "result": "PASS",
      "reason": "node_id 0_0_4 matches thought position.",
      "timestamp": "2025-05-29T22:43:06.884327",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_4",
        "state": "6 - 4 = 2 (left: 2 5)",
        "thoughts": [
          "4 + 5 = 9 (left: 6 9)",
          "5 + 6 = 11 (left: 4 11)",
          "6 + 4 = 10 (left: 5 10)",
          "5 - 4 = 1 (left: 1 6)",
          "6 - 4 = 2 (left: 2 5)",
          "6 - 5 = 1 (left: 1 4)",
          "4 * 5 = 20 (left: 6 20)",
          "5 * 6 = 30 (left: 4 30)",
          "6 / 4 = 1.5 (left: 1.5 5)",
          "5 / 4 = 1.25 (left: 1.25 6)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:43:14.948509",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_5",
      "result": "PASS",
      "reason": "node_id 0_0_5 matches thought position.",
      "timestamp": "2025-05-29T22:43:14.948569",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_5",
        "state": "6 - 5 = 1 (left: 1 4)",
        "thoughts": [
          "4 + 5 = 9 (left: 6 9)",
          "5 + 6 = 11 (left: 4 11)",
          "6 + 4 = 10 (left: 5 10)",
          "5 - 4 = 1 (left: 1 6)",
          "6 - 4 = 2 (left: 2 5)",
          "6 - 5 = 1 (left: 1 4)",
          "4 * 5 = 20 (left: 6 20)",
          "5 * 6 = 30 (left: 4 30)",
          "6 / 4 = 1.5 (left: 1.5 5)",
          "5 / 4 = 1.25 (left: 1.25 6)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:43:23.729800",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_6",
      "result": "PASS",
      "reason": "node_id 0_0_6 matches thought position.",
      "timestamp": "2025-05-29T22:43:23.729860",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_6",
        "state": "4 * 5 = 20 (left: 6 20)",
        "thoughts": [
          "4 + 5 = 9 (left: 6 9)",
          "5 + 6 = 11 (left: 4 11)",
          "6 + 4 = 10 (left: 5 10)",
          "5 - 4 = 1 (left: 1 6)",
          "6 - 4 = 2 (left: 2 5)",
          "6 - 5 = 1 (left: 1 4)",
          "4 * 5 = 20 (left: 6 20)",
          "5 * 6 = 30 (left: 4 30)",
          "6 / 4 = 1.5 (left: 1.5 5)",
          "5 / 4 = 1.25 (left: 1.25 6)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_7",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:43:32.493426",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_7",
      "result": "PASS",
      "reason": "node_id 0_0_7 matches thought position.",
      "timestamp": "2025-05-29T22:43:32.493479",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_7",
        "state": "5 * 6 = 30 (left: 4 30)",
        "thoughts": [
          "4 + 5 = 9 (left: 6 9)",
          "5 + 6 = 11 (left: 4 11)",
          "6 + 4 = 10 (left: 5 10)",
          "5 - 4 = 1 (left: 1 6)",
          "6 - 4 = 2 (left: 2 5)",
          "6 - 5 = 1 (left: 1 4)",
          "4 * 5 = 20 (left: 6 20)",
          "5 * 6 = 30 (left: 4 30)",
          "6 / 4 = 1.5 (left: 1.5 5)",
          "5 / 4 = 1.25 (left: 1.25 6)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_8",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:43:40.504237",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_8",
      "result": "PASS",
      "reason": "node_id 0_0_8 matches thought position.",
      "timestamp": "2025-05-29T22:43:40.504291",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_8",
        "state": "6 / 4 = 1.5 (left: 1.5 5)",
        "thoughts": [
          "4 + 5 = 9 (left: 6 9)",
          "5 + 6 = 11 (left: 4 11)",
          "6 + 4 = 10 (left: 5 10)",
          "5 - 4 = 1 (left: 1 6)",
          "6 - 4 = 2 (left: 2 5)",
          "6 - 5 = 1 (left: 1 4)",
          "4 * 5 = 20 (left: 6 20)",
          "5 * 6 = 30 (left: 4 30)",
          "6 / 4 = 1.5 (left: 1.5 5)",
          "5 / 4 = 1.25 (left: 1.25 6)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_9",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-29T22:43:49.533849",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_9",
      "result": "PASS",
      "reason": "node_id 0_0_9 matches thought position.",
      "timestamp": "2025-05-29T22:43:49.533911",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_9",
        "state": "5 / 4 = 1.25 (left: 1.25 6)",
        "thoughts": [
          "4 + 5 = 9 (left: 6 9)",
          "5 + 6 = 11 (left: 4 11)",
          "6 + 4 = 10 (left: 5 10)",
          "5 - 4 = 1 (left: 1 6)",
          "6 - 4 = 2 (left: 2 5)",
          "6 - 5 = 1 (left: 1 4)",
          "4 * 5 = 20 (left: 6 20)",
          "5 * 6 = 30 (left: 4 30)",
          "6 / 4 = 1.5 (left: 1.5 5)",
          "5 / 4 = 1.25 (left: 1.25 6)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_0; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-29T22:43:51.986757",
      "event_type": "validation",
      "details": {
        "popped_node": "0_0",
        "expected_popped": "0_0",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_0",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "All 10 children explored - valid backtrack",
      "timestamp": "2025-05-29T22:43:51.986779",
      "event_type": "validation",
      "details": {
        "total_thoughts": 10,
        "evaluated_children": 10
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-29T22:44:02.822372",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State validation passed: Last thought '3 - 1 = 2 (left: 2 5 6)' found in parent's thoughts",
      "timestamp": "2025-05-29T22:44:02.822416",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '3 - 1 = 2 (left: 2 5 6)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "1 + 3 = 4 (left: 4 5 6)",
          "3 - 1 = 2 (left: 2 5 6)",
          "5 - 1 = 4 (left: 3 4 6)",
          "6 - 1 = 5 (left: 3 5 5)",
          "1 * 3 = 3 (left: 3 5 6)",
          "3 * 1 = 3 (left: 3 5 6)",
          "5 * 1 = 5 (left: 3 5 6)",
          "6 * 1 = 6 (left: 3 5 6)",
          "5 / 1 = 5 (left: 3 5 6)",
          "6 / 1 = 6 (left: 3 5 6)",
          "3 + 5 = 8 (left: 1 6 8)",
          "5 - 3 = 2 (left: 1 2 6)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 5 = 15 (left: 1 6 15)",
          "5 * 3 = 15 (left: 1 6 15)",
          "5 / 3 = 1.66667 (left: 1 1.66667 6)",
          "6 + 5 = 11 (left: 1 3 11)",
          "5 - 6 = -1 (left: -1 1 3)",
          "6 - 5 = 1 (left: 1 1 3)",
          "5 * 6 = 30 (left: 1 3 30)",
          "6 * 5 = 30 (left: 1 3 30)",
          "6 / 5 = 1.2 (left: 1 1.2 3)",
          "3 + 6 = 9 (left: 1 5 9)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 6 = 18 (left: 1 5 18)",
          "6 * 3 = 18 (left: 1 5 18)",
          "6 / 3 = 2 (left: 1 2 5)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_1 follows 0_0",
      "timestamp": "2025-05-29T22:44:02.822480",
      "event_type": "validation",
      "details": {
        "popped_node": "0_0",
        "current_node": "0_1",
        "expected_index": 1,
        "actual_index": 1
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "node_id 0_1 matches thought position.",
      "timestamp": "2025-05-29T22:44:02.822518",
      "event_type": "validation",
      "details": {
        "node_id": "0_1",
        "state": "3 - 1 = 2 (left: 2 5 6)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 5 6)",
          "3 - 1 = 2 (left: 2 5 6)",
          "5 - 1 = 4 (left: 3 4 6)",
          "6 - 1 = 5 (left: 3 5 5)",
          "1 * 3 = 3 (left: 3 5 6)",
          "3 * 1 = 3 (left: 3 5 6)",
          "5 * 1 = 5 (left: 3 5 6)",
          "6 * 1 = 6 (left: 3 5 6)",
          "5 / 1 = 5 (left: 3 5 6)",
          "6 / 1 = 6 (left: 3 5 6)",
          "3 + 5 = 8 (left: 1 6 8)",
          "5 - 3 = 2 (left: 1 2 6)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 5 = 15 (left: 1 6 15)",
          "5 * 3 = 15 (left: 1 6 15)",
          "5 / 3 = 1.66667 (left: 1 1.66667 6)",
          "6 + 5 = 11 (left: 1 3 11)",
          "5 - 6 = -1 (left: -1 1 3)",
          "6 - 5 = 1 (left: 1 1 3)",
          "5 * 6 = 30 (left: 1 3 30)",
          "6 * 5 = 30 (left: 1 3 30)",
          "6 / 5 = 1.2 (left: 1 1.2 3)",
          "3 + 6 = 9 (left: 1 5 9)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 6 = 18 (left: 1 5 18)",
          "6 * 3 = 18 (left: 1 5 18)",
          "6 / 3 = 2 (left: 1 2 5)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-29T22:44:10.848696",
      "event_type": "validation",
      "details": {
        "expected_state": "3 - 1 = 2 (left: 2 5 6)",
        "actual_state": "3 - 1 = 2 (left: 2 5 6)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:44:19.421874",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "node_id 0_1_0 matches thought position.",
      "timestamp": "2025-05-29T22:44:19.421966",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_0",
        "state": "2 + 5 = 7 (left: 6 7)",
        "thoughts": [
          "2 + 5 = 7 (left: 6 7)",
          "5 - 2 = 3 (left: 3 6)",
          "6 - 2 = 4 (left: 4 5)",
          "2 * 5 = 10 (left: 6 10)",
          "5 / 2 = 2.5 (left: 2.5 6)",
          "6 / 2 = 3 (left: 3 5)",
          "6 - 5 = 1 (left: 1 2)",
          "2 * 6 = 12 (left: 5 12)",
          "5 * 2 = 10 (left: 6 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:44:27.821538",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_1",
      "result": "PASS",
      "reason": "node_id 0_1_1 matches thought position.",
      "timestamp": "2025-05-29T22:44:27.821597",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_1",
        "state": "5 - 2 = 3 (left: 3 6)",
        "thoughts": [
          "2 + 5 = 7 (left: 6 7)",
          "5 - 2 = 3 (left: 3 6)",
          "6 - 2 = 4 (left: 4 5)",
          "2 * 5 = 10 (left: 6 10)",
          "5 / 2 = 2.5 (left: 2.5 6)",
          "6 / 2 = 3 (left: 3 5)",
          "6 - 5 = 1 (left: 1 2)",
          "2 * 6 = 12 (left: 5 12)",
          "5 * 2 = 10 (left: 6 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:44:35.590355",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_2",
      "result": "PASS",
      "reason": "node_id 0_1_2 matches thought position.",
      "timestamp": "2025-05-29T22:44:35.590406",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_2",
        "state": "6 - 2 = 4 (left: 4 5)",
        "thoughts": [
          "2 + 5 = 7 (left: 6 7)",
          "5 - 2 = 3 (left: 3 6)",
          "6 - 2 = 4 (left: 4 5)",
          "2 * 5 = 10 (left: 6 10)",
          "5 / 2 = 2.5 (left: 2.5 6)",
          "6 / 2 = 3 (left: 3 5)",
          "6 - 5 = 1 (left: 1 2)",
          "2 * 6 = 12 (left: 5 12)",
          "5 * 2 = 10 (left: 6 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:44:46.009375",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_3",
      "result": "PASS",
      "reason": "node_id 0_1_3 matches thought position.",
      "timestamp": "2025-05-29T22:44:46.009429",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_3",
        "state": "2 * 5 = 10 (left: 6 10)",
        "thoughts": [
          "2 + 5 = 7 (left: 6 7)",
          "5 - 2 = 3 (left: 3 6)",
          "6 - 2 = 4 (left: 4 5)",
          "2 * 5 = 10 (left: 6 10)",
          "5 / 2 = 2.5 (left: 2.5 6)",
          "6 / 2 = 3 (left: 3 5)",
          "6 - 5 = 1 (left: 1 2)",
          "2 * 6 = 12 (left: 5 12)",
          "5 * 2 = 10 (left: 6 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_4",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-29T22:44:55.730965",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_4",
      "result": "PASS",
      "reason": "node_id 0_1_4 matches thought position.",
      "timestamp": "2025-05-29T22:44:55.731030",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_4",
        "state": "5 / 2 = 2.5 (left: 2.5 6)",
        "thoughts": [
          "2 + 5 = 7 (left: 6 7)",
          "5 - 2 = 3 (left: 3 6)",
          "6 - 2 = 4 (left: 4 5)",
          "2 * 5 = 10 (left: 6 10)",
          "5 / 2 = 2.5 (left: 2.5 6)",
          "6 / 2 = 3 (left: 3 5)",
          "6 - 5 = 1 (left: 1 2)",
          "2 * 6 = 12 (left: 5 12)",
          "5 * 2 = 10 (left: 6 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:45:03.919858",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_5",
      "result": "PASS",
      "reason": "node_id 0_1_5 matches thought position.",
      "timestamp": "2025-05-29T22:45:03.919914",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_5",
        "state": "6 / 2 = 3 (left: 3 5)",
        "thoughts": [
          "2 + 5 = 7 (left: 6 7)",
          "5 - 2 = 3 (left: 3 6)",
          "6 - 2 = 4 (left: 4 5)",
          "2 * 5 = 10 (left: 6 10)",
          "5 / 2 = 2.5 (left: 2.5 6)",
          "6 / 2 = 3 (left: 3 5)",
          "6 - 5 = 1 (left: 1 2)",
          "2 * 6 = 12 (left: 5 12)",
          "5 * 2 = 10 (left: 6 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:45:13.945225",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_6",
      "result": "PASS",
      "reason": "node_id 0_1_6 matches thought position.",
      "timestamp": "2025-05-29T22:45:13.945281",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_6",
        "state": "6 - 5 = 1 (left: 1 2)",
        "thoughts": [
          "2 + 5 = 7 (left: 6 7)",
          "5 - 2 = 3 (left: 3 6)",
          "6 - 2 = 4 (left: 4 5)",
          "2 * 5 = 10 (left: 6 10)",
          "5 / 2 = 2.5 (left: 2.5 6)",
          "6 / 2 = 3 (left: 3 5)",
          "6 - 5 = 1 (left: 1 2)",
          "2 * 6 = 12 (left: 5 12)",
          "5 * 2 = 10 (left: 6 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_7",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-29T22:45:21.822090",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_7",
      "result": "PASS",
      "reason": "node_id 0_1_7 matches thought position.",
      "timestamp": "2025-05-29T22:45:21.822146",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_7",
        "state": "2 * 6 = 12 (left: 5 12)",
        "thoughts": [
          "2 + 5 = 7 (left: 6 7)",
          "5 - 2 = 3 (left: 3 6)",
          "6 - 2 = 4 (left: 4 5)",
          "2 * 5 = 10 (left: 6 10)",
          "5 / 2 = 2.5 (left: 2.5 6)",
          "6 / 2 = 3 (left: 3 5)",
          "6 - 5 = 1 (left: 1 2)",
          "2 * 6 = 12 (left: 5 12)",
          "5 * 2 = 10 (left: 6 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_8",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:45:33.388416",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_8",
      "result": "PASS",
      "reason": "node_id 0_1_8 matches thought position.",
      "timestamp": "2025-05-29T22:45:33.388479",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_8",
        "state": "5 * 2 = 10 (left: 6 10)",
        "thoughts": [
          "2 + 5 = 7 (left: 6 7)",
          "5 - 2 = 3 (left: 3 6)",
          "6 - 2 = 4 (left: 4 5)",
          "2 * 5 = 10 (left: 6 10)",
          "5 / 2 = 2.5 (left: 2.5 6)",
          "6 / 2 = 3 (left: 3 5)",
          "6 - 5 = 1 (left: 1 2)",
          "2 * 6 = 12 (left: 5 12)",
          "5 * 2 = 10 (left: 6 10)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_1; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-29T22:45:35.826415",
      "event_type": "validation",
      "details": {
        "popped_node": "0_1",
        "expected_popped": "0_1",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_1",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "All 9 children explored - valid backtrack",
      "timestamp": "2025-05-29T22:45:35.826438",
      "event_type": "validation",
      "details": {
        "total_thoughts": 9,
        "evaluated_children": 9
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-29T22:45:48.025511",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "State validation passed: Last thought '5 - 1 = 4 (left: 3 4 6)' found in parent's thoughts",
      "timestamp": "2025-05-29T22:45:48.025556",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '5 - 1 = 4 (left: 3 4 6)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "1 + 3 = 4 (left: 4 5 6)",
          "3 - 1 = 2 (left: 2 5 6)",
          "5 - 1 = 4 (left: 3 4 6)",
          "6 - 1 = 5 (left: 3 5 5)",
          "1 * 3 = 3 (left: 3 5 6)",
          "3 * 1 = 3 (left: 3 5 6)",
          "5 * 1 = 5 (left: 3 5 6)",
          "6 * 1 = 6 (left: 3 5 6)",
          "5 / 1 = 5 (left: 3 5 6)",
          "6 / 1 = 6 (left: 3 5 6)",
          "3 + 5 = 8 (left: 1 6 8)",
          "5 - 3 = 2 (left: 1 2 6)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 5 = 15 (left: 1 6 15)",
          "5 * 3 = 15 (left: 1 6 15)",
          "5 / 3 = 1.66667 (left: 1 1.66667 6)",
          "6 + 5 = 11 (left: 1 3 11)",
          "5 - 6 = -1 (left: -1 1 3)",
          "6 - 5 = 1 (left: 1 1 3)",
          "5 * 6 = 30 (left: 1 3 30)",
          "6 * 5 = 30 (left: 1 3 30)",
          "6 / 5 = 1.2 (left: 1 1.2 3)",
          "3 + 6 = 9 (left: 1 5 9)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 6 = 18 (left: 1 5 18)",
          "6 * 3 = 18 (left: 1 5 18)",
          "6 / 3 = 2 (left: 1 2 5)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_2 follows 0_1",
      "timestamp": "2025-05-29T22:45:48.025597",
      "event_type": "validation",
      "details": {
        "popped_node": "0_1",
        "current_node": "0_2",
        "expected_index": 2,
        "actual_index": 2
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "node_id 0_2 matches thought position.",
      "timestamp": "2025-05-29T22:45:48.025627",
      "event_type": "validation",
      "details": {
        "node_id": "0_2",
        "state": "5 - 1 = 4 (left: 3 4 6)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 5 6)",
          "3 - 1 = 2 (left: 2 5 6)",
          "5 - 1 = 4 (left: 3 4 6)",
          "6 - 1 = 5 (left: 3 5 5)",
          "1 * 3 = 3 (left: 3 5 6)",
          "3 * 1 = 3 (left: 3 5 6)",
          "5 * 1 = 5 (left: 3 5 6)",
          "6 * 1 = 6 (left: 3 5 6)",
          "5 / 1 = 5 (left: 3 5 6)",
          "6 / 1 = 6 (left: 3 5 6)",
          "3 + 5 = 8 (left: 1 6 8)",
          "5 - 3 = 2 (left: 1 2 6)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 5 = 15 (left: 1 6 15)",
          "5 * 3 = 15 (left: 1 6 15)",
          "5 / 3 = 1.66667 (left: 1 1.66667 6)",
          "6 + 5 = 11 (left: 1 3 11)",
          "5 - 6 = -1 (left: -1 1 3)",
          "6 - 5 = 1 (left: 1 1 3)",
          "5 * 6 = 30 (left: 1 3 30)",
          "6 * 5 = 30 (left: 1 3 30)",
          "6 / 5 = 1.2 (left: 1 1.2 3)",
          "3 + 6 = 9 (left: 1 5 9)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 6 = 18 (left: 1 5 18)",
          "6 * 3 = 18 (left: 1 5 18)",
          "6 / 3 = 2 (left: 1 2 5)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-29T22:45:56.392337",
      "event_type": "validation",
      "details": {
        "expected_state": "5 - 1 = 4 (left: 3 4 6)",
        "actual_state": "5 - 1 = 4 (left: 3 4 6)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:46:07.037139",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_0",
      "result": "PASS",
      "reason": "node_id 0_2_0 matches thought position.",
      "timestamp": "2025-05-29T22:46:07.037199",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_0",
        "state": "3 + 4 = 7 (left: 6 7)",
        "thoughts": [
          "3 + 4 = 7 (left: 6 7)",
          "4 + 6 = 10 (left: 3 10)",
          "6 - 4 = 2 (left: 2 3)",
          "4 * 3 = 12 (left: 6 12)",
          "6 / 3 = 2 (left: 2 4)",
          "3 * 6 = 18 (left: 4 18)",
          "4 - 3 = 1 (left: 1 6)",
          "6 - 3 = 3 (left: 3 4)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:46:13.881300",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_1",
      "result": "PASS",
      "reason": "node_id 0_2_1 matches thought position.",
      "timestamp": "2025-05-29T22:46:13.881356",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_1",
        "state": "4 + 6 = 10 (left: 3 10)",
        "thoughts": [
          "3 + 4 = 7 (left: 6 7)",
          "4 + 6 = 10 (left: 3 10)",
          "6 - 4 = 2 (left: 2 3)",
          "4 * 3 = 12 (left: 6 12)",
          "6 / 3 = 2 (left: 2 4)",
          "3 * 6 = 18 (left: 4 18)",
          "4 - 3 = 1 (left: 1 6)",
          "6 - 3 = 3 (left: 3 4)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:46:20.867913",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_2",
      "result": "PASS",
      "reason": "node_id 0_2_2 matches thought position.",
      "timestamp": "2025-05-29T22:46:20.867989",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_2",
        "state": "6 - 4 = 2 (left: 2 3)",
        "thoughts": [
          "3 + 4 = 7 (left: 6 7)",
          "4 + 6 = 10 (left: 3 10)",
          "6 - 4 = 2 (left: 2 3)",
          "4 * 3 = 12 (left: 6 12)",
          "6 / 3 = 2 (left: 2 4)",
          "3 * 6 = 18 (left: 4 18)",
          "4 - 3 = 1 (left: 1 6)",
          "6 - 3 = 3 (left: 3 4)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:46:28.174045",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_3",
      "result": "PASS",
      "reason": "node_id 0_2_3 matches thought position.",
      "timestamp": "2025-05-29T22:46:28.174102",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_3",
        "state": "4 * 3 = 12 (left: 6 12)",
        "thoughts": [
          "3 + 4 = 7 (left: 6 7)",
          "4 + 6 = 10 (left: 3 10)",
          "6 - 4 = 2 (left: 2 3)",
          "4 * 3 = 12 (left: 6 12)",
          "6 / 3 = 2 (left: 2 4)",
          "3 * 6 = 18 (left: 4 18)",
          "4 - 3 = 1 (left: 1 6)",
          "6 - 3 = 3 (left: 3 4)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:46:36.621628",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_4",
      "result": "PASS",
      "reason": "node_id 0_2_4 matches thought position.",
      "timestamp": "2025-05-29T22:46:36.621693",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_4",
        "state": "6 / 3 = 2 (left: 2 4)",
        "thoughts": [
          "3 + 4 = 7 (left: 6 7)",
          "4 + 6 = 10 (left: 3 10)",
          "6 - 4 = 2 (left: 2 3)",
          "4 * 3 = 12 (left: 6 12)",
          "6 / 3 = 2 (left: 2 4)",
          "3 * 6 = 18 (left: 4 18)",
          "4 - 3 = 1 (left: 1 6)",
          "6 - 3 = 3 (left: 3 4)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_5",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-29T22:46:43.645337",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_5",
      "result": "PASS",
      "reason": "node_id 0_2_5 matches thought position.",
      "timestamp": "2025-05-29T22:46:43.645403",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_5",
        "state": "3 * 6 = 18 (left: 4 18)",
        "thoughts": [
          "3 + 4 = 7 (left: 6 7)",
          "4 + 6 = 10 (left: 3 10)",
          "6 - 4 = 2 (left: 2 3)",
          "4 * 3 = 12 (left: 6 12)",
          "6 / 3 = 2 (left: 2 4)",
          "3 * 6 = 18 (left: 4 18)",
          "4 - 3 = 1 (left: 1 6)",
          "6 - 3 = 3 (left: 3 4)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:46:52.067514",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_6",
      "result": "PASS",
      "reason": "node_id 0_2_6 matches thought position.",
      "timestamp": "2025-05-29T22:46:52.067573",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_6",
        "state": "4 - 3 = 1 (left: 1 6)",
        "thoughts": [
          "3 + 4 = 7 (left: 6 7)",
          "4 + 6 = 10 (left: 3 10)",
          "6 - 4 = 2 (left: 2 3)",
          "4 * 3 = 12 (left: 6 12)",
          "6 / 3 = 2 (left: 2 4)",
          "3 * 6 = 18 (left: 4 18)",
          "4 - 3 = 1 (left: 1 6)",
          "6 - 3 = 3 (left: 3 4)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_7",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:47:00.192247",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_7",
      "result": "PASS",
      "reason": "node_id 0_2_7 matches thought position.",
      "timestamp": "2025-05-29T22:47:00.192310",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_7",
        "state": "6 - 3 = 3 (left: 3 4)",
        "thoughts": [
          "3 + 4 = 7 (left: 6 7)",
          "4 + 6 = 10 (left: 3 10)",
          "6 - 4 = 2 (left: 2 3)",
          "4 * 3 = 12 (left: 6 12)",
          "6 / 3 = 2 (left: 2 4)",
          "3 * 6 = 18 (left: 4 18)",
          "4 - 3 = 1 (left: 1 6)",
          "6 - 3 = 3 (left: 3 4)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_2; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-29T22:47:02.489338",
      "event_type": "validation",
      "details": {
        "popped_node": "0_2",
        "expected_popped": "0_2",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_2",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "All 8 children explored - valid backtrack",
      "timestamp": "2025-05-29T22:47:02.489364",
      "event_type": "validation",
      "details": {
        "total_thoughts": 8,
        "evaluated_children": 8
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_3 follows 0_2",
      "timestamp": "2025-05-29T22:47:13.969215",
      "event_type": "validation",
      "details": {
        "popped_node": "0_2",
        "current_node": "0_3",
        "expected_index": 3,
        "actual_index": 3
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "Value 2.001 meets threshold 3.0",
      "timestamp": "2025-05-29T22:47:13.969250",
      "event_type": "validation",
      "details": {
        "value": 2.001,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "node_id 0_3 matches thought position.",
      "timestamp": "2025-05-29T22:47:13.969286",
      "event_type": "validation",
      "details": {
        "node_id": "0_3",
        "state": "6 - 1 = 5 (left: 3 5 5)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 5 6)",
          "3 - 1 = 2 (left: 2 5 6)",
          "5 - 1 = 4 (left: 3 4 6)",
          "6 - 1 = 5 (left: 3 5 5)",
          "1 * 3 = 3 (left: 3 5 6)",
          "3 * 1 = 3 (left: 3 5 6)",
          "5 * 1 = 5 (left: 3 5 6)",
          "6 * 1 = 6 (left: 3 5 6)",
          "5 / 1 = 5 (left: 3 5 6)",
          "6 / 1 = 6 (left: 3 5 6)",
          "3 + 5 = 8 (left: 1 6 8)",
          "5 - 3 = 2 (left: 1 2 6)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 5 = 15 (left: 1 6 15)",
          "5 * 3 = 15 (left: 1 6 15)",
          "5 / 3 = 1.66667 (left: 1 1.66667 6)",
          "6 + 5 = 11 (left: 1 3 11)",
          "5 - 6 = -1 (left: -1 1 3)",
          "6 - 5 = 1 (left: 1 1 3)",
          "5 * 6 = 30 (left: 1 3 30)",
          "6 * 5 = 30 (left: 1 3 30)",
          "6 / 5 = 1.2 (left: 1 1.2 3)",
          "3 + 6 = 9 (left: 1 5 9)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 6 = 18 (left: 1 5 18)",
          "6 * 3 = 18 (left: 1 5 18)",
          "6 / 3 = 2 (left: 1 2 5)"
        ]
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-29T22:47:22.688111",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "State validation passed: Last thought '1 * 3 = 3 (left: 3 5 6)' found in parent's thoughts",
      "timestamp": "2025-05-29T22:47:22.688156",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '1 * 3 = 3 (left: 3 5 6)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "1 + 3 = 4 (left: 4 5 6)",
          "3 - 1 = 2 (left: 2 5 6)",
          "5 - 1 = 4 (left: 3 4 6)",
          "6 - 1 = 5 (left: 3 5 5)",
          "1 * 3 = 3 (left: 3 5 6)",
          "3 * 1 = 3 (left: 3 5 6)",
          "5 * 1 = 5 (left: 3 5 6)",
          "6 * 1 = 6 (left: 3 5 6)",
          "5 / 1 = 5 (left: 3 5 6)",
          "6 / 1 = 6 (left: 3 5 6)",
          "3 + 5 = 8 (left: 1 6 8)",
          "5 - 3 = 2 (left: 1 2 6)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 5 = 15 (left: 1 6 15)",
          "5 * 3 = 15 (left: 1 6 15)",
          "5 / 3 = 1.66667 (left: 1 1.66667 6)",
          "6 + 5 = 11 (left: 1 3 11)",
          "5 - 6 = -1 (left: -1 1 3)",
          "6 - 5 = 1 (left: 1 1 3)",
          "5 * 6 = 30 (left: 1 3 30)",
          "6 * 5 = 30 (left: 1 3 30)",
          "6 / 5 = 1.2 (left: 1 1.2 3)",
          "3 + 6 = 9 (left: 1 5 9)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 6 = 18 (left: 1 5 18)",
          "6 * 3 = 18 (left: 1 5 18)",
          "6 / 3 = 2 (left: 1 2 5)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "node_id 0_4 matches thought position.",
      "timestamp": "2025-05-29T22:47:22.688190",
      "event_type": "validation",
      "details": {
        "node_id": "0_4",
        "state": "1 * 3 = 3 (left: 3 5 6)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 5 6)",
          "3 - 1 = 2 (left: 2 5 6)",
          "5 - 1 = 4 (left: 3 4 6)",
          "6 - 1 = 5 (left: 3 5 5)",
          "1 * 3 = 3 (left: 3 5 6)",
          "3 * 1 = 3 (left: 3 5 6)",
          "5 * 1 = 5 (left: 3 5 6)",
          "6 * 1 = 6 (left: 3 5 6)",
          "5 / 1 = 5 (left: 3 5 6)",
          "6 / 1 = 6 (left: 3 5 6)",
          "3 + 5 = 8 (left: 1 6 8)",
          "5 - 3 = 2 (left: 1 2 6)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 5 = 15 (left: 1 6 15)",
          "5 * 3 = 15 (left: 1 6 15)",
          "5 / 3 = 1.66667 (left: 1 1.66667 6)",
          "6 + 5 = 11 (left: 1 3 11)",
          "5 - 6 = -1 (left: -1 1 3)",
          "6 - 5 = 1 (left: 1 1 3)",
          "5 * 6 = 30 (left: 1 3 30)",
          "6 * 5 = 30 (left: 1 3 30)",
          "6 / 5 = 1.2 (left: 1 1.2 3)",
          "3 + 6 = 9 (left: 1 5 9)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 6 = 18 (left: 1 5 18)",
          "6 * 3 = 18 (left: 1 5 18)",
          "6 / 3 = 2 (left: 1 2 5)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-29T22:47:30.792971",
      "event_type": "validation",
      "details": {
        "expected_state": "1 * 3 = 3 (left: 3 5 6)",
        "actual_state": "1 * 3 = 3 (left: 3 5 6)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:47:39.722267",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_0",
      "result": "PASS",
      "reason": "node_id 0_4_0 matches thought position.",
      "timestamp": "2025-05-29T22:47:39.722333",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_0",
        "state": "3 + 5 = 8 (left: 6 8)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 / 3 = 2 (left: 2 5)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:47:49.139491",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_1",
      "result": "PASS",
      "reason": "node_id 0_4_1 matches thought position.",
      "timestamp": "2025-05-29T22:47:49.139547",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_1",
        "state": "5 - 3 = 2 (left: 2 6)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 / 3 = 2 (left: 2 5)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:47:57.892389",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_2",
      "result": "PASS",
      "reason": "node_id 0_4_2 matches thought position.",
      "timestamp": "2025-05-29T22:47:57.892444",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_2",
        "state": "6 - 3 = 3 (left: 3 5)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 / 3 = 2 (left: 2 5)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:48:06.023633",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_3",
      "result": "PASS",
      "reason": "node_id 0_4_3 matches thought position.",
      "timestamp": "2025-05-29T22:48:06.023689",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_3",
        "state": "3 * 5 = 15 (left: 6 15)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 / 3 = 2 (left: 2 5)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:48:13.454900",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_4",
      "result": "PASS",
      "reason": "node_id 0_4_4 matches thought position.",
      "timestamp": "2025-05-29T22:48:13.454979",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_4",
        "state": "5 * 6 = 30 (left: 3 30)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 / 3 = 2 (left: 2 5)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:48:24.665390",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_5",
      "result": "PASS",
      "reason": "node_id 0_4_5 matches thought position.",
      "timestamp": "2025-05-29T22:48:24.665442",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_5",
        "state": "6 / 3 = 2 (left: 2 5)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 / 3 = 2 (left: 2 5)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_4; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-29T22:48:27.724901",
      "event_type": "validation",
      "details": {
        "popped_node": "0_4",
        "expected_popped": "0_4",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_4",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "All 6 children explored - valid backtrack",
      "timestamp": "2025-05-29T22:48:27.724920",
      "event_type": "validation",
      "details": {
        "total_thoughts": 6,
        "evaluated_children": 6
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-29T22:48:37.541001",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "State validation passed: Last thought '3 * 1 = 3 (left: 3 5 6)' found in parent's thoughts",
      "timestamp": "2025-05-29T22:48:37.541050",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '3 * 1 = 3 (left: 3 5 6)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "1 + 3 = 4 (left: 4 5 6)",
          "3 - 1 = 2 (left: 2 5 6)",
          "5 - 1 = 4 (left: 3 4 6)",
          "6 - 1 = 5 (left: 3 5 5)",
          "1 * 3 = 3 (left: 3 5 6)",
          "3 * 1 = 3 (left: 3 5 6)",
          "5 * 1 = 5 (left: 3 5 6)",
          "6 * 1 = 6 (left: 3 5 6)",
          "5 / 1 = 5 (left: 3 5 6)",
          "6 / 1 = 6 (left: 3 5 6)",
          "3 + 5 = 8 (left: 1 6 8)",
          "5 - 3 = 2 (left: 1 2 6)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 5 = 15 (left: 1 6 15)",
          "5 * 3 = 15 (left: 1 6 15)",
          "5 / 3 = 1.66667 (left: 1 1.66667 6)",
          "6 + 5 = 11 (left: 1 3 11)",
          "5 - 6 = -1 (left: -1 1 3)",
          "6 - 5 = 1 (left: 1 1 3)",
          "5 * 6 = 30 (left: 1 3 30)",
          "6 * 5 = 30 (left: 1 3 30)",
          "6 / 5 = 1.2 (left: 1 1.2 3)",
          "3 + 6 = 9 (left: 1 5 9)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 6 = 18 (left: 1 5 18)",
          "6 * 3 = 18 (left: 1 5 18)",
          "6 / 3 = 2 (left: 1 2 5)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_5 follows 0_4",
      "timestamp": "2025-05-29T22:48:37.541087",
      "event_type": "validation",
      "details": {
        "popped_node": "0_4",
        "current_node": "0_5",
        "expected_index": 5,
        "actual_index": 5
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "node_id 0_5 matches thought position.",
      "timestamp": "2025-05-29T22:48:37.541115",
      "event_type": "validation",
      "details": {
        "node_id": "0_5",
        "state": "3 * 1 = 3 (left: 3 5 6)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 5 6)",
          "3 - 1 = 2 (left: 2 5 6)",
          "5 - 1 = 4 (left: 3 4 6)",
          "6 - 1 = 5 (left: 3 5 5)",
          "1 * 3 = 3 (left: 3 5 6)",
          "3 * 1 = 3 (left: 3 5 6)",
          "5 * 1 = 5 (left: 3 5 6)",
          "6 * 1 = 6 (left: 3 5 6)",
          "5 / 1 = 5 (left: 3 5 6)",
          "6 / 1 = 6 (left: 3 5 6)",
          "3 + 5 = 8 (left: 1 6 8)",
          "5 - 3 = 2 (left: 1 2 6)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 5 = 15 (left: 1 6 15)",
          "5 * 3 = 15 (left: 1 6 15)",
          "5 / 3 = 1.66667 (left: 1 1.66667 6)",
          "6 + 5 = 11 (left: 1 3 11)",
          "5 - 6 = -1 (left: -1 1 3)",
          "6 - 5 = 1 (left: 1 1 3)",
          "5 * 6 = 30 (left: 1 3 30)",
          "6 * 5 = 30 (left: 1 3 30)",
          "6 / 5 = 1.2 (left: 1 1.2 3)",
          "3 + 6 = 9 (left: 1 5 9)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 6 = 18 (left: 1 5 18)",
          "6 * 3 = 18 (left: 1 5 18)",
          "6 / 3 = 2 (left: 1 2 5)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-29T22:48:45.428300",
      "event_type": "validation",
      "details": {
        "expected_state": "3 * 1 = 3 (left: 3 5 6)",
        "actual_state": "3 * 1 = 3 (left: 3 5 6)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:48:56.619092",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_0",
      "result": "PASS",
      "reason": "node_id 0_5_0 matches thought position.",
      "timestamp": "2025-05-29T22:48:56.619160",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_0",
        "state": "3 + 5 = 8 (left: 6 8)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 + 3 = 9 (left: 5 9)",
          "5 + 3 = 8 (left: 6 8)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:49:03.963787",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_1",
      "result": "PASS",
      "reason": "node_id 0_5_1 matches thought position.",
      "timestamp": "2025-05-29T22:49:03.963841",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_1",
        "state": "5 - 3 = 2 (left: 2 6)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 + 3 = 9 (left: 5 9)",
          "5 + 3 = 8 (left: 6 8)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:49:11.636434",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_2",
      "result": "PASS",
      "reason": "node_id 0_5_2 matches thought position.",
      "timestamp": "2025-05-29T22:49:11.636489",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_2",
        "state": "6 - 3 = 3 (left: 3 5)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 + 3 = 9 (left: 5 9)",
          "5 + 3 = 8 (left: 6 8)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:49:19.038380",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_3",
      "result": "PASS",
      "reason": "node_id 0_5_3 matches thought position.",
      "timestamp": "2025-05-29T22:49:19.038439",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_3",
        "state": "6 / 3 = 2 (left: 2 5)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 + 3 = 9 (left: 5 9)",
          "5 + 3 = 8 (left: 6 8)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:49:28.284175",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_4",
      "result": "PASS",
      "reason": "node_id 0_5_4 matches thought position.",
      "timestamp": "2025-05-29T22:49:28.284233",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_4",
        "state": "3 * 5 = 15 (left: 6 15)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 + 3 = 9 (left: 5 9)",
          "5 + 3 = 8 (left: 6 8)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:49:35.799316",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_5",
      "result": "PASS",
      "reason": "node_id 0_5_5 matches thought position.",
      "timestamp": "2025-05-29T22:49:35.799372",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_5",
        "state": "5 * 6 = 30 (left: 3 30)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 + 3 = 9 (left: 5 9)",
          "5 + 3 = 8 (left: 6 8)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:49:45.587647",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_6",
      "result": "PASS",
      "reason": "node_id 0_5_6 matches thought position.",
      "timestamp": "2025-05-29T22:49:45.587710",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_6",
        "state": "6 + 3 = 9 (left: 5 9)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 + 3 = 9 (left: 5 9)",
          "5 + 3 = 8 (left: 6 8)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_7",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:49:53.114294",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_7",
      "result": "PASS",
      "reason": "node_id 0_5_7 matches thought position.",
      "timestamp": "2025-05-29T22:49:53.114349",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_7",
        "state": "5 + 3 = 8 (left: 6 8)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 + 3 = 9 (left: 5 9)",
          "5 + 3 = 8 (left: 6 8)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_5; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-29T22:49:55.198180",
      "event_type": "validation",
      "details": {
        "popped_node": "0_5",
        "expected_popped": "0_5",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_5",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "All 8 children explored - valid backtrack",
      "timestamp": "2025-05-29T22:49:55.198201",
      "event_type": "validation",
      "details": {
        "total_thoughts": 8,
        "evaluated_children": 8
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_6",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-29T22:50:05.340886",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_6",
      "result": "PASS",
      "reason": "State validation passed: Last thought '5 * 1 = 5 (left: 3 5 6)' found in parent's thoughts",
      "timestamp": "2025-05-29T22:50:05.340949",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '5 * 1 = 5 (left: 3 5 6)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "1 + 3 = 4 (left: 4 5 6)",
          "3 - 1 = 2 (left: 2 5 6)",
          "5 - 1 = 4 (left: 3 4 6)",
          "6 - 1 = 5 (left: 3 5 5)",
          "1 * 3 = 3 (left: 3 5 6)",
          "3 * 1 = 3 (left: 3 5 6)",
          "5 * 1 = 5 (left: 3 5 6)",
          "6 * 1 = 6 (left: 3 5 6)",
          "5 / 1 = 5 (left: 3 5 6)",
          "6 / 1 = 6 (left: 3 5 6)",
          "3 + 5 = 8 (left: 1 6 8)",
          "5 - 3 = 2 (left: 1 2 6)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 5 = 15 (left: 1 6 15)",
          "5 * 3 = 15 (left: 1 6 15)",
          "5 / 3 = 1.66667 (left: 1 1.66667 6)",
          "6 + 5 = 11 (left: 1 3 11)",
          "5 - 6 = -1 (left: -1 1 3)",
          "6 - 5 = 1 (left: 1 1 3)",
          "5 * 6 = 30 (left: 1 3 30)",
          "6 * 5 = 30 (left: 1 3 30)",
          "6 / 5 = 1.2 (left: 1 1.2 3)",
          "3 + 6 = 9 (left: 1 5 9)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 6 = 18 (left: 1 5 18)",
          "6 * 3 = 18 (left: 1 5 18)",
          "6 / 3 = 2 (left: 1 2 5)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_6",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_6 follows 0_5",
      "timestamp": "2025-05-29T22:50:05.340991",
      "event_type": "validation",
      "details": {
        "popped_node": "0_5",
        "current_node": "0_6",
        "expected_index": 6,
        "actual_index": 6
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_6",
      "result": "PASS",
      "reason": "node_id 0_6 matches thought position.",
      "timestamp": "2025-05-29T22:50:05.341020",
      "event_type": "validation",
      "details": {
        "node_id": "0_6",
        "state": "5 * 1 = 5 (left: 3 5 6)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 5 6)",
          "3 - 1 = 2 (left: 2 5 6)",
          "5 - 1 = 4 (left: 3 4 6)",
          "6 - 1 = 5 (left: 3 5 5)",
          "1 * 3 = 3 (left: 3 5 6)",
          "3 * 1 = 3 (left: 3 5 6)",
          "5 * 1 = 5 (left: 3 5 6)",
          "6 * 1 = 6 (left: 3 5 6)",
          "5 / 1 = 5 (left: 3 5 6)",
          "6 / 1 = 6 (left: 3 5 6)",
          "3 + 5 = 8 (left: 1 6 8)",
          "5 - 3 = 2 (left: 1 2 6)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 5 = 15 (left: 1 6 15)",
          "5 * 3 = 15 (left: 1 6 15)",
          "5 / 3 = 1.66667 (left: 1 1.66667 6)",
          "6 + 5 = 11 (left: 1 3 11)",
          "5 - 6 = -1 (left: -1 1 3)",
          "6 - 5 = 1 (left: 1 1 3)",
          "5 * 6 = 30 (left: 1 3 30)",
          "6 * 5 = 30 (left: 1 3 30)",
          "6 / 5 = 1.2 (left: 1 1.2 3)",
          "3 + 6 = 9 (left: 1 5 9)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 6 = 18 (left: 1 5 18)",
          "6 * 3 = 18 (left: 1 5 18)",
          "6 / 3 = 2 (left: 1 2 5)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_6",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-29T22:50:12.466491",
      "event_type": "validation",
      "details": {
        "expected_state": "5 * 1 = 5 (left: 3 5 6)",
        "actual_state": "5 * 1 = 5 (left: 3 5 6)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_6_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:50:23.081352",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_6_0",
      "result": "PASS",
      "reason": "node_id 0_6_0 matches thought position.",
      "timestamp": "2025-05-29T22:50:23.081407",
      "event_type": "validation",
      "details": {
        "node_id": "0_6_0",
        "state": "3 + 5 = 8 (left: 6 8)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15) ",
          "5 + 6 = 11 (left: 3 11)",
          "6 - 3 = 3 (left: 3 5)",
          "6 - 5 = 1 (left: 1 3)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_6_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:50:32.387344",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_6_1",
      "result": "PASS",
      "reason": "node_id 0_6_1 matches thought position.",
      "timestamp": "2025-05-29T22:50:32.387398",
      "event_type": "validation",
      "details": {
        "node_id": "0_6_1",
        "state": "5 - 3 = 2 (left: 2 6)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15) ",
          "5 + 6 = 11 (left: 3 11)",
          "6 - 3 = 3 (left: 3 5)",
          "6 - 5 = 1 (left: 1 3)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_6_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:50:39.223448",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_6_2",
      "result": "PASS",
      "reason": "node_id 0_6_2 matches thought position.",
      "timestamp": "2025-05-29T22:50:39.223504",
      "event_type": "validation",
      "details": {
        "node_id": "0_6_2",
        "state": "6 / 3 = 2 (left: 2 5)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15) ",
          "5 + 6 = 11 (left: 3 11)",
          "6 - 3 = 3 (left: 3 5)",
          "6 - 5 = 1 (left: 1 3)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_6_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:50:47.581171",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_6_3",
      "result": "PASS",
      "reason": "node_id 0_6_3 matches thought position.",
      "timestamp": "2025-05-29T22:50:47.581231",
      "event_type": "validation",
      "details": {
        "node_id": "0_6_3",
        "state": "3 * 5 = 15 (left: 6 15)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15) ",
          "5 + 6 = 11 (left: 3 11)",
          "6 - 3 = 3 (left: 3 5)",
          "6 - 5 = 1 (left: 1 3)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_6_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:50:57.426098",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_6_4",
      "result": "PASS",
      "reason": "node_id 0_6_4 matches thought position.",
      "timestamp": "2025-05-29T22:50:57.426159",
      "event_type": "validation",
      "details": {
        "node_id": "0_6_4",
        "state": "5 + 6 = 11 (left: 3 11)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15) ",
          "5 + 6 = 11 (left: 3 11)",
          "6 - 3 = 3 (left: 3 5)",
          "6 - 5 = 1 (left: 1 3)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_6_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:51:08.104153",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_6_5",
      "result": "PASS",
      "reason": "node_id 0_6_5 matches thought position.",
      "timestamp": "2025-05-29T22:51:08.104219",
      "event_type": "validation",
      "details": {
        "node_id": "0_6_5",
        "state": "6 - 3 = 3 (left: 3 5)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15) ",
          "5 + 6 = 11 (left: 3 11)",
          "6 - 3 = 3 (left: 3 5)",
          "6 - 5 = 1 (left: 1 3)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_6_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:51:16.819988",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_6_6",
      "result": "PASS",
      "reason": "node_id 0_6_6 matches thought position.",
      "timestamp": "2025-05-29T22:51:16.820053",
      "event_type": "validation",
      "details": {
        "node_id": "0_6_6",
        "state": "6 - 5 = 1 (left: 1 3)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15) ",
          "5 + 6 = 11 (left: 3 11)",
          "6 - 3 = 3 (left: 3 5)",
          "6 - 5 = 1 (left: 1 3)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_6",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_6; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-29T22:51:19.534742",
      "event_type": "validation",
      "details": {
        "popped_node": "0_6",
        "expected_popped": "0_6",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_6",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_6",
      "result": "PASS",
      "reason": "All 7 children explored - valid backtrack",
      "timestamp": "2025-05-29T22:51:19.534762",
      "event_type": "validation",
      "details": {
        "total_thoughts": 7,
        "evaluated_children": 7
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_7",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-29T22:51:28.043992",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_7",
      "result": "PASS",
      "reason": "State validation passed: Last thought '6 * 1 = 6 (left: 3 5 6)' found in parent's thoughts",
      "timestamp": "2025-05-29T22:51:28.044036",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '6 * 1 = 6 (left: 3 5 6)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "1 + 3 = 4 (left: 4 5 6)",
          "3 - 1 = 2 (left: 2 5 6)",
          "5 - 1 = 4 (left: 3 4 6)",
          "6 - 1 = 5 (left: 3 5 5)",
          "1 * 3 = 3 (left: 3 5 6)",
          "3 * 1 = 3 (left: 3 5 6)",
          "5 * 1 = 5 (left: 3 5 6)",
          "6 * 1 = 6 (left: 3 5 6)",
          "5 / 1 = 5 (left: 3 5 6)",
          "6 / 1 = 6 (left: 3 5 6)",
          "3 + 5 = 8 (left: 1 6 8)",
          "5 - 3 = 2 (left: 1 2 6)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 5 = 15 (left: 1 6 15)",
          "5 * 3 = 15 (left: 1 6 15)",
          "5 / 3 = 1.66667 (left: 1 1.66667 6)",
          "6 + 5 = 11 (left: 1 3 11)",
          "5 - 6 = -1 (left: -1 1 3)",
          "6 - 5 = 1 (left: 1 1 3)",
          "5 * 6 = 30 (left: 1 3 30)",
          "6 * 5 = 30 (left: 1 3 30)",
          "6 / 5 = 1.2 (left: 1 1.2 3)",
          "3 + 6 = 9 (left: 1 5 9)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 6 = 18 (left: 1 5 18)",
          "6 * 3 = 18 (left: 1 5 18)",
          "6 / 3 = 2 (left: 1 2 5)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_7",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_7 follows 0_6",
      "timestamp": "2025-05-29T22:51:28.044084",
      "event_type": "validation",
      "details": {
        "popped_node": "0_6",
        "current_node": "0_7",
        "expected_index": 7,
        "actual_index": 7
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_7",
      "result": "PASS",
      "reason": "node_id 0_7 matches thought position.",
      "timestamp": "2025-05-29T22:51:28.044122",
      "event_type": "validation",
      "details": {
        "node_id": "0_7",
        "state": "6 * 1 = 6 (left: 3 5 6)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 5 6)",
          "3 - 1 = 2 (left: 2 5 6)",
          "5 - 1 = 4 (left: 3 4 6)",
          "6 - 1 = 5 (left: 3 5 5)",
          "1 * 3 = 3 (left: 3 5 6)",
          "3 * 1 = 3 (left: 3 5 6)",
          "5 * 1 = 5 (left: 3 5 6)",
          "6 * 1 = 6 (left: 3 5 6)",
          "5 / 1 = 5 (left: 3 5 6)",
          "6 / 1 = 6 (left: 3 5 6)",
          "3 + 5 = 8 (left: 1 6 8)",
          "5 - 3 = 2 (left: 1 2 6)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 5 = 15 (left: 1 6 15)",
          "5 * 3 = 15 (left: 1 6 15)",
          "5 / 3 = 1.66667 (left: 1 1.66667 6)",
          "6 + 5 = 11 (left: 1 3 11)",
          "5 - 6 = -1 (left: -1 1 3)",
          "6 - 5 = 1 (left: 1 1 3)",
          "5 * 6 = 30 (left: 1 3 30)",
          "6 * 5 = 30 (left: 1 3 30)",
          "6 / 5 = 1.2 (left: 1 1.2 3)",
          "3 + 6 = 9 (left: 1 5 9)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 6 = 18 (left: 1 5 18)",
          "6 * 3 = 18 (left: 1 5 18)",
          "6 / 3 = 2 (left: 1 2 5)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_7",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-29T22:51:34.360401",
      "event_type": "validation",
      "details": {
        "expected_state": "6 * 1 = 6 (left: 3 5 6)",
        "actual_state": "6 * 1 = 6 (left: 3 5 6)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_7_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:51:43.890512",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_7_0",
      "result": "PASS",
      "reason": "node_id 0_7_0 matches thought position.",
      "timestamp": "2025-05-29T22:51:43.890566",
      "event_type": "validation",
      "details": {
        "node_id": "0_7_0",
        "state": "3 + 5 = 8 (left: 6 8)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "6 / 3 = 2 (left: 2 5)",
          "5 * 3 = 15 (left: 6 15)",
          "6 + 3 = 9 (left: 5 9)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_7_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:51:50.822336",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_7_1",
      "result": "PASS",
      "reason": "node_id 0_7_1 matches thought position.",
      "timestamp": "2025-05-29T22:51:50.822383",
      "event_type": "validation",
      "details": {
        "node_id": "0_7_1",
        "state": "5 - 3 = 2 (left: 2 6)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "6 / 3 = 2 (left: 2 5)",
          "5 * 3 = 15 (left: 6 15)",
          "6 + 3 = 9 (left: 5 9)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_7_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:51:58.446334",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_7_2",
      "result": "PASS",
      "reason": "node_id 0_7_2 matches thought position.",
      "timestamp": "2025-05-29T22:51:58.446389",
      "event_type": "validation",
      "details": {
        "node_id": "0_7_2",
        "state": "6 - 3 = 3 (left: 3 5)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "6 / 3 = 2 (left: 2 5)",
          "5 * 3 = 15 (left: 6 15)",
          "6 + 3 = 9 (left: 5 9)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_7_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:52:06.893572",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_7_3",
      "result": "PASS",
      "reason": "node_id 0_7_3 matches thought position.",
      "timestamp": "2025-05-29T22:52:06.893635",
      "event_type": "validation",
      "details": {
        "node_id": "0_7_3",
        "state": "6 / 3 = 2 (left: 2 5)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "6 / 3 = 2 (left: 2 5)",
          "5 * 3 = 15 (left: 6 15)",
          "6 + 3 = 9 (left: 5 9)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_7_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:52:14.436676",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_7_4",
      "result": "PASS",
      "reason": "node_id 0_7_4 matches thought position.",
      "timestamp": "2025-05-29T22:52:14.436732",
      "event_type": "validation",
      "details": {
        "node_id": "0_7_4",
        "state": "5 * 3 = 15 (left: 6 15)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "6 / 3 = 2 (left: 2 5)",
          "5 * 3 = 15 (left: 6 15)",
          "6 + 3 = 9 (left: 5 9)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_7_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:52:23.558558",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_7_5",
      "result": "PASS",
      "reason": "node_id 0_7_5 matches thought position.",
      "timestamp": "2025-05-29T22:52:23.558615",
      "event_type": "validation",
      "details": {
        "node_id": "0_7_5",
        "state": "6 + 3 = 9 (left: 5 9)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "6 / 3 = 2 (left: 2 5)",
          "5 * 3 = 15 (left: 6 15)",
          "6 + 3 = 9 (left: 5 9)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_7",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_7; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-29T22:52:26.053295",
      "event_type": "validation",
      "details": {
        "popped_node": "0_7",
        "expected_popped": "0_7",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_7",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_7",
      "result": "PASS",
      "reason": "All 6 children explored - valid backtrack",
      "timestamp": "2025-05-29T22:52:26.053315",
      "event_type": "validation",
      "details": {
        "total_thoughts": 6,
        "evaluated_children": 6
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_8",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-29T22:52:36.177912",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_8",
      "result": "PASS",
      "reason": "State validation passed: Last thought '5 / 1 = 5 (left: 3 5 6)' found in parent's thoughts",
      "timestamp": "2025-05-29T22:52:36.177971",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '5 / 1 = 5 (left: 3 5 6)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "1 + 3 = 4 (left: 4 5 6)",
          "3 - 1 = 2 (left: 2 5 6)",
          "5 - 1 = 4 (left: 3 4 6)",
          "6 - 1 = 5 (left: 3 5 5)",
          "1 * 3 = 3 (left: 3 5 6)",
          "3 * 1 = 3 (left: 3 5 6)",
          "5 * 1 = 5 (left: 3 5 6)",
          "6 * 1 = 6 (left: 3 5 6)",
          "5 / 1 = 5 (left: 3 5 6)",
          "6 / 1 = 6 (left: 3 5 6)",
          "3 + 5 = 8 (left: 1 6 8)",
          "5 - 3 = 2 (left: 1 2 6)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 5 = 15 (left: 1 6 15)",
          "5 * 3 = 15 (left: 1 6 15)",
          "5 / 3 = 1.66667 (left: 1 1.66667 6)",
          "6 + 5 = 11 (left: 1 3 11)",
          "5 - 6 = -1 (left: -1 1 3)",
          "6 - 5 = 1 (left: 1 1 3)",
          "5 * 6 = 30 (left: 1 3 30)",
          "6 * 5 = 30 (left: 1 3 30)",
          "6 / 5 = 1.2 (left: 1 1.2 3)",
          "3 + 6 = 9 (left: 1 5 9)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 6 = 18 (left: 1 5 18)",
          "6 * 3 = 18 (left: 1 5 18)",
          "6 / 3 = 2 (left: 1 2 5)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_8",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_8 follows 0_7",
      "timestamp": "2025-05-29T22:52:36.178020",
      "event_type": "validation",
      "details": {
        "popped_node": "0_7",
        "current_node": "0_8",
        "expected_index": 8,
        "actual_index": 8
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_8",
      "result": "PASS",
      "reason": "node_id 0_8 matches thought position.",
      "timestamp": "2025-05-29T22:52:36.178058",
      "event_type": "validation",
      "details": {
        "node_id": "0_8",
        "state": "5 / 1 = 5 (left: 3 5 6)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 5 6)",
          "3 - 1 = 2 (left: 2 5 6)",
          "5 - 1 = 4 (left: 3 4 6)",
          "6 - 1 = 5 (left: 3 5 5)",
          "1 * 3 = 3 (left: 3 5 6)",
          "3 * 1 = 3 (left: 3 5 6)",
          "5 * 1 = 5 (left: 3 5 6)",
          "6 * 1 = 6 (left: 3 5 6)",
          "5 / 1 = 5 (left: 3 5 6)",
          "6 / 1 = 6 (left: 3 5 6)",
          "3 + 5 = 8 (left: 1 6 8)",
          "5 - 3 = 2 (left: 1 2 6)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 5 = 15 (left: 1 6 15)",
          "5 * 3 = 15 (left: 1 6 15)",
          "5 / 3 = 1.66667 (left: 1 1.66667 6)",
          "6 + 5 = 11 (left: 1 3 11)",
          "5 - 6 = -1 (left: -1 1 3)",
          "6 - 5 = 1 (left: 1 1 3)",
          "5 * 6 = 30 (left: 1 3 30)",
          "6 * 5 = 30 (left: 1 3 30)",
          "6 / 5 = 1.2 (left: 1 1.2 3)",
          "3 + 6 = 9 (left: 1 5 9)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 6 = 18 (left: 1 5 18)",
          "6 * 3 = 18 (left: 1 5 18)",
          "6 / 3 = 2 (left: 1 2 5)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_8",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-29T22:52:42.923512",
      "event_type": "validation",
      "details": {
        "expected_state": "5 / 1 = 5 (left: 3 5 6)",
        "actual_state": "5 / 1 = 5 (left: 3 5 6)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_8_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:52:52.134923",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_8_0",
      "result": "PASS",
      "reason": "node_id 0_8_0 matches thought position.",
      "timestamp": "2025-05-29T22:52:52.135005",
      "event_type": "validation",
      "details": {
        "node_id": "0_8_0",
        "state": "3 + 5 = 8 (left: 6 8)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "3 * 5 = 15 (left: 6 15)",
          "6 / 3 = 2 (left: 2 5)",
          "5 * 3 = 15 (left: 6 15)",
          "6 - 5 = 1 (left: 1 3)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_8_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:52:58.786111",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_8_1",
      "result": "PASS",
      "reason": "node_id 0_8_1 matches thought position.",
      "timestamp": "2025-05-29T22:52:58.786175",
      "event_type": "validation",
      "details": {
        "node_id": "0_8_1",
        "state": "5 - 3 = 2 (left: 2 6)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "3 * 5 = 15 (left: 6 15)",
          "6 / 3 = 2 (left: 2 5)",
          "5 * 3 = 15 (left: 6 15)",
          "6 - 5 = 1 (left: 1 3)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_8_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:53:06.270483",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_8_2",
      "result": "PASS",
      "reason": "node_id 0_8_2 matches thought position.",
      "timestamp": "2025-05-29T22:53:06.270543",
      "event_type": "validation",
      "details": {
        "node_id": "0_8_2",
        "state": "6 - 3 = 3 (left: 3 5)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "3 * 5 = 15 (left: 6 15)",
          "6 / 3 = 2 (left: 2 5)",
          "5 * 3 = 15 (left: 6 15)",
          "6 - 5 = 1 (left: 1 3)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_8_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:53:15.782953",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_8_3",
      "result": "PASS",
      "reason": "node_id 0_8_3 matches thought position.",
      "timestamp": "2025-05-29T22:53:15.783007",
      "event_type": "validation",
      "details": {
        "node_id": "0_8_3",
        "state": "3 * 5 = 15 (left: 6 15)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "3 * 5 = 15 (left: 6 15)",
          "6 / 3 = 2 (left: 2 5)",
          "5 * 3 = 15 (left: 6 15)",
          "6 - 5 = 1 (left: 1 3)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_8_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:53:24.949665",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_8_4",
      "result": "PASS",
      "reason": "node_id 0_8_4 matches thought position.",
      "timestamp": "2025-05-29T22:53:24.949723",
      "event_type": "validation",
      "details": {
        "node_id": "0_8_4",
        "state": "6 / 3 = 2 (left: 2 5)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "3 * 5 = 15 (left: 6 15)",
          "6 / 3 = 2 (left: 2 5)",
          "5 * 3 = 15 (left: 6 15)",
          "6 - 5 = 1 (left: 1 3)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_8_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:53:33.148661",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_8_5",
      "result": "PASS",
      "reason": "node_id 0_8_5 matches thought position.",
      "timestamp": "2025-05-29T22:53:33.148716",
      "event_type": "validation",
      "details": {
        "node_id": "0_8_5",
        "state": "5 * 3 = 15 (left: 6 15)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "3 * 5 = 15 (left: 6 15)",
          "6 / 3 = 2 (left: 2 5)",
          "5 * 3 = 15 (left: 6 15)",
          "6 - 5 = 1 (left: 1 3)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_8_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:53:40.626321",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_8_6",
      "result": "PASS",
      "reason": "node_id 0_8_6 matches thought position.",
      "timestamp": "2025-05-29T22:53:40.626378",
      "event_type": "validation",
      "details": {
        "node_id": "0_8_6",
        "state": "6 - 5 = 1 (left: 1 3)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 - 3 = 2 (left: 2 6)",
          "6 - 3 = 3 (left: 3 5)",
          "3 * 5 = 15 (left: 6 15)",
          "6 / 3 = 2 (left: 2 5)",
          "5 * 3 = 15 (left: 6 15)",
          "6 - 5 = 1 (left: 1 3)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_8",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_8; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-29T22:53:43.725071",
      "event_type": "validation",
      "details": {
        "popped_node": "0_8",
        "expected_popped": "0_8",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_8",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_8",
      "result": "PASS",
      "reason": "All 7 children explored - valid backtrack",
      "timestamp": "2025-05-29T22:53:43.725092",
      "event_type": "validation",
      "details": {
        "total_thoughts": 7,
        "evaluated_children": 7
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_9",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-29T22:53:52.556442",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_9",
      "result": "PASS",
      "reason": "State validation passed: Last thought '6 / 1 = 6 (left: 3 5 6)' found in parent's thoughts",
      "timestamp": "2025-05-29T22:53:52.556487",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '6 / 1 = 6 (left: 3 5 6)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "1 + 3 = 4 (left: 4 5 6)",
          "3 - 1 = 2 (left: 2 5 6)",
          "5 - 1 = 4 (left: 3 4 6)",
          "6 - 1 = 5 (left: 3 5 5)",
          "1 * 3 = 3 (left: 3 5 6)",
          "3 * 1 = 3 (left: 3 5 6)",
          "5 * 1 = 5 (left: 3 5 6)",
          "6 * 1 = 6 (left: 3 5 6)",
          "5 / 1 = 5 (left: 3 5 6)",
          "6 / 1 = 6 (left: 3 5 6)",
          "3 + 5 = 8 (left: 1 6 8)",
          "5 - 3 = 2 (left: 1 2 6)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 5 = 15 (left: 1 6 15)",
          "5 * 3 = 15 (left: 1 6 15)",
          "5 / 3 = 1.66667 (left: 1 1.66667 6)",
          "6 + 5 = 11 (left: 1 3 11)",
          "5 - 6 = -1 (left: -1 1 3)",
          "6 - 5 = 1 (left: 1 1 3)",
          "5 * 6 = 30 (left: 1 3 30)",
          "6 * 5 = 30 (left: 1 3 30)",
          "6 / 5 = 1.2 (left: 1 1.2 3)",
          "3 + 6 = 9 (left: 1 5 9)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 6 = 18 (left: 1 5 18)",
          "6 * 3 = 18 (left: 1 5 18)",
          "6 / 3 = 2 (left: 1 2 5)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_9",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_9 follows 0_8",
      "timestamp": "2025-05-29T22:53:52.556523",
      "event_type": "validation",
      "details": {
        "popped_node": "0_8",
        "current_node": "0_9",
        "expected_index": 9,
        "actual_index": 9
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_9",
      "result": "PASS",
      "reason": "node_id 0_9 matches thought position.",
      "timestamp": "2025-05-29T22:53:52.556552",
      "event_type": "validation",
      "details": {
        "node_id": "0_9",
        "state": "6 / 1 = 6 (left: 3 5 6)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 5 6)",
          "3 - 1 = 2 (left: 2 5 6)",
          "5 - 1 = 4 (left: 3 4 6)",
          "6 - 1 = 5 (left: 3 5 5)",
          "1 * 3 = 3 (left: 3 5 6)",
          "3 * 1 = 3 (left: 3 5 6)",
          "5 * 1 = 5 (left: 3 5 6)",
          "6 * 1 = 6 (left: 3 5 6)",
          "5 / 1 = 5 (left: 3 5 6)",
          "6 / 1 = 6 (left: 3 5 6)",
          "3 + 5 = 8 (left: 1 6 8)",
          "5 - 3 = 2 (left: 1 2 6)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 5 = 15 (left: 1 6 15)",
          "5 * 3 = 15 (left: 1 6 15)",
          "5 / 3 = 1.66667 (left: 1 1.66667 6)",
          "6 + 5 = 11 (left: 1 3 11)",
          "5 - 6 = -1 (left: -1 1 3)",
          "6 - 5 = 1 (left: 1 1 3)",
          "5 * 6 = 30 (left: 1 3 30)",
          "6 * 5 = 30 (left: 1 3 30)",
          "6 / 5 = 1.2 (left: 1 1.2 3)",
          "3 + 6 = 9 (left: 1 5 9)",
          "6 - 3 = 3 (left: 1 3 5)",
          "3 * 6 = 18 (left: 1 5 18)",
          "6 * 3 = 18 (left: 1 5 18)",
          "6 / 3 = 2 (left: 1 2 5)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_9",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-29T22:54:01.193612",
      "event_type": "validation",
      "details": {
        "expected_state": "6 / 1 = 6 (left: 3 5 6)",
        "actual_state": "6 / 1 = 6 (left: 3 5 6)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_9_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:54:10.487245",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_9_0",
      "result": "PASS",
      "reason": "node_id 0_9_0 matches thought position.",
      "timestamp": "2025-05-29T22:54:10.487298",
      "event_type": "validation",
      "details": {
        "node_id": "0_9_0",
        "state": "3 + 5 = 8 (left: 6 8)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 + 6 = 11 (left: 3 11)",
          "6 - 3 = 3 (left: 3 5)",
          "5 - 3 = 2 (left: 2 6)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 * 3 = 18 (left: 5 18)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_9_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:54:18.436592",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_9_1",
      "result": "PASS",
      "reason": "node_id 0_9_1 matches thought position.",
      "timestamp": "2025-05-29T22:54:18.436655",
      "event_type": "validation",
      "details": {
        "node_id": "0_9_1",
        "state": "5 + 6 = 11 (left: 3 11)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 + 6 = 11 (left: 3 11)",
          "6 - 3 = 3 (left: 3 5)",
          "5 - 3 = 2 (left: 2 6)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 * 3 = 18 (left: 5 18)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_9_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:54:25.631137",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_9_2",
      "result": "PASS",
      "reason": "node_id 0_9_2 matches thought position.",
      "timestamp": "2025-05-29T22:54:25.631201",
      "event_type": "validation",
      "details": {
        "node_id": "0_9_2",
        "state": "6 - 3 = 3 (left: 3 5)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 + 6 = 11 (left: 3 11)",
          "6 - 3 = 3 (left: 3 5)",
          "5 - 3 = 2 (left: 2 6)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 * 3 = 18 (left: 5 18)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_9_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:54:57.577691",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_9_3",
      "result": "PASS",
      "reason": "node_id 0_9_3 matches thought position.",
      "timestamp": "2025-05-29T22:54:57.577751",
      "event_type": "validation",
      "details": {
        "node_id": "0_9_3",
        "state": "5 - 3 = 2 (left: 2 6)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 + 6 = 11 (left: 3 11)",
          "6 - 3 = 3 (left: 3 5)",
          "5 - 3 = 2 (left: 2 6)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 * 3 = 18 (left: 5 18)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_9_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:55:04.826492",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_9_4",
      "result": "PASS",
      "reason": "node_id 0_9_4 matches thought position.",
      "timestamp": "2025-05-29T22:55:04.826558",
      "event_type": "validation",
      "details": {
        "node_id": "0_9_4",
        "state": "6 / 3 = 2 (left: 2 5)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 + 6 = 11 (left: 3 11)",
          "6 - 3 = 3 (left: 3 5)",
          "5 - 3 = 2 (left: 2 6)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 * 3 = 18 (left: 5 18)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_9_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:55:13.513338",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_9_5",
      "result": "PASS",
      "reason": "node_id 0_9_5 matches thought position.",
      "timestamp": "2025-05-29T22:55:13.513404",
      "event_type": "validation",
      "details": {
        "node_id": "0_9_5",
        "state": "3 * 5 = 15 (left: 6 15)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 + 6 = 11 (left: 3 11)",
          "6 - 3 = 3 (left: 3 5)",
          "5 - 3 = 2 (left: 2 6)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 * 3 = 18 (left: 5 18)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_9_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:55:21.874378",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_9_6",
      "result": "PASS",
      "reason": "node_id 0_9_6 matches thought position.",
      "timestamp": "2025-05-29T22:55:21.874434",
      "event_type": "validation",
      "details": {
        "node_id": "0_9_6",
        "state": "5 * 6 = 30 (left: 3 30)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 + 6 = 11 (left: 3 11)",
          "6 - 3 = 3 (left: 3 5)",
          "5 - 3 = 2 (left: 2 6)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 * 3 = 18 (left: 5 18)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_9_7",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T22:55:29.753607",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_9_7",
      "result": "PASS",
      "reason": "node_id 0_9_7 matches thought position.",
      "timestamp": "2025-05-29T22:55:29.753670",
      "event_type": "validation",
      "details": {
        "node_id": "0_9_7",
        "state": "6 * 3 = 18 (left: 5 18)",
        "thoughts": [
          "3 + 5 = 8 (left: 6 8)",
          "5 + 6 = 11 (left: 3 11)",
          "6 - 3 = 3 (left: 3 5)",
          "5 - 3 = 2 (left: 2 6)",
          "6 / 3 = 2 (left: 2 5)",
          "3 * 5 = 15 (left: 6 15)",
          "5 * 6 = 30 (left: 3 30)",
          "6 * 3 = 18 (left: 5 18)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_9",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_9; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-29T22:55:33.250422",
      "event_type": "validation",
      "details": {
        "popped_node": "0_9",
        "expected_popped": "0_9",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_9",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_9",
      "result": "PASS",
      "reason": "All 8 children explored - valid backtrack",
      "timestamp": "2025-05-29T22:55:33.250443",
      "event_type": "validation",
      "details": {
        "total_thoughts": 8,
        "evaluated_children": 8
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
      "timestamp": "2025-05-29T22:55:35.601413",
      "event_type": "validation",
      "details": {
        "popped_node": "0",
        "expected_popped": "0",
        "backtrack_to": "None",
        "expected_parent": "None",
        "validation_details": [
          "Correctly popped expected node 0",
          "Correctly backtracking to parent 'None'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0",
      "result": "FAIL",
      "reason": "Only 10 of 27 children explored",
      "timestamp": "2025-05-29T22:55:35.601437",
      "event_type": "validation",
      "details": {
        "total_thoughts": 27,
        "evaluated_children": 10
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132475",
      "event_type": "validation",
      "details": {
        "state": "1 + 3 = 4 (left: 4 5 6)",
        "thought": "1 + 3 = 4 (left: 4 5 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132494",
      "event_type": "validation",
      "details": {
        "state": "3 - 1 = 2 (left: 2 5 6)",
        "thought": "3 - 1 = 2 (left: 2 5 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132500",
      "event_type": "validation",
      "details": {
        "state": "5 - 1 = 4 (left: 3 4 6)",
        "thought": "5 - 1 = 4 (left: 3 4 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132505",
      "event_type": "validation",
      "details": {
        "state": "6 - 1 = 5 (left: 3 5 5)",
        "thought": "6 - 1 = 5 (left: 3 5 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132510",
      "event_type": "validation",
      "details": {
        "state": "1 * 3 = 3 (left: 3 5 6)",
        "thought": "1 * 3 = 3 (left: 3 5 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132514",
      "event_type": "validation",
      "details": {
        "state": "3 * 1 = 3 (left: 3 5 6)",
        "thought": "3 * 1 = 3 (left: 3 5 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132519",
      "event_type": "validation",
      "details": {
        "state": "5 * 1 = 5 (left: 3 5 6)",
        "thought": "5 * 1 = 5 (left: 3 5 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_7",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132524",
      "event_type": "validation",
      "details": {
        "state": "6 * 1 = 6 (left: 3 5 6)",
        "thought": "6 * 1 = 6 (left: 3 5 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_8",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132529",
      "event_type": "validation",
      "details": {
        "state": "5 / 1 = 5 (left: 3 5 6)",
        "thought": "5 / 1 = 5 (left: 3 5 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_9",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132533",
      "event_type": "validation",
      "details": {
        "state": "6 / 1 = 6 (left: 3 5 6)",
        "thought": "6 / 1 = 6 (left: 3 5 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132565",
      "event_type": "validation",
      "details": {
        "state": "4 + 5 = 9 (left: 6 9)",
        "thought": "4 + 5 = 9 (left: 6 9)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132573",
      "event_type": "validation",
      "details": {
        "state": "5 + 6 = 11 (left: 4 11)",
        "thought": "5 + 6 = 11 (left: 4 11)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132582",
      "event_type": "validation",
      "details": {
        "state": "6 + 4 = 10 (left: 5 10)",
        "thought": "6 + 4 = 10 (left: 5 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132590",
      "event_type": "validation",
      "details": {
        "state": "5 - 4 = 1 (left: 1 6)",
        "thought": "5 - 4 = 1 (left: 1 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132596",
      "event_type": "validation",
      "details": {
        "state": "6 - 4 = 2 (left: 2 5)",
        "thought": "6 - 4 = 2 (left: 2 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132602",
      "event_type": "validation",
      "details": {
        "state": "6 - 5 = 1 (left: 1 4)",
        "thought": "6 - 5 = 1 (left: 1 4)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132606",
      "event_type": "validation",
      "details": {
        "state": "4 * 5 = 20 (left: 6 20)",
        "thought": "4 * 5 = 20 (left: 6 20)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_7",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132611",
      "event_type": "validation",
      "details": {
        "state": "5 * 6 = 30 (left: 4 30)",
        "thought": "5 * 6 = 30 (left: 4 30)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_8",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132616",
      "event_type": "validation",
      "details": {
        "state": "6 / 4 = 1.5 (left: 1.5 5)",
        "thought": "6 / 4 = 1.5 (left: 1.5 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_9",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132621",
      "event_type": "validation",
      "details": {
        "state": "5 / 4 = 1.25 (left: 1.25 6)",
        "thought": "5 / 4 = 1.25 (left: 1.25 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132673",
      "event_type": "validation",
      "details": {
        "state": "2 + 5 = 7 (left: 6 7)",
        "thought": "2 + 5 = 7 (left: 6 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132679",
      "event_type": "validation",
      "details": {
        "state": "5 - 2 = 3 (left: 3 6)",
        "thought": "5 - 2 = 3 (left: 3 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132684",
      "event_type": "validation",
      "details": {
        "state": "6 - 2 = 4 (left: 4 5)",
        "thought": "6 - 2 = 4 (left: 4 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132689",
      "event_type": "validation",
      "details": {
        "state": "2 * 5 = 10 (left: 6 10)",
        "thought": "2 * 5 = 10 (left: 6 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132694",
      "event_type": "validation",
      "details": {
        "state": "5 / 2 = 2.5 (left: 2.5 6)",
        "thought": "5 / 2 = 2.5 (left: 2.5 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132699",
      "event_type": "validation",
      "details": {
        "state": "6 / 2 = 3 (left: 3 5)",
        "thought": "6 / 2 = 3 (left: 3 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132704",
      "event_type": "validation",
      "details": {
        "state": "6 - 5 = 1 (left: 1 2)",
        "thought": "6 - 5 = 1 (left: 1 2)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_7",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132709",
      "event_type": "validation",
      "details": {
        "state": "2 * 6 = 12 (left: 5 12)",
        "thought": "2 * 6 = 12 (left: 5 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_8",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132714",
      "event_type": "validation",
      "details": {
        "state": "5 * 2 = 10 (left: 6 10)",
        "thought": "5 * 2 = 10 (left: 6 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132758",
      "event_type": "validation",
      "details": {
        "state": "3 + 4 = 7 (left: 6 7)",
        "thought": "3 + 4 = 7 (left: 6 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132764",
      "event_type": "validation",
      "details": {
        "state": "4 + 6 = 10 (left: 3 10)",
        "thought": "4 + 6 = 10 (left: 3 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132769",
      "event_type": "validation",
      "details": {
        "state": "6 - 4 = 2 (left: 2 3)",
        "thought": "6 - 4 = 2 (left: 2 3)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132774",
      "event_type": "validation",
      "details": {
        "state": "4 * 3 = 12 (left: 6 12)",
        "thought": "4 * 3 = 12 (left: 6 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132779",
      "event_type": "validation",
      "details": {
        "state": "6 / 3 = 2 (left: 2 4)",
        "thought": "6 / 3 = 2 (left: 2 4)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132783",
      "event_type": "validation",
      "details": {
        "state": "3 * 6 = 18 (left: 4 18)",
        "thought": "3 * 6 = 18 (left: 4 18)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132788",
      "event_type": "validation",
      "details": {
        "state": "4 - 3 = 1 (left: 1 6)",
        "thought": "4 - 3 = 1 (left: 1 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_7",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132793",
      "event_type": "validation",
      "details": {
        "state": "6 - 3 = 3 (left: 3 4)",
        "thought": "6 - 3 = 3 (left: 3 4)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132832",
      "event_type": "validation",
      "details": {
        "state": "3 + 5 = 8 (left: 6 8)",
        "thought": "3 + 5 = 8 (left: 6 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132837",
      "event_type": "validation",
      "details": {
        "state": "5 - 3 = 2 (left: 2 6)",
        "thought": "5 - 3 = 2 (left: 2 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132842",
      "event_type": "validation",
      "details": {
        "state": "6 - 3 = 3 (left: 3 5)",
        "thought": "6 - 3 = 3 (left: 3 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132847",
      "event_type": "validation",
      "details": {
        "state": "3 * 5 = 15 (left: 6 15)",
        "thought": "3 * 5 = 15 (left: 6 15)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132854",
      "event_type": "validation",
      "details": {
        "state": "5 * 6 = 30 (left: 3 30)",
        "thought": "5 * 6 = 30 (left: 3 30)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132859",
      "event_type": "validation",
      "details": {
        "state": "6 / 3 = 2 (left: 2 5)",
        "thought": "6 / 3 = 2 (left: 2 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132893",
      "event_type": "validation",
      "details": {
        "state": "3 + 5 = 8 (left: 6 8)",
        "thought": "3 + 5 = 8 (left: 6 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132898",
      "event_type": "validation",
      "details": {
        "state": "5 - 3 = 2 (left: 2 6)",
        "thought": "5 - 3 = 2 (left: 2 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132903",
      "event_type": "validation",
      "details": {
        "state": "6 - 3 = 3 (left: 3 5)",
        "thought": "6 - 3 = 3 (left: 3 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132908",
      "event_type": "validation",
      "details": {
        "state": "6 / 3 = 2 (left: 2 5)",
        "thought": "6 / 3 = 2 (left: 2 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132913",
      "event_type": "validation",
      "details": {
        "state": "3 * 5 = 15 (left: 6 15)",
        "thought": "3 * 5 = 15 (left: 6 15)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132918",
      "event_type": "validation",
      "details": {
        "state": "5 * 6 = 30 (left: 3 30)",
        "thought": "5 * 6 = 30 (left: 3 30)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132923",
      "event_type": "validation",
      "details": {
        "state": "6 + 3 = 9 (left: 5 9)",
        "thought": "6 + 3 = 9 (left: 5 9)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_7",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132945",
      "event_type": "validation",
      "details": {
        "state": "5 + 3 = 8 (left: 6 8)",
        "thought": "5 + 3 = 8 (left: 6 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_6_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132984",
      "event_type": "validation",
      "details": {
        "state": "3 + 5 = 8 (left: 6 8)",
        "thought": "3 + 5 = 8 (left: 6 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_6_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132990",
      "event_type": "validation",
      "details": {
        "state": "5 - 3 = 2 (left: 2 6)",
        "thought": "5 - 3 = 2 (left: 2 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_6_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.132995",
      "event_type": "validation",
      "details": {
        "state": "6 / 3 = 2 (left: 2 5)",
        "thought": "6 / 3 = 2 (left: 2 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_6_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133001",
      "event_type": "validation",
      "details": {
        "state": "3 * 5 = 15 (left: 6 15)",
        "thought": "3 * 5 = 15 (left: 6 15)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_6_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133006",
      "event_type": "validation",
      "details": {
        "state": "5 + 6 = 11 (left: 3 11)",
        "thought": "5 + 6 = 11 (left: 3 11)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_6_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133011",
      "event_type": "validation",
      "details": {
        "state": "6 - 3 = 3 (left: 3 5)",
        "thought": "6 - 3 = 3 (left: 3 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_6_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133015",
      "event_type": "validation",
      "details": {
        "state": "6 - 5 = 1 (left: 1 3)",
        "thought": "6 - 5 = 1 (left: 1 3)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_7_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133048",
      "event_type": "validation",
      "details": {
        "state": "3 + 5 = 8 (left: 6 8)",
        "thought": "3 + 5 = 8 (left: 6 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_7_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133053",
      "event_type": "validation",
      "details": {
        "state": "5 - 3 = 2 (left: 2 6)",
        "thought": "5 - 3 = 2 (left: 2 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_7_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133058",
      "event_type": "validation",
      "details": {
        "state": "6 - 3 = 3 (left: 3 5)",
        "thought": "6 - 3 = 3 (left: 3 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_7_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133062",
      "event_type": "validation",
      "details": {
        "state": "6 / 3 = 2 (left: 2 5)",
        "thought": "6 / 3 = 2 (left: 2 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_7_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133067",
      "event_type": "validation",
      "details": {
        "state": "5 * 3 = 15 (left: 6 15)",
        "thought": "5 * 3 = 15 (left: 6 15)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_7_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133071",
      "event_type": "validation",
      "details": {
        "state": "6 + 3 = 9 (left: 5 9)",
        "thought": "6 + 3 = 9 (left: 5 9)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_8_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133109",
      "event_type": "validation",
      "details": {
        "state": "3 + 5 = 8 (left: 6 8)",
        "thought": "3 + 5 = 8 (left: 6 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_8_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133115",
      "event_type": "validation",
      "details": {
        "state": "5 - 3 = 2 (left: 2 6)",
        "thought": "5 - 3 = 2 (left: 2 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_8_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133120",
      "event_type": "validation",
      "details": {
        "state": "6 - 3 = 3 (left: 3 5)",
        "thought": "6 - 3 = 3 (left: 3 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_8_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133124",
      "event_type": "validation",
      "details": {
        "state": "3 * 5 = 15 (left: 6 15)",
        "thought": "3 * 5 = 15 (left: 6 15)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_8_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133129",
      "event_type": "validation",
      "details": {
        "state": "6 / 3 = 2 (left: 2 5)",
        "thought": "6 / 3 = 2 (left: 2 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_8_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133135",
      "event_type": "validation",
      "details": {
        "state": "5 * 3 = 15 (left: 6 15)",
        "thought": "5 * 3 = 15 (left: 6 15)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_8_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133140",
      "event_type": "validation",
      "details": {
        "state": "6 - 5 = 1 (left: 1 3)",
        "thought": "6 - 5 = 1 (left: 1 3)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_9_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133176",
      "event_type": "validation",
      "details": {
        "state": "3 + 5 = 8 (left: 6 8)",
        "thought": "3 + 5 = 8 (left: 6 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_9_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133181",
      "event_type": "validation",
      "details": {
        "state": "5 + 6 = 11 (left: 3 11)",
        "thought": "5 + 6 = 11 (left: 3 11)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_9_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133186",
      "event_type": "validation",
      "details": {
        "state": "6 - 3 = 3 (left: 3 5)",
        "thought": "6 - 3 = 3 (left: 3 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_9_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133190",
      "event_type": "validation",
      "details": {
        "state": "5 - 3 = 2 (left: 2 6)",
        "thought": "5 - 3 = 2 (left: 2 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_9_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133195",
      "event_type": "validation",
      "details": {
        "state": "6 / 3 = 2 (left: 2 5)",
        "thought": "6 / 3 = 2 (left: 2 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_9_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133199",
      "event_type": "validation",
      "details": {
        "state": "3 * 5 = 15 (left: 6 15)",
        "thought": "3 * 5 = 15 (left: 6 15)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_9_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133204",
      "event_type": "validation",
      "details": {
        "state": "5 * 6 = 30 (left: 3 30)",
        "thought": "5 * 6 = 30 (left: 3 30)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_9_7",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T22:55:37.133209",
      "event_type": "validation",
      "details": {
        "state": "6 * 3 = 18 (left: 5 18)",
        "thought": "6 * 3 = 18 (left: 5 18)"
      }
    }
  ],
  "legacy_log": [
    {
      "event": "push",
      "node_id": "0",
      "issues": [],
      "log": []
    },
    {
      "event": "push",
      "node_id": "0_0",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_0 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '1 + 3 = 4 (left: 4 5 6)' found in parent's thoughts",
        "\u2705 Node 0_0 matches thought position.",
        "\u2705 State consistency check passed for node 0_0"
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_7",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_7 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_7 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_8",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_8 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_8 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_9",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_9 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_9 matches thought position."
      ]
    },
    {
      "event": "pop",
      "node_id": "",
      "issues": [
        "\u274c All children of node 0 were not explored \u2014 invalid reason for backtracking."
      ],
      "log": [
        "\u2705 Popped 0_0 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_0; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_0 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_1 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_1; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_1 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_2 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_2; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_2 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_4 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_4; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_4 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_5 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_5; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_5 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_6 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_6; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_6 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_7 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_7; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_7 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_8 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_8; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_8 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_9 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_9; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_9 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to 'None'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'"
      ]
    },
    {
      "event": "push",
      "node_id": "0_1",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_1 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '3 - 1 = 2 (left: 2 5 6)' found in parent's thoughts",
        "\u2705 Sequential child node validation: pushing 0_1 after popping 0_0 is correct.",
        "\u2705 Node 0_1 matches thought position.",
        "\u2705 State consistency check passed for node 0_1"
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_4 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_7",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_7 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_7 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_8",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_8 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_8 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_2 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '5 - 1 = 4 (left: 3 4 6)' found in parent's thoughts",
        "\u2705 Sequential child node validation: pushing 0_2 after popping 0_1 is correct.",
        "\u2705 Node 0_2 matches thought position.",
        "\u2705 State consistency check passed for node 0_2"
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_5 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_7",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_7 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_7 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3",
      "issues": [],
      "log": [
        "\u2705 Sequential child node validation: pushing 0_3 after popping 0_2 is correct.",
        "\u2705 Node 0_3 with value 2.001 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_4 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '1 * 3 = 3 (left: 3 5 6)' found in parent's thoughts",
        "\u2705 Node 0_4 matches thought position.",
        "\u2705 State consistency check passed for node 0_4"
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_5 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '3 * 1 = 3 (left: 3 5 6)' found in parent's thoughts",
        "\u2705 Sequential child node validation: pushing 0_5 after popping 0_4 is correct.",
        "\u2705 Node 0_5 matches thought position.",
        "\u2705 State consistency check passed for node 0_5"
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_7",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_7 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_7 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_6",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_6 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '5 * 1 = 5 (left: 3 5 6)' found in parent's thoughts",
        "\u2705 Sequential child node validation: pushing 0_6 after popping 0_5 is correct.",
        "\u2705 Node 0_6 matches thought position.",
        "\u2705 State consistency check passed for node 0_6"
      ]
    },
    {
      "event": "push",
      "node_id": "0_6_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_6_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_6_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_6_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_6_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_6_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_6_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_6_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_6_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_6_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_6_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_6_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_6_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_6_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_6_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_6_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_6_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_6_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_6_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_6_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_6_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_7",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_7 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '6 * 1 = 6 (left: 3 5 6)' found in parent's thoughts",
        "\u2705 Sequential child node validation: pushing 0_7 after popping 0_6 is correct.",
        "\u2705 Node 0_7 matches thought position.",
        "\u2705 State consistency check passed for node 0_7"
      ]
    },
    {
      "event": "push",
      "node_id": "0_7_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_7_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_7_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_7_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_7_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_7_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_7_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_7_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_7_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_7_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_7_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_7_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_7_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_7_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_7_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_7_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_7_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_7_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_8",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_8 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '5 / 1 = 5 (left: 3 5 6)' found in parent's thoughts",
        "\u2705 Sequential child node validation: pushing 0_8 after popping 0_7 is correct.",
        "\u2705 Node 0_8 matches thought position.",
        "\u2705 State consistency check passed for node 0_8"
      ]
    },
    {
      "event": "push",
      "node_id": "0_8_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_8_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_8_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_8_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_8_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_8_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_8_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_8_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_8_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_8_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_8_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_8_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_8_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_8_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_8_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_8_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_8_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_8_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_8_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_8_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_8_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_9",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_9 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '6 / 1 = 6 (left: 3 5 6)' found in parent's thoughts",
        "\u2705 Sequential child node validation: pushing 0_9 after popping 0_8 is correct.",
        "\u2705 Node 0_9 matches thought position.",
        "\u2705 State consistency check passed for node 0_9"
      ]
    },
    {
      "event": "push",
      "node_id": "0_9_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_9_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_9_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_9_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_9_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_9_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_9_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_9_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_9_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_9_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_9_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_9_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_9_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_9_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_9_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_9_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_9_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_9_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_9_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_9_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_9_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_9_7",
      "issues": [],
      "log": [
        "\u2705 Node 0_9_7 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_9_7 matches thought position."
      ]
    }
  ],
  "tree_trace": {
    "0": {
      "state": null,
      "thought": "1 + 3 = 4 (left: 4 5 6)\n3 - 1 = 2 (left: 2 5 6)\n5 - 1 = 4 (left: 3 4 6)\n6 - 1 = 5 (left: 3 5 5)\n1 * 3 = 3 (left: 3 5 6)\n3 * 1 = 3 (left: 3 5 6)\n5 * 1 = 5 (left: 3 5 6)\n6 * 1 = 6 (left: 3 5 6)\n5 / 1 = 5 (left: 3 5 6)\n6 / 1 = 6 (left: 3 5 6)\n3 + 5 = 8 (left: 1 6 8)\n5 - 3 = 2 (left: 1 2 6)\n6 - 3 = 3 (left: 1 3 5)\n3 * 5 = 15 (left: 1 6 15)\n5 * 3 = 15 (left: 1 6 15)\n5 / 3 = 1.66667 (left: 1 1.66667 6)\n6 + 5 = 11 (left: 1 3 11)\n5 - 6 = -1 (left: -1 1 3)\n6 - 5 = 1 (left: 1 1 3)\n5 * 6 = 30 (left: 1 3 30)\n6 * 5 = 30 (left: 1 3 30)\n6 / 5 = 1.2 (left: 1 1.2 3)\n3 + 6 = 9 (left: 1 5 9)\n6 - 3 = 3 (left: 1 3 5)\n3 * 6 = 18 (left: 1 5 18)\n6 * 3 = 18 (left: 1 5 18)\n6 / 3 = 2 (left: 1 2 5)",
      "value": null,
      "opening_remark": null,
      "children": {
        "0_0": {
          "state": "1 + 3 = 4 (left: 4 5 6)",
          "thought": "4 + 5 = 9 (left: 6 9)\n5 + 6 = 11 (left: 4 11)\n6 + 4 = 10 (left: 5 10)\n5 - 4 = 1 (left: 1 6)\n6 - 4 = 2 (left: 2 5)\n6 - 5 = 1 (left: 1 4)\n4 * 5 = 20 (left: 6 20)\n5 * 6 = 30 (left: 4 30)\n6 / 4 = 1.5 (left: 1.5 5)\n5 / 4 = 1.25 (left: 1.25 6)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_0_0": {
              "state": "1 + 3 = 4 (left: 4 5 6)\n4 + 5 = 9 (left: 6 9)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_1": {
              "state": "1 + 3 = 4 (left: 4 5 6)\n5 + 6 = 11 (left: 4 11)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_2": {
              "state": "1 + 3 = 4 (left: 4 5 6)\n6 + 4 = 10 (left: 5 10)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_3": {
              "state": "1 + 3 = 4 (left: 4 5 6)\n5 - 4 = 1 (left: 1 6)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_4": {
              "state": "1 + 3 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_5": {
              "state": "1 + 3 = 4 (left: 4 5 6)\n6 - 5 = 1 (left: 1 4)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_6": {
              "state": "1 + 3 = 4 (left: 4 5 6)\n4 * 5 = 20 (left: 6 20)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_7": {
              "state": "1 + 3 = 4 (left: 4 5 6)\n5 * 6 = 30 (left: 4 30)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_8": {
              "state": "1 + 3 = 4 (left: 4 5 6)\n6 / 4 = 1.5 (left: 1.5 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_9": {
              "state": "1 + 3 = 4 (left: 4 5 6)\n5 / 4 = 1.25 (left: 1.25 6)",
              "thought": null,
              "value": 1.002,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_1": {
          "state": "3 - 1 = 2 (left: 2 5 6)",
          "thought": "2 + 5 = 7 (left: 6 7)\n5 - 2 = 3 (left: 3 6)\n6 - 2 = 4 (left: 4 5)\n2 * 5 = 10 (left: 6 10)\n5 / 2 = 2.5 (left: 2.5 6)\n6 / 2 = 3 (left: 3 5)\n6 - 5 = 1 (left: 1 2)\n2 * 6 = 12 (left: 5 12)\n5 * 2 = 10 (left: 6 10)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_1_0": {
              "state": "3 - 1 = 2 (left: 2 5 6)\n2 + 5 = 7 (left: 6 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_1": {
              "state": "3 - 1 = 2 (left: 2 5 6)\n5 - 2 = 3 (left: 3 6)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_2": {
              "state": "3 - 1 = 2 (left: 2 5 6)\n6 - 2 = 4 (left: 4 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_3": {
              "state": "3 - 1 = 2 (left: 2 5 6)\n2 * 5 = 10 (left: 6 10)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_4": {
              "state": "3 - 1 = 2 (left: 2 5 6)\n5 / 2 = 2.5 (left: 2.5 6)",
              "thought": null,
              "value": 1.002,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_5": {
              "state": "3 - 1 = 2 (left: 2 5 6)\n6 / 2 = 3 (left: 3 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_6": {
              "state": "3 - 1 = 2 (left: 2 5 6)\n6 - 5 = 1 (left: 1 2)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_7": {
              "state": "3 - 1 = 2 (left: 2 5 6)\n2 * 6 = 12 (left: 5 12)",
              "thought": null,
              "value": 1.002,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_8": {
              "state": "3 - 1 = 2 (left: 2 5 6)\n5 * 2 = 10 (left: 6 10)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_2": {
          "state": "5 - 1 = 4 (left: 3 4 6)",
          "thought": "3 + 4 = 7 (left: 6 7)\n4 + 6 = 10 (left: 3 10)\n6 - 4 = 2 (left: 2 3)\n4 * 3 = 12 (left: 6 12)\n6 / 3 = 2 (left: 2 4)\n3 * 6 = 18 (left: 4 18)\n4 - 3 = 1 (left: 1 6)\n6 - 3 = 3 (left: 3 4)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_2_0": {
              "state": "5 - 1 = 4 (left: 3 4 6)\n3 + 4 = 7 (left: 6 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_1": {
              "state": "5 - 1 = 4 (left: 3 4 6)\n4 + 6 = 10 (left: 3 10)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_2": {
              "state": "5 - 1 = 4 (left: 3 4 6)\n6 - 4 = 2 (left: 2 3)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_3": {
              "state": "5 - 1 = 4 (left: 3 4 6)\n4 * 3 = 12 (left: 6 12)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_4": {
              "state": "5 - 1 = 4 (left: 3 4 6)\n6 / 3 = 2 (left: 2 4)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_5": {
              "state": "5 - 1 = 4 (left: 3 4 6)\n3 * 6 = 18 (left: 4 18)",
              "thought": null,
              "value": 1.002,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_6": {
              "state": "5 - 1 = 4 (left: 3 4 6)\n4 - 3 = 1 (left: 1 6)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_7": {
              "state": "5 - 1 = 4 (left: 3 4 6)\n6 - 3 = 3 (left: 3 4)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_3": {
          "state": "6 - 1 = 5 (left: 3 5 5)",
          "thought": null,
          "value": 2.001,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_4": {
          "state": "1 * 3 = 3 (left: 3 5 6)",
          "thought": "3 + 5 = 8 (left: 6 8)\n5 - 3 = 2 (left: 2 6)\n6 - 3 = 3 (left: 3 5)\n3 * 5 = 15 (left: 6 15)\n5 * 6 = 30 (left: 3 30)\n6 / 3 = 2 (left: 2 5)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_4_0": {
              "state": "1 * 3 = 3 (left: 3 5 6)\n3 + 5 = 8 (left: 6 8)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_4_1": {
              "state": "1 * 3 = 3 (left: 3 5 6)\n5 - 3 = 2 (left: 2 6)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_4_2": {
              "state": "1 * 3 = 3 (left: 3 5 6)\n6 - 3 = 3 (left: 3 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_4_3": {
              "state": "1 * 3 = 3 (left: 3 5 6)\n3 * 5 = 15 (left: 6 15)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_4_4": {
              "state": "1 * 3 = 3 (left: 3 5 6)\n5 * 6 = 30 (left: 3 30)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_4_5": {
              "state": "1 * 3 = 3 (left: 3 5 6)\n6 / 3 = 2 (left: 2 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_5": {
          "state": "3 * 1 = 3 (left: 3 5 6)",
          "thought": "3 + 5 = 8 (left: 6 8)\n5 - 3 = 2 (left: 2 6)\n6 - 3 = 3 (left: 3 5)\n6 / 3 = 2 (left: 2 5)\n3 * 5 = 15 (left: 6 15)\n5 * 6 = 30 (left: 3 30)\n6 + 3 = 9 (left: 5 9)\n5 + 3 = 8 (left: 6 8)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_5_0": {
              "state": "3 * 1 = 3 (left: 3 5 6)\n3 + 5 = 8 (left: 6 8)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_5_1": {
              "state": "3 * 1 = 3 (left: 3 5 6)\n5 - 3 = 2 (left: 2 6)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_5_2": {
              "state": "3 * 1 = 3 (left: 3 5 6)\n6 - 3 = 3 (left: 3 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_5_3": {
              "state": "3 * 1 = 3 (left: 3 5 6)\n6 / 3 = 2 (left: 2 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_5_4": {
              "state": "3 * 1 = 3 (left: 3 5 6)\n3 * 5 = 15 (left: 6 15)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_5_5": {
              "state": "3 * 1 = 3 (left: 3 5 6)\n5 * 6 = 30 (left: 3 30)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_5_6": {
              "state": "3 * 1 = 3 (left: 3 5 6)\n6 + 3 = 9 (left: 5 9)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_5_7": {
              "state": "3 * 1 = 3 (left: 3 5 6)\n5 + 3 = 8 (left: 6 8)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_6": {
          "state": "5 * 1 = 5 (left: 3 5 6)",
          "thought": "3 + 5 = 8 (left: 6 8)\n5 - 3 = 2 (left: 2 6)\n6 / 3 = 2 (left: 2 5)\n3 * 5 = 15 (left: 6 15) \n5 + 6 = 11 (left: 3 11)\n6 - 3 = 3 (left: 3 5)\n6 - 5 = 1 (left: 1 3)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_6_0": {
              "state": "5 * 1 = 5 (left: 3 5 6)\n3 + 5 = 8 (left: 6 8)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_6_1": {
              "state": "5 * 1 = 5 (left: 3 5 6)\n5 - 3 = 2 (left: 2 6)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_6_2": {
              "state": "5 * 1 = 5 (left: 3 5 6)\n6 / 3 = 2 (left: 2 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_6_3": {
              "state": "5 * 1 = 5 (left: 3 5 6)\n3 * 5 = 15 (left: 6 15)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_6_4": {
              "state": "5 * 1 = 5 (left: 3 5 6)\n5 + 6 = 11 (left: 3 11)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_6_5": {
              "state": "5 * 1 = 5 (left: 3 5 6)\n6 - 3 = 3 (left: 3 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_6_6": {
              "state": "5 * 1 = 5 (left: 3 5 6)\n6 - 5 = 1 (left: 1 3)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_7": {
          "state": "6 * 1 = 6 (left: 3 5 6)",
          "thought": "3 + 5 = 8 (left: 6 8)\n5 - 3 = 2 (left: 2 6)\n6 - 3 = 3 (left: 3 5)\n6 / 3 = 2 (left: 2 5)\n5 * 3 = 15 (left: 6 15)\n6 + 3 = 9 (left: 5 9)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_7_0": {
              "state": "6 * 1 = 6 (left: 3 5 6)\n3 + 5 = 8 (left: 6 8)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_7_1": {
              "state": "6 * 1 = 6 (left: 3 5 6)\n5 - 3 = 2 (left: 2 6)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_7_2": {
              "state": "6 * 1 = 6 (left: 3 5 6)\n6 - 3 = 3 (left: 3 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_7_3": {
              "state": "6 * 1 = 6 (left: 3 5 6)\n6 / 3 = 2 (left: 2 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_7_4": {
              "state": "6 * 1 = 6 (left: 3 5 6)\n5 * 3 = 15 (left: 6 15)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_7_5": {
              "state": "6 * 1 = 6 (left: 3 5 6)\n6 + 3 = 9 (left: 5 9)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_8": {
          "state": "5 / 1 = 5 (left: 3 5 6)",
          "thought": "3 + 5 = 8 (left: 6 8)\n5 - 3 = 2 (left: 2 6)\n6 - 3 = 3 (left: 3 5)\n3 * 5 = 15 (left: 6 15)\n6 / 3 = 2 (left: 2 5)\n5 * 3 = 15 (left: 6 15)\n6 - 5 = 1 (left: 1 3)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_8_0": {
              "state": "5 / 1 = 5 (left: 3 5 6)\n3 + 5 = 8 (left: 6 8)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_8_1": {
              "state": "5 / 1 = 5 (left: 3 5 6)\n5 - 3 = 2 (left: 2 6)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_8_2": {
              "state": "5 / 1 = 5 (left: 3 5 6)\n6 - 3 = 3 (left: 3 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_8_3": {
              "state": "5 / 1 = 5 (left: 3 5 6)\n3 * 5 = 15 (left: 6 15)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_8_4": {
              "state": "5 / 1 = 5 (left: 3 5 6)\n6 / 3 = 2 (left: 2 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_8_5": {
              "state": "5 / 1 = 5 (left: 3 5 6)\n5 * 3 = 15 (left: 6 15)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_8_6": {
              "state": "5 / 1 = 5 (left: 3 5 6)\n6 - 5 = 1 (left: 1 3)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_9": {
          "state": "6 / 1 = 6 (left: 3 5 6)",
          "thought": "3 + 5 = 8 (left: 6 8)\n5 + 6 = 11 (left: 3 11)\n6 - 3 = 3 (left: 3 5)\n5 - 3 = 2 (left: 2 6)\n6 / 3 = 2 (left: 2 5)\n3 * 5 = 15 (left: 6 15)\n5 * 6 = 30 (left: 3 30)\n6 * 3 = 18 (left: 5 18)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_9_0": {
              "state": "6 / 1 = 6 (left: 3 5 6)\n3 + 5 = 8 (left: 6 8)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_9_1": {
              "state": "6 / 1 = 6 (left: 3 5 6)\n5 + 6 = 11 (left: 3 11)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_9_2": {
              "state": "6 / 1 = 6 (left: 3 5 6)\n6 - 3 = 3 (left: 3 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_9_3": {
              "state": "6 / 1 = 6 (left: 3 5 6)\n5 - 3 = 2 (left: 2 6)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_9_4": {
              "state": "6 / 1 = 6 (left: 3 5 6)\n6 / 3 = 2 (left: 2 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_9_5": {
              "state": "6 / 1 = 6 (left: 3 5 6)\n3 * 5 = 15 (left: 6 15)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_9_6": {
              "state": "6 / 1 = 6 (left: 3 5 6)\n5 * 6 = 30 (left: 3 30)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_9_7": {
              "state": "6 / 1 = 6 (left: 3 5 6)\n6 * 3 = 18 (left: 5 18)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        }
      },
      "closing_remark": null,
      "backtracked": false
    }
  }
}