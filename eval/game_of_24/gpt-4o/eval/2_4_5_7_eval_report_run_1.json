{
  "summary": {
    "total_checks": 187,
    "passed": 186,
    "failed": 1
  },
  "checks_by_type": {
    "pseudo_recursive_call": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-29T13:33:07.852855",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-29T13:34:52.475978",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-29T13:36:23.615735",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-29T13:38:12.558736",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-29T13:39:49.590806",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_7",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-29T13:41:18.792560",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        }
      ]
    },
    "child_state": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "child_state",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State validation passed: Last thought '2 + 4 = 6 (left: 5 6 7)' found in parent's thoughts",
          "timestamp": "2025-05-29T13:33:07.852900",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '2 + 4 = 6 (left: 5 6 7)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "5 - 2 = 3 (left: 3 4 7)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "7 - 5 = 2 (left: 2 2 4)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "7 * 2 = 14 (left: 4 5 14)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 + 5 = 9 (left: 2 7 9)",
              "5 * 7 = 35 (left: 2 4 35)",
              "7 + 5 = 12 (left: 2 4 12)",
              "7 * 4 = 28 (left: 2 5 28)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "State validation passed: Last thought '5 + 2 = 7 (left: 4 7 7)' found in parent's thoughts",
          "timestamp": "2025-05-29T13:34:52.476022",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '5 + 2 = 7 (left: 4 7 7)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "5 - 2 = 3 (left: 3 4 7)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "7 - 5 = 2 (left: 2 2 4)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "7 * 2 = 14 (left: 4 5 14)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 + 5 = 9 (left: 2 7 9)",
              "5 * 7 = 35 (left: 2 4 35)",
              "7 + 5 = 12 (left: 2 4 12)",
              "7 * 4 = 28 (left: 2 5 28)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "State validation passed: Last thought '5 - 2 = 3 (left: 3 4 7)' found in parent's thoughts",
          "timestamp": "2025-05-29T13:36:23.615835",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '5 - 2 = 3 (left: 3 4 7)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "5 - 2 = 3 (left: 3 4 7)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "7 - 5 = 2 (left: 2 2 4)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "7 * 2 = 14 (left: 4 5 14)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 + 5 = 9 (left: 2 7 9)",
              "5 * 7 = 35 (left: 2 4 35)",
              "7 + 5 = 12 (left: 2 4 12)",
              "7 * 4 = 28 (left: 2 5 28)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "State validation passed: Last thought '5 / 2 = 2.5 (left: 2.5 4 7)' found in parent's thoughts",
          "timestamp": "2025-05-29T13:38:12.558788",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '5 / 2 = 2.5 (left: 2.5 4 7)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "5 - 2 = 3 (left: 3 4 7)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "7 - 5 = 2 (left: 2 2 4)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "7 * 2 = 14 (left: 4 5 14)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 + 5 = 9 (left: 2 7 9)",
              "5 * 7 = 35 (left: 2 4 35)",
              "7 + 5 = 12 (left: 2 4 12)",
              "7 * 4 = 28 (left: 2 5 28)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "State validation passed: Last thought '7 - 2 = 5 (left: 4 5 5)' found in parent's thoughts",
          "timestamp": "2025-05-29T13:39:49.590851",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '7 - 2 = 5 (left: 4 5 5)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "5 - 2 = 3 (left: 3 4 7)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "7 - 5 = 2 (left: 2 2 4)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "7 * 2 = 14 (left: 4 5 14)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 + 5 = 9 (left: 2 7 9)",
              "5 * 7 = 35 (left: 2 4 35)",
              "7 + 5 = 12 (left: 2 4 12)",
              "7 * 4 = 28 (left: 2 5 28)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_7",
          "result": "PASS",
          "reason": "State validation passed: Last thought '7 / 2 = 3.5 (left: 3.5 4 5)' found in parent's thoughts",
          "timestamp": "2025-05-29T13:41:18.792608",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '7 / 2 = 3.5 (left: 3.5 4 5)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "5 - 2 = 3 (left: 3 4 7)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "7 - 5 = 2 (left: 2 2 4)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "7 * 2 = 14 (left: 4 5 14)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 + 5 = 9 (left: 2 7 9)",
              "5 * 7 = 35 (left: 2 4 35)",
              "7 + 5 = 12 (left: 2 4 12)",
              "7 * 4 = 28 (left: 2 5 28)"
            ],
            "parent_state": null
          }
        }
      ]
    },
    "child_id_assignment": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "node_id 0_0 matches thought position.",
          "timestamp": "2025-05-29T13:33:07.852941",
          "event_type": "validation",
          "details": {
            "node_id": "0_0",
            "state": "2 + 4 = 6 (left: 5 6 7)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "5 - 2 = 3 (left: 3 4 7)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "7 - 5 = 2 (left: 2 2 4)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "7 * 2 = 14 (left: 4 5 14)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 + 5 = 9 (left: 2 7 9)",
              "5 * 7 = 35 (left: 2 4 35)",
              "7 + 5 = 12 (left: 2 4 12)",
              "7 * 4 = 28 (left: 2 5 28)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_0",
          "result": "PASS",
          "reason": "node_id 0_0_0 matches thought position.",
          "timestamp": "2025-05-29T13:33:28.596608",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_0",
            "state": "5 + 6 = 11 (left: 7 11)",
            "thoughts": [
              "5 + 6 = 11 (left: 7 11)",
              "5 * 6 = 30 (left: 7 30)",
              "6 - 5 = 1 (left: 1 7)",
              "7 - 5 = 2 (left: 2 6)",
              "7 - 6 = 1 (left: 1 5)",
              "6 + 7 = 13 (left: 5 13)",
              "7 * 5 = 35 (left: 6 35)",
              "7 * 6 = 42 (left: 5 42)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "node_id 0_0_1 matches thought position.",
          "timestamp": "2025-05-29T13:33:37.368003",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_1",
            "state": "5 * 6 = 30 (left: 7 30)",
            "thoughts": [
              "5 + 6 = 11 (left: 7 11)",
              "5 * 6 = 30 (left: 7 30)",
              "6 - 5 = 1 (left: 1 7)",
              "7 - 5 = 2 (left: 2 6)",
              "7 - 6 = 1 (left: 1 5)",
              "6 + 7 = 13 (left: 5 13)",
              "7 * 5 = 35 (left: 6 35)",
              "7 * 6 = 42 (left: 5 42)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_2",
          "result": "PASS",
          "reason": "node_id 0_0_2 matches thought position.",
          "timestamp": "2025-05-29T13:33:45.488976",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_2",
            "state": "6 - 5 = 1 (left: 1 7)",
            "thoughts": [
              "5 + 6 = 11 (left: 7 11)",
              "5 * 6 = 30 (left: 7 30)",
              "6 - 5 = 1 (left: 1 7)",
              "7 - 5 = 2 (left: 2 6)",
              "7 - 6 = 1 (left: 1 5)",
              "6 + 7 = 13 (left: 5 13)",
              "7 * 5 = 35 (left: 6 35)",
              "7 * 6 = 42 (left: 5 42)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_3",
          "result": "PASS",
          "reason": "node_id 0_0_3 matches thought position.",
          "timestamp": "2025-05-29T13:33:55.012140",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_3",
            "state": "7 - 5 = 2 (left: 2 6)",
            "thoughts": [
              "5 + 6 = 11 (left: 7 11)",
              "5 * 6 = 30 (left: 7 30)",
              "6 - 5 = 1 (left: 1 7)",
              "7 - 5 = 2 (left: 2 6)",
              "7 - 6 = 1 (left: 1 5)",
              "6 + 7 = 13 (left: 5 13)",
              "7 * 5 = 35 (left: 6 35)",
              "7 * 6 = 42 (left: 5 42)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_4",
          "result": "PASS",
          "reason": "node_id 0_0_4 matches thought position.",
          "timestamp": "2025-05-29T13:34:03.371178",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_4",
            "state": "7 - 6 = 1 (left: 1 5)",
            "thoughts": [
              "5 + 6 = 11 (left: 7 11)",
              "5 * 6 = 30 (left: 7 30)",
              "6 - 5 = 1 (left: 1 7)",
              "7 - 5 = 2 (left: 2 6)",
              "7 - 6 = 1 (left: 1 5)",
              "6 + 7 = 13 (left: 5 13)",
              "7 * 5 = 35 (left: 6 35)",
              "7 * 6 = 42 (left: 5 42)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_5",
          "result": "PASS",
          "reason": "node_id 0_0_5 matches thought position.",
          "timestamp": "2025-05-29T13:34:11.605001",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_5",
            "state": "6 + 7 = 13 (left: 5 13)",
            "thoughts": [
              "5 + 6 = 11 (left: 7 11)",
              "5 * 6 = 30 (left: 7 30)",
              "6 - 5 = 1 (left: 1 7)",
              "7 - 5 = 2 (left: 2 6)",
              "7 - 6 = 1 (left: 1 5)",
              "6 + 7 = 13 (left: 5 13)",
              "7 * 5 = 35 (left: 6 35)",
              "7 * 6 = 42 (left: 5 42)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_6",
          "result": "PASS",
          "reason": "node_id 0_0_6 matches thought position.",
          "timestamp": "2025-05-29T13:34:21.233089",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_6",
            "state": "7 * 5 = 35 (left: 6 35)",
            "thoughts": [
              "5 + 6 = 11 (left: 7 11)",
              "5 * 6 = 30 (left: 7 30)",
              "6 - 5 = 1 (left: 1 7)",
              "7 - 5 = 2 (left: 2 6)",
              "7 - 6 = 1 (left: 1 5)",
              "6 + 7 = 13 (left: 5 13)",
              "7 * 5 = 35 (left: 6 35)",
              "7 * 6 = 42 (left: 5 42)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_7",
          "result": "PASS",
          "reason": "node_id 0_0_7 matches thought position.",
          "timestamp": "2025-05-29T13:34:31.122465",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_7",
            "state": "7 * 6 = 42 (left: 5 42)",
            "thoughts": [
              "5 + 6 = 11 (left: 7 11)",
              "5 * 6 = 30 (left: 7 30)",
              "6 - 5 = 1 (left: 1 7)",
              "7 - 5 = 2 (left: 2 6)",
              "7 - 6 = 1 (left: 1 5)",
              "6 + 7 = 13 (left: 5 13)",
              "7 * 5 = 35 (left: 6 35)",
              "7 * 6 = 42 (left: 5 42)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "node_id 0_1 matches thought position.",
          "timestamp": "2025-05-29T13:34:43.848036",
          "event_type": "validation",
          "details": {
            "node_id": "0_1",
            "state": "4 - 2 = 2 (left: 2 5 7)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "5 - 2 = 3 (left: 3 4 7)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "7 - 5 = 2 (left: 2 2 4)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "7 * 2 = 14 (left: 4 5 14)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 + 5 = 9 (left: 2 7 9)",
              "5 * 7 = 35 (left: 2 4 35)",
              "7 + 5 = 12 (left: 2 4 12)",
              "7 * 4 = 28 (left: 2 5 28)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "node_id 0_2 matches thought position.",
          "timestamp": "2025-05-29T13:34:52.476060",
          "event_type": "validation",
          "details": {
            "node_id": "0_2",
            "state": "5 + 2 = 7 (left: 4 7 7)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "5 - 2 = 3 (left: 3 4 7)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "7 - 5 = 2 (left: 2 2 4)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "7 * 2 = 14 (left: 4 5 14)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 + 5 = 9 (left: 2 7 9)",
              "5 * 7 = 35 (left: 2 4 35)",
              "7 + 5 = 12 (left: 2 4 12)",
              "7 * 4 = 28 (left: 2 5 28)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_0",
          "result": "PASS",
          "reason": "node_id 0_2_0 matches thought position.",
          "timestamp": "2025-05-29T13:35:10.949215",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_0",
            "state": "4 + 7 = 11 (left: 7 11)",
            "thoughts": [
              "4 + 7 = 11 (left: 7 11)",
              "7 - 4 = 3 (left: 3 7)",
              "7 / 4 = 1.75 (left: 1.75 7)",
              "4 * 7 = 28 (left: 7 28)",
              "7 + 7 = 14 (left: 4 14)",
              "7 - 7 = 0 (left: 0 4)",
              "7 / 7 = 1 (left: 1 4)",
              "7 * 7 = 49 (left: 4 49)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_1",
          "result": "PASS",
          "reason": "node_id 0_2_1 matches thought position.",
          "timestamp": "2025-05-29T13:35:19.705995",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_1",
            "state": "7 - 4 = 3 (left: 3 7)",
            "thoughts": [
              "4 + 7 = 11 (left: 7 11)",
              "7 - 4 = 3 (left: 3 7)",
              "7 / 4 = 1.75 (left: 1.75 7)",
              "4 * 7 = 28 (left: 7 28)",
              "7 + 7 = 14 (left: 4 14)",
              "7 - 7 = 0 (left: 0 4)",
              "7 / 7 = 1 (left: 1 4)",
              "7 * 7 = 49 (left: 4 49)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_2",
          "result": "PASS",
          "reason": "node_id 0_2_2 matches thought position.",
          "timestamp": "2025-05-29T13:35:28.415043",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_2",
            "state": "7 / 4 = 1.75 (left: 1.75 7)",
            "thoughts": [
              "4 + 7 = 11 (left: 7 11)",
              "7 - 4 = 3 (left: 3 7)",
              "7 / 4 = 1.75 (left: 1.75 7)",
              "4 * 7 = 28 (left: 7 28)",
              "7 + 7 = 14 (left: 4 14)",
              "7 - 7 = 0 (left: 0 4)",
              "7 / 7 = 1 (left: 1 4)",
              "7 * 7 = 49 (left: 4 49)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_3",
          "result": "PASS",
          "reason": "node_id 0_2_3 matches thought position.",
          "timestamp": "2025-05-29T13:35:37.535672",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_3",
            "state": "4 * 7 = 28 (left: 7 28)",
            "thoughts": [
              "4 + 7 = 11 (left: 7 11)",
              "7 - 4 = 3 (left: 3 7)",
              "7 / 4 = 1.75 (left: 1.75 7)",
              "4 * 7 = 28 (left: 7 28)",
              "7 + 7 = 14 (left: 4 14)",
              "7 - 7 = 0 (left: 0 4)",
              "7 / 7 = 1 (left: 1 4)",
              "7 * 7 = 49 (left: 4 49)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_4",
          "result": "PASS",
          "reason": "node_id 0_2_4 matches thought position.",
          "timestamp": "2025-05-29T13:35:46.074873",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_4",
            "state": "7 + 7 = 14 (left: 4 14)",
            "thoughts": [
              "4 + 7 = 11 (left: 7 11)",
              "7 - 4 = 3 (left: 3 7)",
              "7 / 4 = 1.75 (left: 1.75 7)",
              "4 * 7 = 28 (left: 7 28)",
              "7 + 7 = 14 (left: 4 14)",
              "7 - 7 = 0 (left: 0 4)",
              "7 / 7 = 1 (left: 1 4)",
              "7 * 7 = 49 (left: 4 49)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_5",
          "result": "PASS",
          "reason": "node_id 0_2_5 matches thought position.",
          "timestamp": "2025-05-29T13:35:54.630175",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_5",
            "state": "7 - 7 = 0 (left: 0 4)",
            "thoughts": [
              "4 + 7 = 11 (left: 7 11)",
              "7 - 4 = 3 (left: 3 7)",
              "7 / 4 = 1.75 (left: 1.75 7)",
              "4 * 7 = 28 (left: 7 28)",
              "7 + 7 = 14 (left: 4 14)",
              "7 - 7 = 0 (left: 0 4)",
              "7 / 7 = 1 (left: 1 4)",
              "7 * 7 = 49 (left: 4 49)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_6",
          "result": "PASS",
          "reason": "node_id 0_2_6 matches thought position.",
          "timestamp": "2025-05-29T13:36:03.332474",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_6",
            "state": "7 / 7 = 1 (left: 1 4)",
            "thoughts": [
              "4 + 7 = 11 (left: 7 11)",
              "7 - 4 = 3 (left: 3 7)",
              "7 / 4 = 1.75 (left: 1.75 7)",
              "4 * 7 = 28 (left: 7 28)",
              "7 + 7 = 14 (left: 4 14)",
              "7 - 7 = 0 (left: 0 4)",
              "7 / 7 = 1 (left: 1 4)",
              "7 * 7 = 49 (left: 4 49)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_7",
          "result": "PASS",
          "reason": "node_id 0_2_7 matches thought position.",
          "timestamp": "2025-05-29T13:36:12.414981",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_7",
            "state": "7 * 7 = 49 (left: 4 49)",
            "thoughts": [
              "4 + 7 = 11 (left: 7 11)",
              "7 - 4 = 3 (left: 3 7)",
              "7 / 4 = 1.75 (left: 1.75 7)",
              "4 * 7 = 28 (left: 7 28)",
              "7 + 7 = 14 (left: 4 14)",
              "7 - 7 = 0 (left: 0 4)",
              "7 / 7 = 1 (left: 1 4)",
              "7 * 7 = 49 (left: 4 49)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "node_id 0_3 matches thought position.",
          "timestamp": "2025-05-29T13:36:23.615908",
          "event_type": "validation",
          "details": {
            "node_id": "0_3",
            "state": "5 - 2 = 3 (left: 3 4 7)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "5 - 2 = 3 (left: 3 4 7)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "7 - 5 = 2 (left: 2 2 4)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "7 * 2 = 14 (left: 4 5 14)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 + 5 = 9 (left: 2 7 9)",
              "5 * 7 = 35 (left: 2 4 35)",
              "7 + 5 = 12 (left: 2 4 12)",
              "7 * 4 = 28 (left: 2 5 28)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_0",
          "result": "PASS",
          "reason": "node_id 0_3_0 matches thought position.",
          "timestamp": "2025-05-29T13:36:43.975154",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_0",
            "state": "3 + 4 = 7 (left: 7 7)",
            "thoughts": [
              "3 + 4 = 7 (left: 7 7)",
              "4 - 3 = 1 (left: 1 7)",
              "7 - 3 = 4 (left: 4 4)",
              "7 - 4 = 3 (left: 3 3)",
              "4 / 3 = 1.33 (left: 1.33 7)",
              "7 / 3 = 2.33 (left: 2.33 4)",
              "7 / 4 = 1.75 (left: 1.75 3)",
              "3 * 4 = 12 (left: 7 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_1",
          "result": "PASS",
          "reason": "node_id 0_3_1 matches thought position.",
          "timestamp": "2025-05-29T13:36:56.552967",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_1",
            "state": "4 - 3 = 1 (left: 1 7)",
            "thoughts": [
              "3 + 4 = 7 (left: 7 7)",
              "4 - 3 = 1 (left: 1 7)",
              "7 - 3 = 4 (left: 4 4)",
              "7 - 4 = 3 (left: 3 3)",
              "4 / 3 = 1.33 (left: 1.33 7)",
              "7 / 3 = 2.33 (left: 2.33 4)",
              "7 / 4 = 1.75 (left: 1.75 3)",
              "3 * 4 = 12 (left: 7 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_2",
          "result": "PASS",
          "reason": "node_id 0_3_2 matches thought position.",
          "timestamp": "2025-05-29T13:37:06.764462",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_2",
            "state": "7 - 3 = 4 (left: 4 4)",
            "thoughts": [
              "3 + 4 = 7 (left: 7 7)",
              "4 - 3 = 1 (left: 1 7)",
              "7 - 3 = 4 (left: 4 4)",
              "7 - 4 = 3 (left: 3 3)",
              "4 / 3 = 1.33 (left: 1.33 7)",
              "7 / 3 = 2.33 (left: 2.33 4)",
              "7 / 4 = 1.75 (left: 1.75 3)",
              "3 * 4 = 12 (left: 7 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_3",
          "result": "PASS",
          "reason": "node_id 0_3_3 matches thought position.",
          "timestamp": "2025-05-29T13:37:13.940400",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_3",
            "state": "7 - 4 = 3 (left: 3 3)",
            "thoughts": [
              "3 + 4 = 7 (left: 7 7)",
              "4 - 3 = 1 (left: 1 7)",
              "7 - 3 = 4 (left: 4 4)",
              "7 - 4 = 3 (left: 3 3)",
              "4 / 3 = 1.33 (left: 1.33 7)",
              "7 / 3 = 2.33 (left: 2.33 4)",
              "7 / 4 = 1.75 (left: 1.75 3)",
              "3 * 4 = 12 (left: 7 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_4",
          "result": "PASS",
          "reason": "node_id 0_3_4 matches thought position.",
          "timestamp": "2025-05-29T13:37:25.722784",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_4",
            "state": "4 / 3 = 1.33 (left: 1.33 7)",
            "thoughts": [
              "3 + 4 = 7 (left: 7 7)",
              "4 - 3 = 1 (left: 1 7)",
              "7 - 3 = 4 (left: 4 4)",
              "7 - 4 = 3 (left: 3 3)",
              "4 / 3 = 1.33 (left: 1.33 7)",
              "7 / 3 = 2.33 (left: 2.33 4)",
              "7 / 4 = 1.75 (left: 1.75 3)",
              "3 * 4 = 12 (left: 7 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_5",
          "result": "PASS",
          "reason": "node_id 0_3_5 matches thought position.",
          "timestamp": "2025-05-29T13:37:35.722244",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_5",
            "state": "7 / 3 = 2.33 (left: 2.33 4)",
            "thoughts": [
              "3 + 4 = 7 (left: 7 7)",
              "4 - 3 = 1 (left: 1 7)",
              "7 - 3 = 4 (left: 4 4)",
              "7 - 4 = 3 (left: 3 3)",
              "4 / 3 = 1.33 (left: 1.33 7)",
              "7 / 3 = 2.33 (left: 2.33 4)",
              "7 / 4 = 1.75 (left: 1.75 3)",
              "3 * 4 = 12 (left: 7 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_6",
          "result": "PASS",
          "reason": "node_id 0_3_6 matches thought position.",
          "timestamp": "2025-05-29T13:37:47.619626",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_6",
            "state": "7 / 4 = 1.75 (left: 1.75 3)",
            "thoughts": [
              "3 + 4 = 7 (left: 7 7)",
              "4 - 3 = 1 (left: 1 7)",
              "7 - 3 = 4 (left: 4 4)",
              "7 - 4 = 3 (left: 3 3)",
              "4 / 3 = 1.33 (left: 1.33 7)",
              "7 / 3 = 2.33 (left: 2.33 4)",
              "7 / 4 = 1.75 (left: 1.75 3)",
              "3 * 4 = 12 (left: 7 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_7",
          "result": "PASS",
          "reason": "node_id 0_3_7 matches thought position.",
          "timestamp": "2025-05-29T13:37:58.525984",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_7",
            "state": "3 * 4 = 12 (left: 7 12)",
            "thoughts": [
              "3 + 4 = 7 (left: 7 7)",
              "4 - 3 = 1 (left: 1 7)",
              "7 - 3 = 4 (left: 4 4)",
              "7 - 4 = 3 (left: 3 3)",
              "4 / 3 = 1.33 (left: 1.33 7)",
              "7 / 3 = 2.33 (left: 2.33 4)",
              "7 / 4 = 1.75 (left: 1.75 3)",
              "3 * 4 = 12 (left: 7 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "node_id 0_4 matches thought position.",
          "timestamp": "2025-05-29T13:38:12.558861",
          "event_type": "validation",
          "details": {
            "node_id": "0_4",
            "state": "5 / 2 = 2.5 (left: 2.5 4 7)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "5 - 2 = 3 (left: 3 4 7)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "7 - 5 = 2 (left: 2 2 4)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "7 * 2 = 14 (left: 4 5 14)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 + 5 = 9 (left: 2 7 9)",
              "5 * 7 = 35 (left: 2 4 35)",
              "7 + 5 = 12 (left: 2 4 12)",
              "7 * 4 = 28 (left: 2 5 28)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_0",
          "result": "PASS",
          "reason": "node_id 0_4_0 matches thought position.",
          "timestamp": "2025-05-29T13:38:33.120497",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_0",
            "state": "2.5 + 4 = 6.5 (left: 6.5 7)",
            "thoughts": [
              "2.5 + 4 = 6.5 (left: 6.5 7)",
              "4 - 2.5 = 1.5 (left: 1.5 7)",
              "7 - 2.5 = 4.5 (left: 4 4.5)",
              "7 - 4 = 3 (left: 2.5 3)",
              "7 / 2.5 = 2.8 (left: 2.8 4)",
              "4 / 2.5 = 1.6 (left: 1.6 7)",
              "2.5 * 4 = 10 (left: 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_1",
          "result": "PASS",
          "reason": "node_id 0_4_1 matches thought position.",
          "timestamp": "2025-05-29T13:38:43.850731",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_1",
            "state": "4 - 2.5 = 1.5 (left: 1.5 7)",
            "thoughts": [
              "2.5 + 4 = 6.5 (left: 6.5 7)",
              "4 - 2.5 = 1.5 (left: 1.5 7)",
              "7 - 2.5 = 4.5 (left: 4 4.5)",
              "7 - 4 = 3 (left: 2.5 3)",
              "7 / 2.5 = 2.8 (left: 2.8 4)",
              "4 / 2.5 = 1.6 (left: 1.6 7)",
              "2.5 * 4 = 10 (left: 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_2",
          "result": "PASS",
          "reason": "node_id 0_4_2 matches thought position.",
          "timestamp": "2025-05-29T13:38:53.712790",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_2",
            "state": "7 - 2.5 = 4.5 (left: 4 4.5)",
            "thoughts": [
              "2.5 + 4 = 6.5 (left: 6.5 7)",
              "4 - 2.5 = 1.5 (left: 1.5 7)",
              "7 - 2.5 = 4.5 (left: 4 4.5)",
              "7 - 4 = 3 (left: 2.5 3)",
              "7 / 2.5 = 2.8 (left: 2.8 4)",
              "4 / 2.5 = 1.6 (left: 1.6 7)",
              "2.5 * 4 = 10 (left: 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_3",
          "result": "PASS",
          "reason": "node_id 0_4_3 matches thought position.",
          "timestamp": "2025-05-29T13:39:04.610190",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_3",
            "state": "7 - 4 = 3 (left: 2.5 3)",
            "thoughts": [
              "2.5 + 4 = 6.5 (left: 6.5 7)",
              "4 - 2.5 = 1.5 (left: 1.5 7)",
              "7 - 2.5 = 4.5 (left: 4 4.5)",
              "7 - 4 = 3 (left: 2.5 3)",
              "7 / 2.5 = 2.8 (left: 2.8 4)",
              "4 / 2.5 = 1.6 (left: 1.6 7)",
              "2.5 * 4 = 10 (left: 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_4",
          "result": "PASS",
          "reason": "node_id 0_4_4 matches thought position.",
          "timestamp": "2025-05-29T13:39:14.402126",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_4",
            "state": "7 / 2.5 = 2.8 (left: 2.8 4)",
            "thoughts": [
              "2.5 + 4 = 6.5 (left: 6.5 7)",
              "4 - 2.5 = 1.5 (left: 1.5 7)",
              "7 - 2.5 = 4.5 (left: 4 4.5)",
              "7 - 4 = 3 (left: 2.5 3)",
              "7 / 2.5 = 2.8 (left: 2.8 4)",
              "4 / 2.5 = 1.6 (left: 1.6 7)",
              "2.5 * 4 = 10 (left: 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_5",
          "result": "PASS",
          "reason": "node_id 0_4_5 matches thought position.",
          "timestamp": "2025-05-29T13:39:25.700684",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_5",
            "state": "4 / 2.5 = 1.6 (left: 1.6 7)",
            "thoughts": [
              "2.5 + 4 = 6.5 (left: 6.5 7)",
              "4 - 2.5 = 1.5 (left: 1.5 7)",
              "7 - 2.5 = 4.5 (left: 4 4.5)",
              "7 - 4 = 3 (left: 2.5 3)",
              "7 / 2.5 = 2.8 (left: 2.8 4)",
              "4 / 2.5 = 1.6 (left: 1.6 7)",
              "2.5 * 4 = 10 (left: 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_6",
          "result": "PASS",
          "reason": "node_id 0_4_6 matches thought position.",
          "timestamp": "2025-05-29T13:39:34.804044",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_6",
            "state": "2.5 * 4 = 10 (left: 7 10)",
            "thoughts": [
              "2.5 + 4 = 6.5 (left: 6.5 7)",
              "4 - 2.5 = 1.5 (left: 1.5 7)",
              "7 - 2.5 = 4.5 (left: 4 4.5)",
              "7 - 4 = 3 (left: 2.5 3)",
              "7 / 2.5 = 2.8 (left: 2.8 4)",
              "4 / 2.5 = 1.6 (left: 1.6 7)",
              "2.5 * 4 = 10 (left: 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "node_id 0_5 matches thought position.",
          "timestamp": "2025-05-29T13:39:49.590918",
          "event_type": "validation",
          "details": {
            "node_id": "0_5",
            "state": "7 - 2 = 5 (left: 4 5 5)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "5 - 2 = 3 (left: 3 4 7)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "7 - 5 = 2 (left: 2 2 4)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "7 * 2 = 14 (left: 4 5 14)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 + 5 = 9 (left: 2 7 9)",
              "5 * 7 = 35 (left: 2 4 35)",
              "7 + 5 = 12 (left: 2 4 12)",
              "7 * 4 = 28 (left: 2 5 28)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_0",
          "result": "PASS",
          "reason": "node_id 0_5_0 matches thought position.",
          "timestamp": "2025-05-29T13:40:07.479733",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_0",
            "state": "4 + 5 = 9 (left: 5 9)",
            "thoughts": [
              "4 + 5 = 9 (left: 5 9)",
              "5 - 4 = 1 (left: 1 5)",
              "5 / 4 = 1.25 (left: 1.25 5)",
              "4 * 5 = 20 (left: 5 20)",
              "5 * 5 = 25 (left: 4 25)",
              "5 + 5 = 10 (left: 4 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_1",
          "result": "PASS",
          "reason": "node_id 0_5_1 matches thought position.",
          "timestamp": "2025-05-29T13:40:17.909556",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_1",
            "state": "5 - 4 = 1 (left: 1 5)",
            "thoughts": [
              "4 + 5 = 9 (left: 5 9)",
              "5 - 4 = 1 (left: 1 5)",
              "5 / 4 = 1.25 (left: 1.25 5)",
              "4 * 5 = 20 (left: 5 20)",
              "5 * 5 = 25 (left: 4 25)",
              "5 + 5 = 10 (left: 4 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_2",
          "result": "PASS",
          "reason": "node_id 0_5_2 matches thought position.",
          "timestamp": "2025-05-29T13:40:29.065989",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_2",
            "state": "5 / 4 = 1.25 (left: 1.25 5)",
            "thoughts": [
              "4 + 5 = 9 (left: 5 9)",
              "5 - 4 = 1 (left: 1 5)",
              "5 / 4 = 1.25 (left: 1.25 5)",
              "4 * 5 = 20 (left: 5 20)",
              "5 * 5 = 25 (left: 4 25)",
              "5 + 5 = 10 (left: 4 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_3",
          "result": "PASS",
          "reason": "node_id 0_5_3 matches thought position.",
          "timestamp": "2025-05-29T13:40:37.739818",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_3",
            "state": "4 * 5 = 20 (left: 5 20)",
            "thoughts": [
              "4 + 5 = 9 (left: 5 9)",
              "5 - 4 = 1 (left: 1 5)",
              "5 / 4 = 1.25 (left: 1.25 5)",
              "4 * 5 = 20 (left: 5 20)",
              "5 * 5 = 25 (left: 4 25)",
              "5 + 5 = 10 (left: 4 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_4",
          "result": "PASS",
          "reason": "node_id 0_5_4 matches thought position.",
          "timestamp": "2025-05-29T13:40:46.220784",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_4",
            "state": "5 * 5 = 25 (left: 4 25)",
            "thoughts": [
              "4 + 5 = 9 (left: 5 9)",
              "5 - 4 = 1 (left: 1 5)",
              "5 / 4 = 1.25 (left: 1.25 5)",
              "4 * 5 = 20 (left: 5 20)",
              "5 * 5 = 25 (left: 4 25)",
              "5 + 5 = 10 (left: 4 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_5",
          "result": "PASS",
          "reason": "node_id 0_5_5 matches thought position.",
          "timestamp": "2025-05-29T13:40:56.493333",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_5",
            "state": "5 + 5 = 10 (left: 4 10)",
            "thoughts": [
              "4 + 5 = 9 (left: 5 9)",
              "5 - 4 = 1 (left: 1 5)",
              "5 / 4 = 1.25 (left: 1.25 5)",
              "4 * 5 = 20 (left: 5 20)",
              "5 * 5 = 25 (left: 4 25)",
              "5 + 5 = 10 (left: 4 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_6",
          "result": "PASS",
          "reason": "node_id 0_6 matches thought position.",
          "timestamp": "2025-05-29T13:41:07.210288",
          "event_type": "validation",
          "details": {
            "node_id": "0_6",
            "state": "7 - 5 = 2 (left: 2 2 4)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "5 - 2 = 3 (left: 3 4 7)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "7 - 5 = 2 (left: 2 2 4)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "7 * 2 = 14 (left: 4 5 14)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 + 5 = 9 (left: 2 7 9)",
              "5 * 7 = 35 (left: 2 4 35)",
              "7 + 5 = 12 (left: 2 4 12)",
              "7 * 4 = 28 (left: 2 5 28)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_7",
          "result": "PASS",
          "reason": "node_id 0_7 matches thought position.",
          "timestamp": "2025-05-29T13:41:18.792658",
          "event_type": "validation",
          "details": {
            "node_id": "0_7",
            "state": "7 / 2 = 3.5 (left: 3.5 4 5)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "5 - 2 = 3 (left: 3 4 7)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "7 - 5 = 2 (left: 2 2 4)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "7 * 2 = 14 (left: 4 5 14)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 + 5 = 9 (left: 2 7 9)",
              "5 * 7 = 35 (left: 2 4 35)",
              "7 + 5 = 12 (left: 2 4 12)",
              "7 * 4 = 28 (left: 2 5 28)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_7_0",
          "result": "PASS",
          "reason": "node_id 0_7_0 matches thought position.",
          "timestamp": "2025-05-29T13:41:40.358427",
          "event_type": "validation",
          "details": {
            "node_id": "0_7_0",
            "state": "4 + 3.5 = 7.5 (left: 5 7.5)",
            "thoughts": [
              "4 + 3.5 = 7.5 (left: 5 7.5)",
              "5 - 3.5 = 1.5 (left: 1.5 4)",
              "5 / 3.5 = 1.43 (left: 1.43 4)",
              "4 - 3.5 = 0.5 (left: 0.5 5)",
              "4 / 3.5 = 1.14 (left: 1.14 5)",
              "5 * 3.5 = 17.5 (left: 4 17.5)",
              "4 * 3.5 = 14 (left: 5 14)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_7_1",
          "result": "PASS",
          "reason": "node_id 0_7_1 matches thought position.",
          "timestamp": "2025-05-29T13:41:51.177954",
          "event_type": "validation",
          "details": {
            "node_id": "0_7_1",
            "state": "5 - 3.5 = 1.5 (left: 1.5 4)",
            "thoughts": [
              "4 + 3.5 = 7.5 (left: 5 7.5)",
              "5 - 3.5 = 1.5 (left: 1.5 4)",
              "5 / 3.5 = 1.43 (left: 1.43 4)",
              "4 - 3.5 = 0.5 (left: 0.5 5)",
              "4 / 3.5 = 1.14 (left: 1.14 5)",
              "5 * 3.5 = 17.5 (left: 4 17.5)",
              "4 * 3.5 = 14 (left: 5 14)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_7_2",
          "result": "PASS",
          "reason": "node_id 0_7_2 matches thought position.",
          "timestamp": "2025-05-29T13:42:04.370409",
          "event_type": "validation",
          "details": {
            "node_id": "0_7_2",
            "state": "5 / 3.5 = 1.43 (left: 1.43 4)",
            "thoughts": [
              "4 + 3.5 = 7.5 (left: 5 7.5)",
              "5 - 3.5 = 1.5 (left: 1.5 4)",
              "5 / 3.5 = 1.43 (left: 1.43 4)",
              "4 - 3.5 = 0.5 (left: 0.5 5)",
              "4 / 3.5 = 1.14 (left: 1.14 5)",
              "5 * 3.5 = 17.5 (left: 4 17.5)",
              "4 * 3.5 = 14 (left: 5 14)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_7_3",
          "result": "PASS",
          "reason": "node_id 0_7_3 matches thought position.",
          "timestamp": "2025-05-29T13:42:15.349771",
          "event_type": "validation",
          "details": {
            "node_id": "0_7_3",
            "state": "4 - 3.5 = 0.5 (left: 0.5 5)",
            "thoughts": [
              "4 + 3.5 = 7.5 (left: 5 7.5)",
              "5 - 3.5 = 1.5 (left: 1.5 4)",
              "5 / 3.5 = 1.43 (left: 1.43 4)",
              "4 - 3.5 = 0.5 (left: 0.5 5)",
              "4 / 3.5 = 1.14 (left: 1.14 5)",
              "5 * 3.5 = 17.5 (left: 4 17.5)",
              "4 * 3.5 = 14 (left: 5 14)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_7_4",
          "result": "PASS",
          "reason": "node_id 0_7_4 matches thought position.",
          "timestamp": "2025-05-29T13:42:25.955385",
          "event_type": "validation",
          "details": {
            "node_id": "0_7_4",
            "state": "4 / 3.5 = 1.14 (left: 1.14 5)",
            "thoughts": [
              "4 + 3.5 = 7.5 (left: 5 7.5)",
              "5 - 3.5 = 1.5 (left: 1.5 4)",
              "5 / 3.5 = 1.43 (left: 1.43 4)",
              "4 - 3.5 = 0.5 (left: 0.5 5)",
              "4 / 3.5 = 1.14 (left: 1.14 5)",
              "5 * 3.5 = 17.5 (left: 4 17.5)",
              "4 * 3.5 = 14 (left: 5 14)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_7_5",
          "result": "PASS",
          "reason": "node_id 0_7_5 matches thought position.",
          "timestamp": "2025-05-29T13:42:41.735319",
          "event_type": "validation",
          "details": {
            "node_id": "0_7_5",
            "state": "5 * 3.5 = 17.5 (left: 4 17.5)",
            "thoughts": [
              "4 + 3.5 = 7.5 (left: 5 7.5)",
              "5 - 3.5 = 1.5 (left: 1.5 4)",
              "5 / 3.5 = 1.43 (left: 1.43 4)",
              "4 - 3.5 = 0.5 (left: 0.5 5)",
              "4 / 3.5 = 1.14 (left: 1.14 5)",
              "5 * 3.5 = 17.5 (left: 4 17.5)",
              "4 * 3.5 = 14 (left: 5 14)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_7_6",
          "result": "PASS",
          "reason": "node_id 0_7_6 matches thought position.",
          "timestamp": "2025-05-29T13:42:50.776635",
          "event_type": "validation",
          "details": {
            "node_id": "0_7_6",
            "state": "4 * 3.5 = 14 (left: 5 14)",
            "thoughts": [
              "4 + 3.5 = 7.5 (left: 5 7.5)",
              "5 - 3.5 = 1.5 (left: 1.5 4)",
              "5 / 3.5 = 1.43 (left: 1.43 4)",
              "4 - 3.5 = 0.5 (left: 0.5 5)",
              "4 / 3.5 = 1.14 (left: 1.14 5)",
              "5 * 3.5 = 17.5 (left: 4 17.5)",
              "4 * 3.5 = 14 (left: 5 14)"
            ]
          }
        }
      ]
    },
    "node_state": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "node_state",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-29T13:33:16.304666",
          "event_type": "validation",
          "details": {
            "expected_state": "2 + 4 = 6 (left: 5 6 7)",
            "actual_state": "2 + 4 = 6 (left: 5 6 7)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-29T13:35:00.283690",
          "event_type": "validation",
          "details": {
            "expected_state": "5 + 2 = 7 (left: 4 7 7)",
            "actual_state": "5 + 2 = 7 (left: 4 7 7)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-29T13:36:31.680706",
          "event_type": "validation",
          "details": {
            "expected_state": "5 - 2 = 3 (left: 3 4 7)",
            "actual_state": "5 - 2 = 3 (left: 3 4 7)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-29T13:38:21.987769",
          "event_type": "validation",
          "details": {
            "expected_state": "5 / 2 = 2.5 (left: 2.5 4 7)",
            "actual_state": "5 / 2 = 2.5 (left: 2.5 4 7)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-29T13:39:56.708978",
          "event_type": "validation",
          "details": {
            "expected_state": "7 - 2 = 5 (left: 4 5 5)",
            "actual_state": "7 - 2 = 5 (left: 4 5 5)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_7",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-29T13:41:28.136280",
          "event_type": "validation",
          "details": {
            "expected_state": "7 / 2 = 3.5 (left: 3.5 4 5)",
            "actual_state": "7 / 2 = 3.5 (left: 3.5 4 5)"
          }
        }
      ]
    },
    "pruning": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pruning",
          "node_id": "0_0_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:33:28.596542",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:33:37.367930",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:33:45.488912",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:33:55.012073",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:34:03.371114",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:34:11.604938",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:34:21.233021",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_7",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:34:31.122395",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Value 2.001 meets threshold 3.0",
          "timestamp": "2025-05-29T13:34:43.848006",
          "event_type": "validation",
          "details": {
            "value": 2.001,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:35:10.949154",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:35:19.705935",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_2",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-29T13:35:28.414984",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:35:37.535598",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:35:46.074810",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:35:54.630110",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:36:03.332406",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_7",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:36:12.414919",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:36:43.975099",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:36:56.552905",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:37:06.764396",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:37:13.940339",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:37:25.722717",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:37:35.722185",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:37:47.619552",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_7",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:37:58.525918",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:38:33.120433",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:38:43.850671",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_2",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-29T13:38:53.712727",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:39:04.610132",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:39:14.402065",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:39:25.700609",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:39:34.803986",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:40:07.479675",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:40:17.909493",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:40:29.065920",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:40:37.739757",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:40:46.220713",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:40:56.493274",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:41:07.210260",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_7_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:41:40.358363",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_7_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:41:51.177888",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_7_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:42:04.370344",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_7_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:42:15.349706",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_7_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:42:25.955324",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_7_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:42:41.735262",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_7_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T13:42:50.776554",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        }
      ]
    },
    "backtracking_I": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_I",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_0; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-29T13:34:33.672888",
          "event_type": "validation",
          "details": {
            "popped_node": "0_0",
            "expected_popped": "0_0",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_0",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_2; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-29T13:36:14.882196",
          "event_type": "validation",
          "details": {
            "popped_node": "0_2",
            "expected_popped": "0_2",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_2",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_3; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-29T13:38:03.136451",
          "event_type": "validation",
          "details": {
            "popped_node": "0_3",
            "expected_popped": "0_3",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_3",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_4; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-29T13:39:36.928163",
          "event_type": "validation",
          "details": {
            "popped_node": "0_4",
            "expected_popped": "0_4",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_4",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_5; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-29T13:40:58.578642",
          "event_type": "validation",
          "details": {
            "popped_node": "0_5",
            "expected_popped": "0_5",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_5",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_7",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_7; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-29T13:42:54.963708",
          "event_type": "validation",
          "details": {
            "popped_node": "0_7",
            "expected_popped": "0_7",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_7",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
          "timestamp": "2025-05-29T13:42:57.277716",
          "event_type": "validation",
          "details": {
            "popped_node": "0",
            "expected_popped": "0",
            "backtrack_to": "None",
            "expected_parent": "None",
            "validation_details": [
              "Correctly popped expected node 0",
              "Correctly backtracking to parent 'None'"
            ]
          }
        }
      ]
    },
    "backtracking_III": {
      "FAIL": 1,
      "details": [
        {
          "check_name": "backtracking_III",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "All 8 children explored - valid backtrack",
          "timestamp": "2025-05-29T13:34:33.672910",
          "event_type": "validation",
          "details": {
            "total_thoughts": 8,
            "evaluated_children": 8
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "All 8 children explored - valid backtrack",
          "timestamp": "2025-05-29T13:36:14.882226",
          "event_type": "validation",
          "details": {
            "total_thoughts": 8,
            "evaluated_children": 8
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "All 8 children explored - valid backtrack",
          "timestamp": "2025-05-29T13:38:03.136481",
          "event_type": "validation",
          "details": {
            "total_thoughts": 8,
            "evaluated_children": 8
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "All 7 children explored - valid backtrack",
          "timestamp": "2025-05-29T13:39:36.928184",
          "event_type": "validation",
          "details": {
            "total_thoughts": 7,
            "evaluated_children": 7
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "All 6 children explored - valid backtrack",
          "timestamp": "2025-05-29T13:40:58.578681",
          "event_type": "validation",
          "details": {
            "total_thoughts": 6,
            "evaluated_children": 6
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_7",
          "result": "PASS",
          "reason": "All 7 children explored - valid backtrack",
          "timestamp": "2025-05-29T13:42:54.963731",
          "event_type": "validation",
          "details": {
            "total_thoughts": 7,
            "evaluated_children": 7
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0",
          "result": "FAIL",
          "reason": "Only 8 of 14 children explored",
          "timestamp": "2025-05-29T13:42:57.277740",
          "event_type": "validation",
          "details": {
            "total_thoughts": 14,
            "evaluated_children": 8
          }
        }
      ]
    },
    "backtracking_IV": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_IV",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_1 follows 0_0",
          "timestamp": "2025-05-29T13:34:43.847973",
          "event_type": "validation",
          "details": {
            "popped_node": "0_0",
            "current_node": "0_1",
            "expected_index": 1,
            "actual_index": 1
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_3 follows 0_2",
          "timestamp": "2025-05-29T13:36:23.615875",
          "event_type": "validation",
          "details": {
            "popped_node": "0_2",
            "current_node": "0_3",
            "expected_index": 3,
            "actual_index": 3
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_4 follows 0_3",
          "timestamp": "2025-05-29T13:38:12.558829",
          "event_type": "validation",
          "details": {
            "popped_node": "0_3",
            "current_node": "0_4",
            "expected_index": 4,
            "actual_index": 4
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_5 follows 0_4",
          "timestamp": "2025-05-29T13:39:49.590889",
          "event_type": "validation",
          "details": {
            "popped_node": "0_4",
            "current_node": "0_5",
            "expected_index": 5,
            "actual_index": 5
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_6",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_6 follows 0_5",
          "timestamp": "2025-05-29T13:41:07.210230",
          "event_type": "validation",
          "details": {
            "popped_node": "0_5",
            "current_node": "0_6",
            "expected_index": 6,
            "actual_index": 6
          }
        }
      ]
    },
    "looping_order": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "looping_order",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521091",
          "event_type": "validation",
          "details": {
            "state": "2 + 4 = 6 (left: 5 6 7)",
            "thought": "2 + 4 = 6 (left: 5 6 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521112",
          "event_type": "validation",
          "details": {
            "state": "4 - 2 = 2 (left: 2 5 7)",
            "thought": "4 - 2 = 2 (left: 2 5 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521117",
          "event_type": "validation",
          "details": {
            "state": "5 + 2 = 7 (left: 4 7 7)",
            "thought": "5 + 2 = 7 (left: 4 7 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521122",
          "event_type": "validation",
          "details": {
            "state": "5 - 2 = 3 (left: 3 4 7)",
            "thought": "5 - 2 = 3 (left: 3 4 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521128",
          "event_type": "validation",
          "details": {
            "state": "5 / 2 = 2.5 (left: 2.5 4 7)",
            "thought": "5 / 2 = 2.5 (left: 2.5 4 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521133",
          "event_type": "validation",
          "details": {
            "state": "7 - 2 = 5 (left: 4 5 5)",
            "thought": "7 - 2 = 5 (left: 4 5 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521137",
          "event_type": "validation",
          "details": {
            "state": "7 - 5 = 2 (left: 2 2 4)",
            "thought": "7 - 5 = 2 (left: 2 2 4)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_7",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521142",
          "event_type": "validation",
          "details": {
            "state": "7 / 2 = 3.5 (left: 3.5 4 5)",
            "thought": "7 / 2 = 3.5 (left: 3.5 4 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521169",
          "event_type": "validation",
          "details": {
            "state": "5 + 6 = 11 (left: 7 11)",
            "thought": "5 + 6 = 11 (left: 7 11)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521174",
          "event_type": "validation",
          "details": {
            "state": "5 * 6 = 30 (left: 7 30)",
            "thought": "5 * 6 = 30 (left: 7 30)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521178",
          "event_type": "validation",
          "details": {
            "state": "6 - 5 = 1 (left: 1 7)",
            "thought": "6 - 5 = 1 (left: 1 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521184",
          "event_type": "validation",
          "details": {
            "state": "7 - 5 = 2 (left: 2 6)",
            "thought": "7 - 5 = 2 (left: 2 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521188",
          "event_type": "validation",
          "details": {
            "state": "7 - 6 = 1 (left: 1 5)",
            "thought": "7 - 6 = 1 (left: 1 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521193",
          "event_type": "validation",
          "details": {
            "state": "6 + 7 = 13 (left: 5 13)",
            "thought": "6 + 7 = 13 (left: 5 13)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521199",
          "event_type": "validation",
          "details": {
            "state": "7 * 5 = 35 (left: 6 35)",
            "thought": "7 * 5 = 35 (left: 6 35)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_7",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521204",
          "event_type": "validation",
          "details": {
            "state": "7 * 6 = 42 (left: 5 42)",
            "thought": "7 * 6 = 42 (left: 5 42)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521253",
          "event_type": "validation",
          "details": {
            "state": "4 + 7 = 11 (left: 7 11)",
            "thought": "4 + 7 = 11 (left: 7 11)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521259",
          "event_type": "validation",
          "details": {
            "state": "7 - 4 = 3 (left: 3 7)",
            "thought": "7 - 4 = 3 (left: 3 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521263",
          "event_type": "validation",
          "details": {
            "state": "7 / 4 = 1.75 (left: 1.75 7)",
            "thought": "7 / 4 = 1.75 (left: 1.75 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521268",
          "event_type": "validation",
          "details": {
            "state": "4 * 7 = 28 (left: 7 28)",
            "thought": "4 * 7 = 28 (left: 7 28)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521272",
          "event_type": "validation",
          "details": {
            "state": "7 + 7 = 14 (left: 4 14)",
            "thought": "7 + 7 = 14 (left: 4 14)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521277",
          "event_type": "validation",
          "details": {
            "state": "7 - 7 = 0 (left: 0 4)",
            "thought": "7 - 7 = 0 (left: 0 4)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521282",
          "event_type": "validation",
          "details": {
            "state": "7 / 7 = 1 (left: 1 4)",
            "thought": "7 / 7 = 1 (left: 1 4)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_7",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521287",
          "event_type": "validation",
          "details": {
            "state": "7 * 7 = 49 (left: 4 49)",
            "thought": "7 * 7 = 49 (left: 4 49)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521325",
          "event_type": "validation",
          "details": {
            "state": "3 + 4 = 7 (left: 7 7)",
            "thought": "3 + 4 = 7 (left: 7 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521344",
          "event_type": "validation",
          "details": {
            "state": "4 - 3 = 1 (left: 1 7)",
            "thought": "4 - 3 = 1 (left: 1 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521353",
          "event_type": "validation",
          "details": {
            "state": "7 - 3 = 4 (left: 4 4)",
            "thought": "7 - 3 = 4 (left: 4 4)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521359",
          "event_type": "validation",
          "details": {
            "state": "7 - 4 = 3 (left: 3 3)",
            "thought": "7 - 4 = 3 (left: 3 3)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521364",
          "event_type": "validation",
          "details": {
            "state": "4 / 3 = 1.33 (left: 1.33 7)",
            "thought": "4 / 3 = 1.33 (left: 1.33 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521368",
          "event_type": "validation",
          "details": {
            "state": "7 / 3 = 2.33 (left: 2.33 4)",
            "thought": "7 / 3 = 2.33 (left: 2.33 4)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521374",
          "event_type": "validation",
          "details": {
            "state": "7 / 4 = 1.75 (left: 1.75 3)",
            "thought": "7 / 4 = 1.75 (left: 1.75 3)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_7",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521379",
          "event_type": "validation",
          "details": {
            "state": "3 * 4 = 12 (left: 7 12)",
            "thought": "3 * 4 = 12 (left: 7 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521420",
          "event_type": "validation",
          "details": {
            "state": "2.5 + 4 = 6.5 (left: 6.5 7)",
            "thought": "2.5 + 4 = 6.5 (left: 6.5 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521425",
          "event_type": "validation",
          "details": {
            "state": "4 - 2.5 = 1.5 (left: 1.5 7)",
            "thought": "4 - 2.5 = 1.5 (left: 1.5 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521430",
          "event_type": "validation",
          "details": {
            "state": "7 - 2.5 = 4.5 (left: 4 4.5)",
            "thought": "7 - 2.5 = 4.5 (left: 4 4.5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521435",
          "event_type": "validation",
          "details": {
            "state": "7 - 4 = 3 (left: 2.5 3)",
            "thought": "7 - 4 = 3 (left: 2.5 3)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521443",
          "event_type": "validation",
          "details": {
            "state": "7 / 2.5 = 2.8 (left: 2.8 4)",
            "thought": "7 / 2.5 = 2.8 (left: 2.8 4)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521449",
          "event_type": "validation",
          "details": {
            "state": "4 / 2.5 = 1.6 (left: 1.6 7)",
            "thought": "4 / 2.5 = 1.6 (left: 1.6 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521457",
          "event_type": "validation",
          "details": {
            "state": "2.5 * 4 = 10 (left: 7 10)",
            "thought": "2.5 * 4 = 10 (left: 7 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521507",
          "event_type": "validation",
          "details": {
            "state": "4 + 5 = 9 (left: 5 9)",
            "thought": "4 + 5 = 9 (left: 5 9)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521514",
          "event_type": "validation",
          "details": {
            "state": "5 - 4 = 1 (left: 1 5)",
            "thought": "5 - 4 = 1 (left: 1 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521519",
          "event_type": "validation",
          "details": {
            "state": "5 / 4 = 1.25 (left: 1.25 5)",
            "thought": "5 / 4 = 1.25 (left: 1.25 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521524",
          "event_type": "validation",
          "details": {
            "state": "4 * 5 = 20 (left: 5 20)",
            "thought": "4 * 5 = 20 (left: 5 20)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521529",
          "event_type": "validation",
          "details": {
            "state": "5 * 5 = 25 (left: 4 25)",
            "thought": "5 * 5 = 25 (left: 4 25)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521533",
          "event_type": "validation",
          "details": {
            "state": "5 + 5 = 10 (left: 4 10)",
            "thought": "5 + 5 = 10 (left: 4 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_7_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521567",
          "event_type": "validation",
          "details": {
            "state": "4 + 3.5 = 7.5 (left: 5 7.5)",
            "thought": "4 + 3.5 = 7.5 (left: 5 7.5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_7_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521572",
          "event_type": "validation",
          "details": {
            "state": "5 - 3.5 = 1.5 (left: 1.5 4)",
            "thought": "5 - 3.5 = 1.5 (left: 1.5 4)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_7_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521576",
          "event_type": "validation",
          "details": {
            "state": "5 / 3.5 = 1.43 (left: 1.43 4)",
            "thought": "5 / 3.5 = 1.43 (left: 1.43 4)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_7_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521585",
          "event_type": "validation",
          "details": {
            "state": "4 - 3.5 = 0.5 (left: 0.5 5)",
            "thought": "4 - 3.5 = 0.5 (left: 0.5 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_7_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521590",
          "event_type": "validation",
          "details": {
            "state": "4 / 3.5 = 1.14 (left: 1.14 5)",
            "thought": "4 / 3.5 = 1.14 (left: 1.14 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_7_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521594",
          "event_type": "validation",
          "details": {
            "state": "5 * 3.5 = 17.5 (left: 4 17.5)",
            "thought": "5 * 3.5 = 17.5 (left: 4 17.5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_7_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T13:42:59.521599",
          "event_type": "validation",
          "details": {
            "state": "4 * 3.5 = 14 (left: 5 14)",
            "thought": "4 * 3.5 = 14 (left: 5 14)"
          }
        }
      ]
    },
    "valid_search_trace": {
      "success_trace": false
    }
  },
  "detailed_results": [
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-29T13:33:07.852855",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State validation passed: Last thought '2 + 4 = 6 (left: 5 6 7)' found in parent's thoughts",
      "timestamp": "2025-05-29T13:33:07.852900",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '2 + 4 = 6 (left: 5 6 7)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "5 - 2 = 3 (left: 3 4 7)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "7 - 5 = 2 (left: 2 2 4)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "7 * 2 = 14 (left: 4 5 14)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 + 5 = 9 (left: 2 7 9)",
          "5 * 7 = 35 (left: 2 4 35)",
          "7 + 5 = 12 (left: 2 4 12)",
          "7 * 4 = 28 (left: 2 5 28)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "node_id 0_0 matches thought position.",
      "timestamp": "2025-05-29T13:33:07.852941",
      "event_type": "validation",
      "details": {
        "node_id": "0_0",
        "state": "2 + 4 = 6 (left: 5 6 7)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "5 - 2 = 3 (left: 3 4 7)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "7 - 5 = 2 (left: 2 2 4)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "7 * 2 = 14 (left: 4 5 14)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 + 5 = 9 (left: 2 7 9)",
          "5 * 7 = 35 (left: 2 4 35)",
          "7 + 5 = 12 (left: 2 4 12)",
          "7 * 4 = 28 (left: 2 5 28)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-29T13:33:16.304666",
      "event_type": "validation",
      "details": {
        "expected_state": "2 + 4 = 6 (left: 5 6 7)",
        "actual_state": "2 + 4 = 6 (left: 5 6 7)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:33:28.596542",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_0",
      "result": "PASS",
      "reason": "node_id 0_0_0 matches thought position.",
      "timestamp": "2025-05-29T13:33:28.596608",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_0",
        "state": "5 + 6 = 11 (left: 7 11)",
        "thoughts": [
          "5 + 6 = 11 (left: 7 11)",
          "5 * 6 = 30 (left: 7 30)",
          "6 - 5 = 1 (left: 1 7)",
          "7 - 5 = 2 (left: 2 6)",
          "7 - 6 = 1 (left: 1 5)",
          "6 + 7 = 13 (left: 5 13)",
          "7 * 5 = 35 (left: 6 35)",
          "7 * 6 = 42 (left: 5 42)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:33:37.367930",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "node_id 0_0_1 matches thought position.",
      "timestamp": "2025-05-29T13:33:37.368003",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_1",
        "state": "5 * 6 = 30 (left: 7 30)",
        "thoughts": [
          "5 + 6 = 11 (left: 7 11)",
          "5 * 6 = 30 (left: 7 30)",
          "6 - 5 = 1 (left: 1 7)",
          "7 - 5 = 2 (left: 2 6)",
          "7 - 6 = 1 (left: 1 5)",
          "6 + 7 = 13 (left: 5 13)",
          "7 * 5 = 35 (left: 6 35)",
          "7 * 6 = 42 (left: 5 42)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:33:45.488912",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_2",
      "result": "PASS",
      "reason": "node_id 0_0_2 matches thought position.",
      "timestamp": "2025-05-29T13:33:45.488976",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_2",
        "state": "6 - 5 = 1 (left: 1 7)",
        "thoughts": [
          "5 + 6 = 11 (left: 7 11)",
          "5 * 6 = 30 (left: 7 30)",
          "6 - 5 = 1 (left: 1 7)",
          "7 - 5 = 2 (left: 2 6)",
          "7 - 6 = 1 (left: 1 5)",
          "6 + 7 = 13 (left: 5 13)",
          "7 * 5 = 35 (left: 6 35)",
          "7 * 6 = 42 (left: 5 42)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:33:55.012073",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_3",
      "result": "PASS",
      "reason": "node_id 0_0_3 matches thought position.",
      "timestamp": "2025-05-29T13:33:55.012140",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_3",
        "state": "7 - 5 = 2 (left: 2 6)",
        "thoughts": [
          "5 + 6 = 11 (left: 7 11)",
          "5 * 6 = 30 (left: 7 30)",
          "6 - 5 = 1 (left: 1 7)",
          "7 - 5 = 2 (left: 2 6)",
          "7 - 6 = 1 (left: 1 5)",
          "6 + 7 = 13 (left: 5 13)",
          "7 * 5 = 35 (left: 6 35)",
          "7 * 6 = 42 (left: 5 42)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:34:03.371114",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_4",
      "result": "PASS",
      "reason": "node_id 0_0_4 matches thought position.",
      "timestamp": "2025-05-29T13:34:03.371178",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_4",
        "state": "7 - 6 = 1 (left: 1 5)",
        "thoughts": [
          "5 + 6 = 11 (left: 7 11)",
          "5 * 6 = 30 (left: 7 30)",
          "6 - 5 = 1 (left: 1 7)",
          "7 - 5 = 2 (left: 2 6)",
          "7 - 6 = 1 (left: 1 5)",
          "6 + 7 = 13 (left: 5 13)",
          "7 * 5 = 35 (left: 6 35)",
          "7 * 6 = 42 (left: 5 42)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:34:11.604938",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_5",
      "result": "PASS",
      "reason": "node_id 0_0_5 matches thought position.",
      "timestamp": "2025-05-29T13:34:11.605001",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_5",
        "state": "6 + 7 = 13 (left: 5 13)",
        "thoughts": [
          "5 + 6 = 11 (left: 7 11)",
          "5 * 6 = 30 (left: 7 30)",
          "6 - 5 = 1 (left: 1 7)",
          "7 - 5 = 2 (left: 2 6)",
          "7 - 6 = 1 (left: 1 5)",
          "6 + 7 = 13 (left: 5 13)",
          "7 * 5 = 35 (left: 6 35)",
          "7 * 6 = 42 (left: 5 42)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:34:21.233021",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_6",
      "result": "PASS",
      "reason": "node_id 0_0_6 matches thought position.",
      "timestamp": "2025-05-29T13:34:21.233089",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_6",
        "state": "7 * 5 = 35 (left: 6 35)",
        "thoughts": [
          "5 + 6 = 11 (left: 7 11)",
          "5 * 6 = 30 (left: 7 30)",
          "6 - 5 = 1 (left: 1 7)",
          "7 - 5 = 2 (left: 2 6)",
          "7 - 6 = 1 (left: 1 5)",
          "6 + 7 = 13 (left: 5 13)",
          "7 * 5 = 35 (left: 6 35)",
          "7 * 6 = 42 (left: 5 42)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_7",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:34:31.122395",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_7",
      "result": "PASS",
      "reason": "node_id 0_0_7 matches thought position.",
      "timestamp": "2025-05-29T13:34:31.122465",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_7",
        "state": "7 * 6 = 42 (left: 5 42)",
        "thoughts": [
          "5 + 6 = 11 (left: 7 11)",
          "5 * 6 = 30 (left: 7 30)",
          "6 - 5 = 1 (left: 1 7)",
          "7 - 5 = 2 (left: 2 6)",
          "7 - 6 = 1 (left: 1 5)",
          "6 + 7 = 13 (left: 5 13)",
          "7 * 5 = 35 (left: 6 35)",
          "7 * 6 = 42 (left: 5 42)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_0; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-29T13:34:33.672888",
      "event_type": "validation",
      "details": {
        "popped_node": "0_0",
        "expected_popped": "0_0",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_0",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "All 8 children explored - valid backtrack",
      "timestamp": "2025-05-29T13:34:33.672910",
      "event_type": "validation",
      "details": {
        "total_thoughts": 8,
        "evaluated_children": 8
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_1 follows 0_0",
      "timestamp": "2025-05-29T13:34:43.847973",
      "event_type": "validation",
      "details": {
        "popped_node": "0_0",
        "current_node": "0_1",
        "expected_index": 1,
        "actual_index": 1
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Value 2.001 meets threshold 3.0",
      "timestamp": "2025-05-29T13:34:43.848006",
      "event_type": "validation",
      "details": {
        "value": 2.001,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "node_id 0_1 matches thought position.",
      "timestamp": "2025-05-29T13:34:43.848036",
      "event_type": "validation",
      "details": {
        "node_id": "0_1",
        "state": "4 - 2 = 2 (left: 2 5 7)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "5 - 2 = 3 (left: 3 4 7)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "7 - 5 = 2 (left: 2 2 4)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "7 * 2 = 14 (left: 4 5 14)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 + 5 = 9 (left: 2 7 9)",
          "5 * 7 = 35 (left: 2 4 35)",
          "7 + 5 = 12 (left: 2 4 12)",
          "7 * 4 = 28 (left: 2 5 28)"
        ]
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-29T13:34:52.475978",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "State validation passed: Last thought '5 + 2 = 7 (left: 4 7 7)' found in parent's thoughts",
      "timestamp": "2025-05-29T13:34:52.476022",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '5 + 2 = 7 (left: 4 7 7)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "5 - 2 = 3 (left: 3 4 7)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "7 - 5 = 2 (left: 2 2 4)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "7 * 2 = 14 (left: 4 5 14)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 + 5 = 9 (left: 2 7 9)",
          "5 * 7 = 35 (left: 2 4 35)",
          "7 + 5 = 12 (left: 2 4 12)",
          "7 * 4 = 28 (left: 2 5 28)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "node_id 0_2 matches thought position.",
      "timestamp": "2025-05-29T13:34:52.476060",
      "event_type": "validation",
      "details": {
        "node_id": "0_2",
        "state": "5 + 2 = 7 (left: 4 7 7)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "5 - 2 = 3 (left: 3 4 7)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "7 - 5 = 2 (left: 2 2 4)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "7 * 2 = 14 (left: 4 5 14)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 + 5 = 9 (left: 2 7 9)",
          "5 * 7 = 35 (left: 2 4 35)",
          "7 + 5 = 12 (left: 2 4 12)",
          "7 * 4 = 28 (left: 2 5 28)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-29T13:35:00.283690",
      "event_type": "validation",
      "details": {
        "expected_state": "5 + 2 = 7 (left: 4 7 7)",
        "actual_state": "5 + 2 = 7 (left: 4 7 7)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:35:10.949154",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_0",
      "result": "PASS",
      "reason": "node_id 0_2_0 matches thought position.",
      "timestamp": "2025-05-29T13:35:10.949215",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_0",
        "state": "4 + 7 = 11 (left: 7 11)",
        "thoughts": [
          "4 + 7 = 11 (left: 7 11)",
          "7 - 4 = 3 (left: 3 7)",
          "7 / 4 = 1.75 (left: 1.75 7)",
          "4 * 7 = 28 (left: 7 28)",
          "7 + 7 = 14 (left: 4 14)",
          "7 - 7 = 0 (left: 0 4)",
          "7 / 7 = 1 (left: 1 4)",
          "7 * 7 = 49 (left: 4 49)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:35:19.705935",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_1",
      "result": "PASS",
      "reason": "node_id 0_2_1 matches thought position.",
      "timestamp": "2025-05-29T13:35:19.705995",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_1",
        "state": "7 - 4 = 3 (left: 3 7)",
        "thoughts": [
          "4 + 7 = 11 (left: 7 11)",
          "7 - 4 = 3 (left: 3 7)",
          "7 / 4 = 1.75 (left: 1.75 7)",
          "4 * 7 = 28 (left: 7 28)",
          "7 + 7 = 14 (left: 4 14)",
          "7 - 7 = 0 (left: 0 4)",
          "7 / 7 = 1 (left: 1 4)",
          "7 * 7 = 49 (left: 4 49)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_2",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-29T13:35:28.414984",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_2",
      "result": "PASS",
      "reason": "node_id 0_2_2 matches thought position.",
      "timestamp": "2025-05-29T13:35:28.415043",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_2",
        "state": "7 / 4 = 1.75 (left: 1.75 7)",
        "thoughts": [
          "4 + 7 = 11 (left: 7 11)",
          "7 - 4 = 3 (left: 3 7)",
          "7 / 4 = 1.75 (left: 1.75 7)",
          "4 * 7 = 28 (left: 7 28)",
          "7 + 7 = 14 (left: 4 14)",
          "7 - 7 = 0 (left: 0 4)",
          "7 / 7 = 1 (left: 1 4)",
          "7 * 7 = 49 (left: 4 49)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:35:37.535598",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_3",
      "result": "PASS",
      "reason": "node_id 0_2_3 matches thought position.",
      "timestamp": "2025-05-29T13:35:37.535672",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_3",
        "state": "4 * 7 = 28 (left: 7 28)",
        "thoughts": [
          "4 + 7 = 11 (left: 7 11)",
          "7 - 4 = 3 (left: 3 7)",
          "7 / 4 = 1.75 (left: 1.75 7)",
          "4 * 7 = 28 (left: 7 28)",
          "7 + 7 = 14 (left: 4 14)",
          "7 - 7 = 0 (left: 0 4)",
          "7 / 7 = 1 (left: 1 4)",
          "7 * 7 = 49 (left: 4 49)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:35:46.074810",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_4",
      "result": "PASS",
      "reason": "node_id 0_2_4 matches thought position.",
      "timestamp": "2025-05-29T13:35:46.074873",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_4",
        "state": "7 + 7 = 14 (left: 4 14)",
        "thoughts": [
          "4 + 7 = 11 (left: 7 11)",
          "7 - 4 = 3 (left: 3 7)",
          "7 / 4 = 1.75 (left: 1.75 7)",
          "4 * 7 = 28 (left: 7 28)",
          "7 + 7 = 14 (left: 4 14)",
          "7 - 7 = 0 (left: 0 4)",
          "7 / 7 = 1 (left: 1 4)",
          "7 * 7 = 49 (left: 4 49)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:35:54.630110",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_5",
      "result": "PASS",
      "reason": "node_id 0_2_5 matches thought position.",
      "timestamp": "2025-05-29T13:35:54.630175",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_5",
        "state": "7 - 7 = 0 (left: 0 4)",
        "thoughts": [
          "4 + 7 = 11 (left: 7 11)",
          "7 - 4 = 3 (left: 3 7)",
          "7 / 4 = 1.75 (left: 1.75 7)",
          "4 * 7 = 28 (left: 7 28)",
          "7 + 7 = 14 (left: 4 14)",
          "7 - 7 = 0 (left: 0 4)",
          "7 / 7 = 1 (left: 1 4)",
          "7 * 7 = 49 (left: 4 49)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:36:03.332406",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_6",
      "result": "PASS",
      "reason": "node_id 0_2_6 matches thought position.",
      "timestamp": "2025-05-29T13:36:03.332474",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_6",
        "state": "7 / 7 = 1 (left: 1 4)",
        "thoughts": [
          "4 + 7 = 11 (left: 7 11)",
          "7 - 4 = 3 (left: 3 7)",
          "7 / 4 = 1.75 (left: 1.75 7)",
          "4 * 7 = 28 (left: 7 28)",
          "7 + 7 = 14 (left: 4 14)",
          "7 - 7 = 0 (left: 0 4)",
          "7 / 7 = 1 (left: 1 4)",
          "7 * 7 = 49 (left: 4 49)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_7",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:36:12.414919",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_7",
      "result": "PASS",
      "reason": "node_id 0_2_7 matches thought position.",
      "timestamp": "2025-05-29T13:36:12.414981",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_7",
        "state": "7 * 7 = 49 (left: 4 49)",
        "thoughts": [
          "4 + 7 = 11 (left: 7 11)",
          "7 - 4 = 3 (left: 3 7)",
          "7 / 4 = 1.75 (left: 1.75 7)",
          "4 * 7 = 28 (left: 7 28)",
          "7 + 7 = 14 (left: 4 14)",
          "7 - 7 = 0 (left: 0 4)",
          "7 / 7 = 1 (left: 1 4)",
          "7 * 7 = 49 (left: 4 49)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_2; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-29T13:36:14.882196",
      "event_type": "validation",
      "details": {
        "popped_node": "0_2",
        "expected_popped": "0_2",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_2",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "All 8 children explored - valid backtrack",
      "timestamp": "2025-05-29T13:36:14.882226",
      "event_type": "validation",
      "details": {
        "total_thoughts": 8,
        "evaluated_children": 8
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-29T13:36:23.615735",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "State validation passed: Last thought '5 - 2 = 3 (left: 3 4 7)' found in parent's thoughts",
      "timestamp": "2025-05-29T13:36:23.615835",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '5 - 2 = 3 (left: 3 4 7)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "5 - 2 = 3 (left: 3 4 7)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "7 - 5 = 2 (left: 2 2 4)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "7 * 2 = 14 (left: 4 5 14)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 + 5 = 9 (left: 2 7 9)",
          "5 * 7 = 35 (left: 2 4 35)",
          "7 + 5 = 12 (left: 2 4 12)",
          "7 * 4 = 28 (left: 2 5 28)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_3 follows 0_2",
      "timestamp": "2025-05-29T13:36:23.615875",
      "event_type": "validation",
      "details": {
        "popped_node": "0_2",
        "current_node": "0_3",
        "expected_index": 3,
        "actual_index": 3
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "node_id 0_3 matches thought position.",
      "timestamp": "2025-05-29T13:36:23.615908",
      "event_type": "validation",
      "details": {
        "node_id": "0_3",
        "state": "5 - 2 = 3 (left: 3 4 7)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "5 - 2 = 3 (left: 3 4 7)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "7 - 5 = 2 (left: 2 2 4)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "7 * 2 = 14 (left: 4 5 14)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 + 5 = 9 (left: 2 7 9)",
          "5 * 7 = 35 (left: 2 4 35)",
          "7 + 5 = 12 (left: 2 4 12)",
          "7 * 4 = 28 (left: 2 5 28)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-29T13:36:31.680706",
      "event_type": "validation",
      "details": {
        "expected_state": "5 - 2 = 3 (left: 3 4 7)",
        "actual_state": "5 - 2 = 3 (left: 3 4 7)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:36:43.975099",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_0",
      "result": "PASS",
      "reason": "node_id 0_3_0 matches thought position.",
      "timestamp": "2025-05-29T13:36:43.975154",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_0",
        "state": "3 + 4 = 7 (left: 7 7)",
        "thoughts": [
          "3 + 4 = 7 (left: 7 7)",
          "4 - 3 = 1 (left: 1 7)",
          "7 - 3 = 4 (left: 4 4)",
          "7 - 4 = 3 (left: 3 3)",
          "4 / 3 = 1.33 (left: 1.33 7)",
          "7 / 3 = 2.33 (left: 2.33 4)",
          "7 / 4 = 1.75 (left: 1.75 3)",
          "3 * 4 = 12 (left: 7 12)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:36:56.552905",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_1",
      "result": "PASS",
      "reason": "node_id 0_3_1 matches thought position.",
      "timestamp": "2025-05-29T13:36:56.552967",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_1",
        "state": "4 - 3 = 1 (left: 1 7)",
        "thoughts": [
          "3 + 4 = 7 (left: 7 7)",
          "4 - 3 = 1 (left: 1 7)",
          "7 - 3 = 4 (left: 4 4)",
          "7 - 4 = 3 (left: 3 3)",
          "4 / 3 = 1.33 (left: 1.33 7)",
          "7 / 3 = 2.33 (left: 2.33 4)",
          "7 / 4 = 1.75 (left: 1.75 3)",
          "3 * 4 = 12 (left: 7 12)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:37:06.764396",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_2",
      "result": "PASS",
      "reason": "node_id 0_3_2 matches thought position.",
      "timestamp": "2025-05-29T13:37:06.764462",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_2",
        "state": "7 - 3 = 4 (left: 4 4)",
        "thoughts": [
          "3 + 4 = 7 (left: 7 7)",
          "4 - 3 = 1 (left: 1 7)",
          "7 - 3 = 4 (left: 4 4)",
          "7 - 4 = 3 (left: 3 3)",
          "4 / 3 = 1.33 (left: 1.33 7)",
          "7 / 3 = 2.33 (left: 2.33 4)",
          "7 / 4 = 1.75 (left: 1.75 3)",
          "3 * 4 = 12 (left: 7 12)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:37:13.940339",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_3",
      "result": "PASS",
      "reason": "node_id 0_3_3 matches thought position.",
      "timestamp": "2025-05-29T13:37:13.940400",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_3",
        "state": "7 - 4 = 3 (left: 3 3)",
        "thoughts": [
          "3 + 4 = 7 (left: 7 7)",
          "4 - 3 = 1 (left: 1 7)",
          "7 - 3 = 4 (left: 4 4)",
          "7 - 4 = 3 (left: 3 3)",
          "4 / 3 = 1.33 (left: 1.33 7)",
          "7 / 3 = 2.33 (left: 2.33 4)",
          "7 / 4 = 1.75 (left: 1.75 3)",
          "3 * 4 = 12 (left: 7 12)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:37:25.722717",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_4",
      "result": "PASS",
      "reason": "node_id 0_3_4 matches thought position.",
      "timestamp": "2025-05-29T13:37:25.722784",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_4",
        "state": "4 / 3 = 1.33 (left: 1.33 7)",
        "thoughts": [
          "3 + 4 = 7 (left: 7 7)",
          "4 - 3 = 1 (left: 1 7)",
          "7 - 3 = 4 (left: 4 4)",
          "7 - 4 = 3 (left: 3 3)",
          "4 / 3 = 1.33 (left: 1.33 7)",
          "7 / 3 = 2.33 (left: 2.33 4)",
          "7 / 4 = 1.75 (left: 1.75 3)",
          "3 * 4 = 12 (left: 7 12)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:37:35.722185",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_5",
      "result": "PASS",
      "reason": "node_id 0_3_5 matches thought position.",
      "timestamp": "2025-05-29T13:37:35.722244",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_5",
        "state": "7 / 3 = 2.33 (left: 2.33 4)",
        "thoughts": [
          "3 + 4 = 7 (left: 7 7)",
          "4 - 3 = 1 (left: 1 7)",
          "7 - 3 = 4 (left: 4 4)",
          "7 - 4 = 3 (left: 3 3)",
          "4 / 3 = 1.33 (left: 1.33 7)",
          "7 / 3 = 2.33 (left: 2.33 4)",
          "7 / 4 = 1.75 (left: 1.75 3)",
          "3 * 4 = 12 (left: 7 12)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:37:47.619552",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_6",
      "result": "PASS",
      "reason": "node_id 0_3_6 matches thought position.",
      "timestamp": "2025-05-29T13:37:47.619626",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_6",
        "state": "7 / 4 = 1.75 (left: 1.75 3)",
        "thoughts": [
          "3 + 4 = 7 (left: 7 7)",
          "4 - 3 = 1 (left: 1 7)",
          "7 - 3 = 4 (left: 4 4)",
          "7 - 4 = 3 (left: 3 3)",
          "4 / 3 = 1.33 (left: 1.33 7)",
          "7 / 3 = 2.33 (left: 2.33 4)",
          "7 / 4 = 1.75 (left: 1.75 3)",
          "3 * 4 = 12 (left: 7 12)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_7",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:37:58.525918",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_7",
      "result": "PASS",
      "reason": "node_id 0_3_7 matches thought position.",
      "timestamp": "2025-05-29T13:37:58.525984",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_7",
        "state": "3 * 4 = 12 (left: 7 12)",
        "thoughts": [
          "3 + 4 = 7 (left: 7 7)",
          "4 - 3 = 1 (left: 1 7)",
          "7 - 3 = 4 (left: 4 4)",
          "7 - 4 = 3 (left: 3 3)",
          "4 / 3 = 1.33 (left: 1.33 7)",
          "7 / 3 = 2.33 (left: 2.33 4)",
          "7 / 4 = 1.75 (left: 1.75 3)",
          "3 * 4 = 12 (left: 7 12)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_3; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-29T13:38:03.136451",
      "event_type": "validation",
      "details": {
        "popped_node": "0_3",
        "expected_popped": "0_3",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_3",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "All 8 children explored - valid backtrack",
      "timestamp": "2025-05-29T13:38:03.136481",
      "event_type": "validation",
      "details": {
        "total_thoughts": 8,
        "evaluated_children": 8
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-29T13:38:12.558736",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "State validation passed: Last thought '5 / 2 = 2.5 (left: 2.5 4 7)' found in parent's thoughts",
      "timestamp": "2025-05-29T13:38:12.558788",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '5 / 2 = 2.5 (left: 2.5 4 7)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "5 - 2 = 3 (left: 3 4 7)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "7 - 5 = 2 (left: 2 2 4)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "7 * 2 = 14 (left: 4 5 14)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 + 5 = 9 (left: 2 7 9)",
          "5 * 7 = 35 (left: 2 4 35)",
          "7 + 5 = 12 (left: 2 4 12)",
          "7 * 4 = 28 (left: 2 5 28)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_4 follows 0_3",
      "timestamp": "2025-05-29T13:38:12.558829",
      "event_type": "validation",
      "details": {
        "popped_node": "0_3",
        "current_node": "0_4",
        "expected_index": 4,
        "actual_index": 4
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "node_id 0_4 matches thought position.",
      "timestamp": "2025-05-29T13:38:12.558861",
      "event_type": "validation",
      "details": {
        "node_id": "0_4",
        "state": "5 / 2 = 2.5 (left: 2.5 4 7)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "5 - 2 = 3 (left: 3 4 7)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "7 - 5 = 2 (left: 2 2 4)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "7 * 2 = 14 (left: 4 5 14)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 + 5 = 9 (left: 2 7 9)",
          "5 * 7 = 35 (left: 2 4 35)",
          "7 + 5 = 12 (left: 2 4 12)",
          "7 * 4 = 28 (left: 2 5 28)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-29T13:38:21.987769",
      "event_type": "validation",
      "details": {
        "expected_state": "5 / 2 = 2.5 (left: 2.5 4 7)",
        "actual_state": "5 / 2 = 2.5 (left: 2.5 4 7)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:38:33.120433",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_0",
      "result": "PASS",
      "reason": "node_id 0_4_0 matches thought position.",
      "timestamp": "2025-05-29T13:38:33.120497",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_0",
        "state": "2.5 + 4 = 6.5 (left: 6.5 7)",
        "thoughts": [
          "2.5 + 4 = 6.5 (left: 6.5 7)",
          "4 - 2.5 = 1.5 (left: 1.5 7)",
          "7 - 2.5 = 4.5 (left: 4 4.5)",
          "7 - 4 = 3 (left: 2.5 3)",
          "7 / 2.5 = 2.8 (left: 2.8 4)",
          "4 / 2.5 = 1.6 (left: 1.6 7)",
          "2.5 * 4 = 10 (left: 7 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:38:43.850671",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_1",
      "result": "PASS",
      "reason": "node_id 0_4_1 matches thought position.",
      "timestamp": "2025-05-29T13:38:43.850731",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_1",
        "state": "4 - 2.5 = 1.5 (left: 1.5 7)",
        "thoughts": [
          "2.5 + 4 = 6.5 (left: 6.5 7)",
          "4 - 2.5 = 1.5 (left: 1.5 7)",
          "7 - 2.5 = 4.5 (left: 4 4.5)",
          "7 - 4 = 3 (left: 2.5 3)",
          "7 / 2.5 = 2.8 (left: 2.8 4)",
          "4 / 2.5 = 1.6 (left: 1.6 7)",
          "2.5 * 4 = 10 (left: 7 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_2",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-29T13:38:53.712727",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_2",
      "result": "PASS",
      "reason": "node_id 0_4_2 matches thought position.",
      "timestamp": "2025-05-29T13:38:53.712790",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_2",
        "state": "7 - 2.5 = 4.5 (left: 4 4.5)",
        "thoughts": [
          "2.5 + 4 = 6.5 (left: 6.5 7)",
          "4 - 2.5 = 1.5 (left: 1.5 7)",
          "7 - 2.5 = 4.5 (left: 4 4.5)",
          "7 - 4 = 3 (left: 2.5 3)",
          "7 / 2.5 = 2.8 (left: 2.8 4)",
          "4 / 2.5 = 1.6 (left: 1.6 7)",
          "2.5 * 4 = 10 (left: 7 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:39:04.610132",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_3",
      "result": "PASS",
      "reason": "node_id 0_4_3 matches thought position.",
      "timestamp": "2025-05-29T13:39:04.610190",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_3",
        "state": "7 - 4 = 3 (left: 2.5 3)",
        "thoughts": [
          "2.5 + 4 = 6.5 (left: 6.5 7)",
          "4 - 2.5 = 1.5 (left: 1.5 7)",
          "7 - 2.5 = 4.5 (left: 4 4.5)",
          "7 - 4 = 3 (left: 2.5 3)",
          "7 / 2.5 = 2.8 (left: 2.8 4)",
          "4 / 2.5 = 1.6 (left: 1.6 7)",
          "2.5 * 4 = 10 (left: 7 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:39:14.402065",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_4",
      "result": "PASS",
      "reason": "node_id 0_4_4 matches thought position.",
      "timestamp": "2025-05-29T13:39:14.402126",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_4",
        "state": "7 / 2.5 = 2.8 (left: 2.8 4)",
        "thoughts": [
          "2.5 + 4 = 6.5 (left: 6.5 7)",
          "4 - 2.5 = 1.5 (left: 1.5 7)",
          "7 - 2.5 = 4.5 (left: 4 4.5)",
          "7 - 4 = 3 (left: 2.5 3)",
          "7 / 2.5 = 2.8 (left: 2.8 4)",
          "4 / 2.5 = 1.6 (left: 1.6 7)",
          "2.5 * 4 = 10 (left: 7 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:39:25.700609",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_5",
      "result": "PASS",
      "reason": "node_id 0_4_5 matches thought position.",
      "timestamp": "2025-05-29T13:39:25.700684",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_5",
        "state": "4 / 2.5 = 1.6 (left: 1.6 7)",
        "thoughts": [
          "2.5 + 4 = 6.5 (left: 6.5 7)",
          "4 - 2.5 = 1.5 (left: 1.5 7)",
          "7 - 2.5 = 4.5 (left: 4 4.5)",
          "7 - 4 = 3 (left: 2.5 3)",
          "7 / 2.5 = 2.8 (left: 2.8 4)",
          "4 / 2.5 = 1.6 (left: 1.6 7)",
          "2.5 * 4 = 10 (left: 7 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:39:34.803986",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_6",
      "result": "PASS",
      "reason": "node_id 0_4_6 matches thought position.",
      "timestamp": "2025-05-29T13:39:34.804044",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_6",
        "state": "2.5 * 4 = 10 (left: 7 10)",
        "thoughts": [
          "2.5 + 4 = 6.5 (left: 6.5 7)",
          "4 - 2.5 = 1.5 (left: 1.5 7)",
          "7 - 2.5 = 4.5 (left: 4 4.5)",
          "7 - 4 = 3 (left: 2.5 3)",
          "7 / 2.5 = 2.8 (left: 2.8 4)",
          "4 / 2.5 = 1.6 (left: 1.6 7)",
          "2.5 * 4 = 10 (left: 7 10)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_4; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-29T13:39:36.928163",
      "event_type": "validation",
      "details": {
        "popped_node": "0_4",
        "expected_popped": "0_4",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_4",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "All 7 children explored - valid backtrack",
      "timestamp": "2025-05-29T13:39:36.928184",
      "event_type": "validation",
      "details": {
        "total_thoughts": 7,
        "evaluated_children": 7
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-29T13:39:49.590806",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "State validation passed: Last thought '7 - 2 = 5 (left: 4 5 5)' found in parent's thoughts",
      "timestamp": "2025-05-29T13:39:49.590851",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '7 - 2 = 5 (left: 4 5 5)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "5 - 2 = 3 (left: 3 4 7)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "7 - 5 = 2 (left: 2 2 4)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "7 * 2 = 14 (left: 4 5 14)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 + 5 = 9 (left: 2 7 9)",
          "5 * 7 = 35 (left: 2 4 35)",
          "7 + 5 = 12 (left: 2 4 12)",
          "7 * 4 = 28 (left: 2 5 28)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_5 follows 0_4",
      "timestamp": "2025-05-29T13:39:49.590889",
      "event_type": "validation",
      "details": {
        "popped_node": "0_4",
        "current_node": "0_5",
        "expected_index": 5,
        "actual_index": 5
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "node_id 0_5 matches thought position.",
      "timestamp": "2025-05-29T13:39:49.590918",
      "event_type": "validation",
      "details": {
        "node_id": "0_5",
        "state": "7 - 2 = 5 (left: 4 5 5)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "5 - 2 = 3 (left: 3 4 7)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "7 - 5 = 2 (left: 2 2 4)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "7 * 2 = 14 (left: 4 5 14)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 + 5 = 9 (left: 2 7 9)",
          "5 * 7 = 35 (left: 2 4 35)",
          "7 + 5 = 12 (left: 2 4 12)",
          "7 * 4 = 28 (left: 2 5 28)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-29T13:39:56.708978",
      "event_type": "validation",
      "details": {
        "expected_state": "7 - 2 = 5 (left: 4 5 5)",
        "actual_state": "7 - 2 = 5 (left: 4 5 5)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:40:07.479675",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_0",
      "result": "PASS",
      "reason": "node_id 0_5_0 matches thought position.",
      "timestamp": "2025-05-29T13:40:07.479733",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_0",
        "state": "4 + 5 = 9 (left: 5 9)",
        "thoughts": [
          "4 + 5 = 9 (left: 5 9)",
          "5 - 4 = 1 (left: 1 5)",
          "5 / 4 = 1.25 (left: 1.25 5)",
          "4 * 5 = 20 (left: 5 20)",
          "5 * 5 = 25 (left: 4 25)",
          "5 + 5 = 10 (left: 4 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:40:17.909493",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_1",
      "result": "PASS",
      "reason": "node_id 0_5_1 matches thought position.",
      "timestamp": "2025-05-29T13:40:17.909556",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_1",
        "state": "5 - 4 = 1 (left: 1 5)",
        "thoughts": [
          "4 + 5 = 9 (left: 5 9)",
          "5 - 4 = 1 (left: 1 5)",
          "5 / 4 = 1.25 (left: 1.25 5)",
          "4 * 5 = 20 (left: 5 20)",
          "5 * 5 = 25 (left: 4 25)",
          "5 + 5 = 10 (left: 4 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:40:29.065920",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_2",
      "result": "PASS",
      "reason": "node_id 0_5_2 matches thought position.",
      "timestamp": "2025-05-29T13:40:29.065989",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_2",
        "state": "5 / 4 = 1.25 (left: 1.25 5)",
        "thoughts": [
          "4 + 5 = 9 (left: 5 9)",
          "5 - 4 = 1 (left: 1 5)",
          "5 / 4 = 1.25 (left: 1.25 5)",
          "4 * 5 = 20 (left: 5 20)",
          "5 * 5 = 25 (left: 4 25)",
          "5 + 5 = 10 (left: 4 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:40:37.739757",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_3",
      "result": "PASS",
      "reason": "node_id 0_5_3 matches thought position.",
      "timestamp": "2025-05-29T13:40:37.739818",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_3",
        "state": "4 * 5 = 20 (left: 5 20)",
        "thoughts": [
          "4 + 5 = 9 (left: 5 9)",
          "5 - 4 = 1 (left: 1 5)",
          "5 / 4 = 1.25 (left: 1.25 5)",
          "4 * 5 = 20 (left: 5 20)",
          "5 * 5 = 25 (left: 4 25)",
          "5 + 5 = 10 (left: 4 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:40:46.220713",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_4",
      "result": "PASS",
      "reason": "node_id 0_5_4 matches thought position.",
      "timestamp": "2025-05-29T13:40:46.220784",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_4",
        "state": "5 * 5 = 25 (left: 4 25)",
        "thoughts": [
          "4 + 5 = 9 (left: 5 9)",
          "5 - 4 = 1 (left: 1 5)",
          "5 / 4 = 1.25 (left: 1.25 5)",
          "4 * 5 = 20 (left: 5 20)",
          "5 * 5 = 25 (left: 4 25)",
          "5 + 5 = 10 (left: 4 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:40:56.493274",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_5",
      "result": "PASS",
      "reason": "node_id 0_5_5 matches thought position.",
      "timestamp": "2025-05-29T13:40:56.493333",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_5",
        "state": "5 + 5 = 10 (left: 4 10)",
        "thoughts": [
          "4 + 5 = 9 (left: 5 9)",
          "5 - 4 = 1 (left: 1 5)",
          "5 / 4 = 1.25 (left: 1.25 5)",
          "4 * 5 = 20 (left: 5 20)",
          "5 * 5 = 25 (left: 4 25)",
          "5 + 5 = 10 (left: 4 10)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_5; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-29T13:40:58.578642",
      "event_type": "validation",
      "details": {
        "popped_node": "0_5",
        "expected_popped": "0_5",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_5",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "All 6 children explored - valid backtrack",
      "timestamp": "2025-05-29T13:40:58.578681",
      "event_type": "validation",
      "details": {
        "total_thoughts": 6,
        "evaluated_children": 6
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_6",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_6 follows 0_5",
      "timestamp": "2025-05-29T13:41:07.210230",
      "event_type": "validation",
      "details": {
        "popped_node": "0_5",
        "current_node": "0_6",
        "expected_index": 6,
        "actual_index": 6
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:41:07.210260",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_6",
      "result": "PASS",
      "reason": "node_id 0_6 matches thought position.",
      "timestamp": "2025-05-29T13:41:07.210288",
      "event_type": "validation",
      "details": {
        "node_id": "0_6",
        "state": "7 - 5 = 2 (left: 2 2 4)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "5 - 2 = 3 (left: 3 4 7)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "7 - 5 = 2 (left: 2 2 4)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "7 * 2 = 14 (left: 4 5 14)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 + 5 = 9 (left: 2 7 9)",
          "5 * 7 = 35 (left: 2 4 35)",
          "7 + 5 = 12 (left: 2 4 12)",
          "7 * 4 = 28 (left: 2 5 28)"
        ]
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_7",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-29T13:41:18.792560",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_7",
      "result": "PASS",
      "reason": "State validation passed: Last thought '7 / 2 = 3.5 (left: 3.5 4 5)' found in parent's thoughts",
      "timestamp": "2025-05-29T13:41:18.792608",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '7 / 2 = 3.5 (left: 3.5 4 5)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "5 - 2 = 3 (left: 3 4 7)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "7 - 5 = 2 (left: 2 2 4)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "7 * 2 = 14 (left: 4 5 14)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 + 5 = 9 (left: 2 7 9)",
          "5 * 7 = 35 (left: 2 4 35)",
          "7 + 5 = 12 (left: 2 4 12)",
          "7 * 4 = 28 (left: 2 5 28)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_7",
      "result": "PASS",
      "reason": "node_id 0_7 matches thought position.",
      "timestamp": "2025-05-29T13:41:18.792658",
      "event_type": "validation",
      "details": {
        "node_id": "0_7",
        "state": "7 / 2 = 3.5 (left: 3.5 4 5)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "5 - 2 = 3 (left: 3 4 7)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "7 - 5 = 2 (left: 2 2 4)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "7 * 2 = 14 (left: 4 5 14)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 + 5 = 9 (left: 2 7 9)",
          "5 * 7 = 35 (left: 2 4 35)",
          "7 + 5 = 12 (left: 2 4 12)",
          "7 * 4 = 28 (left: 2 5 28)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_7",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-29T13:41:28.136280",
      "event_type": "validation",
      "details": {
        "expected_state": "7 / 2 = 3.5 (left: 3.5 4 5)",
        "actual_state": "7 / 2 = 3.5 (left: 3.5 4 5)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_7_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:41:40.358363",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_7_0",
      "result": "PASS",
      "reason": "node_id 0_7_0 matches thought position.",
      "timestamp": "2025-05-29T13:41:40.358427",
      "event_type": "validation",
      "details": {
        "node_id": "0_7_0",
        "state": "4 + 3.5 = 7.5 (left: 5 7.5)",
        "thoughts": [
          "4 + 3.5 = 7.5 (left: 5 7.5)",
          "5 - 3.5 = 1.5 (left: 1.5 4)",
          "5 / 3.5 = 1.43 (left: 1.43 4)",
          "4 - 3.5 = 0.5 (left: 0.5 5)",
          "4 / 3.5 = 1.14 (left: 1.14 5)",
          "5 * 3.5 = 17.5 (left: 4 17.5)",
          "4 * 3.5 = 14 (left: 5 14)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_7_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:41:51.177888",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_7_1",
      "result": "PASS",
      "reason": "node_id 0_7_1 matches thought position.",
      "timestamp": "2025-05-29T13:41:51.177954",
      "event_type": "validation",
      "details": {
        "node_id": "0_7_1",
        "state": "5 - 3.5 = 1.5 (left: 1.5 4)",
        "thoughts": [
          "4 + 3.5 = 7.5 (left: 5 7.5)",
          "5 - 3.5 = 1.5 (left: 1.5 4)",
          "5 / 3.5 = 1.43 (left: 1.43 4)",
          "4 - 3.5 = 0.5 (left: 0.5 5)",
          "4 / 3.5 = 1.14 (left: 1.14 5)",
          "5 * 3.5 = 17.5 (left: 4 17.5)",
          "4 * 3.5 = 14 (left: 5 14)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_7_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:42:04.370344",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_7_2",
      "result": "PASS",
      "reason": "node_id 0_7_2 matches thought position.",
      "timestamp": "2025-05-29T13:42:04.370409",
      "event_type": "validation",
      "details": {
        "node_id": "0_7_2",
        "state": "5 / 3.5 = 1.43 (left: 1.43 4)",
        "thoughts": [
          "4 + 3.5 = 7.5 (left: 5 7.5)",
          "5 - 3.5 = 1.5 (left: 1.5 4)",
          "5 / 3.5 = 1.43 (left: 1.43 4)",
          "4 - 3.5 = 0.5 (left: 0.5 5)",
          "4 / 3.5 = 1.14 (left: 1.14 5)",
          "5 * 3.5 = 17.5 (left: 4 17.5)",
          "4 * 3.5 = 14 (left: 5 14)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_7_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:42:15.349706",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_7_3",
      "result": "PASS",
      "reason": "node_id 0_7_3 matches thought position.",
      "timestamp": "2025-05-29T13:42:15.349771",
      "event_type": "validation",
      "details": {
        "node_id": "0_7_3",
        "state": "4 - 3.5 = 0.5 (left: 0.5 5)",
        "thoughts": [
          "4 + 3.5 = 7.5 (left: 5 7.5)",
          "5 - 3.5 = 1.5 (left: 1.5 4)",
          "5 / 3.5 = 1.43 (left: 1.43 4)",
          "4 - 3.5 = 0.5 (left: 0.5 5)",
          "4 / 3.5 = 1.14 (left: 1.14 5)",
          "5 * 3.5 = 17.5 (left: 4 17.5)",
          "4 * 3.5 = 14 (left: 5 14)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_7_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:42:25.955324",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_7_4",
      "result": "PASS",
      "reason": "node_id 0_7_4 matches thought position.",
      "timestamp": "2025-05-29T13:42:25.955385",
      "event_type": "validation",
      "details": {
        "node_id": "0_7_4",
        "state": "4 / 3.5 = 1.14 (left: 1.14 5)",
        "thoughts": [
          "4 + 3.5 = 7.5 (left: 5 7.5)",
          "5 - 3.5 = 1.5 (left: 1.5 4)",
          "5 / 3.5 = 1.43 (left: 1.43 4)",
          "4 - 3.5 = 0.5 (left: 0.5 5)",
          "4 / 3.5 = 1.14 (left: 1.14 5)",
          "5 * 3.5 = 17.5 (left: 4 17.5)",
          "4 * 3.5 = 14 (left: 5 14)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_7_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:42:41.735262",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_7_5",
      "result": "PASS",
      "reason": "node_id 0_7_5 matches thought position.",
      "timestamp": "2025-05-29T13:42:41.735319",
      "event_type": "validation",
      "details": {
        "node_id": "0_7_5",
        "state": "5 * 3.5 = 17.5 (left: 4 17.5)",
        "thoughts": [
          "4 + 3.5 = 7.5 (left: 5 7.5)",
          "5 - 3.5 = 1.5 (left: 1.5 4)",
          "5 / 3.5 = 1.43 (left: 1.43 4)",
          "4 - 3.5 = 0.5 (left: 0.5 5)",
          "4 / 3.5 = 1.14 (left: 1.14 5)",
          "5 * 3.5 = 17.5 (left: 4 17.5)",
          "4 * 3.5 = 14 (left: 5 14)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_7_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T13:42:50.776554",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_7_6",
      "result": "PASS",
      "reason": "node_id 0_7_6 matches thought position.",
      "timestamp": "2025-05-29T13:42:50.776635",
      "event_type": "validation",
      "details": {
        "node_id": "0_7_6",
        "state": "4 * 3.5 = 14 (left: 5 14)",
        "thoughts": [
          "4 + 3.5 = 7.5 (left: 5 7.5)",
          "5 - 3.5 = 1.5 (left: 1.5 4)",
          "5 / 3.5 = 1.43 (left: 1.43 4)",
          "4 - 3.5 = 0.5 (left: 0.5 5)",
          "4 / 3.5 = 1.14 (left: 1.14 5)",
          "5 * 3.5 = 17.5 (left: 4 17.5)",
          "4 * 3.5 = 14 (left: 5 14)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_7",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_7; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-29T13:42:54.963708",
      "event_type": "validation",
      "details": {
        "popped_node": "0_7",
        "expected_popped": "0_7",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_7",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_7",
      "result": "PASS",
      "reason": "All 7 children explored - valid backtrack",
      "timestamp": "2025-05-29T13:42:54.963731",
      "event_type": "validation",
      "details": {
        "total_thoughts": 7,
        "evaluated_children": 7
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
      "timestamp": "2025-05-29T13:42:57.277716",
      "event_type": "validation",
      "details": {
        "popped_node": "0",
        "expected_popped": "0",
        "backtrack_to": "None",
        "expected_parent": "None",
        "validation_details": [
          "Correctly popped expected node 0",
          "Correctly backtracking to parent 'None'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0",
      "result": "FAIL",
      "reason": "Only 8 of 14 children explored",
      "timestamp": "2025-05-29T13:42:57.277740",
      "event_type": "validation",
      "details": {
        "total_thoughts": 14,
        "evaluated_children": 8
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521091",
      "event_type": "validation",
      "details": {
        "state": "2 + 4 = 6 (left: 5 6 7)",
        "thought": "2 + 4 = 6 (left: 5 6 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521112",
      "event_type": "validation",
      "details": {
        "state": "4 - 2 = 2 (left: 2 5 7)",
        "thought": "4 - 2 = 2 (left: 2 5 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521117",
      "event_type": "validation",
      "details": {
        "state": "5 + 2 = 7 (left: 4 7 7)",
        "thought": "5 + 2 = 7 (left: 4 7 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521122",
      "event_type": "validation",
      "details": {
        "state": "5 - 2 = 3 (left: 3 4 7)",
        "thought": "5 - 2 = 3 (left: 3 4 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521128",
      "event_type": "validation",
      "details": {
        "state": "5 / 2 = 2.5 (left: 2.5 4 7)",
        "thought": "5 / 2 = 2.5 (left: 2.5 4 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521133",
      "event_type": "validation",
      "details": {
        "state": "7 - 2 = 5 (left: 4 5 5)",
        "thought": "7 - 2 = 5 (left: 4 5 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521137",
      "event_type": "validation",
      "details": {
        "state": "7 - 5 = 2 (left: 2 2 4)",
        "thought": "7 - 5 = 2 (left: 2 2 4)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_7",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521142",
      "event_type": "validation",
      "details": {
        "state": "7 / 2 = 3.5 (left: 3.5 4 5)",
        "thought": "7 / 2 = 3.5 (left: 3.5 4 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521169",
      "event_type": "validation",
      "details": {
        "state": "5 + 6 = 11 (left: 7 11)",
        "thought": "5 + 6 = 11 (left: 7 11)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521174",
      "event_type": "validation",
      "details": {
        "state": "5 * 6 = 30 (left: 7 30)",
        "thought": "5 * 6 = 30 (left: 7 30)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521178",
      "event_type": "validation",
      "details": {
        "state": "6 - 5 = 1 (left: 1 7)",
        "thought": "6 - 5 = 1 (left: 1 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521184",
      "event_type": "validation",
      "details": {
        "state": "7 - 5 = 2 (left: 2 6)",
        "thought": "7 - 5 = 2 (left: 2 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521188",
      "event_type": "validation",
      "details": {
        "state": "7 - 6 = 1 (left: 1 5)",
        "thought": "7 - 6 = 1 (left: 1 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521193",
      "event_type": "validation",
      "details": {
        "state": "6 + 7 = 13 (left: 5 13)",
        "thought": "6 + 7 = 13 (left: 5 13)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521199",
      "event_type": "validation",
      "details": {
        "state": "7 * 5 = 35 (left: 6 35)",
        "thought": "7 * 5 = 35 (left: 6 35)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_7",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521204",
      "event_type": "validation",
      "details": {
        "state": "7 * 6 = 42 (left: 5 42)",
        "thought": "7 * 6 = 42 (left: 5 42)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521253",
      "event_type": "validation",
      "details": {
        "state": "4 + 7 = 11 (left: 7 11)",
        "thought": "4 + 7 = 11 (left: 7 11)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521259",
      "event_type": "validation",
      "details": {
        "state": "7 - 4 = 3 (left: 3 7)",
        "thought": "7 - 4 = 3 (left: 3 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521263",
      "event_type": "validation",
      "details": {
        "state": "7 / 4 = 1.75 (left: 1.75 7)",
        "thought": "7 / 4 = 1.75 (left: 1.75 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521268",
      "event_type": "validation",
      "details": {
        "state": "4 * 7 = 28 (left: 7 28)",
        "thought": "4 * 7 = 28 (left: 7 28)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521272",
      "event_type": "validation",
      "details": {
        "state": "7 + 7 = 14 (left: 4 14)",
        "thought": "7 + 7 = 14 (left: 4 14)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521277",
      "event_type": "validation",
      "details": {
        "state": "7 - 7 = 0 (left: 0 4)",
        "thought": "7 - 7 = 0 (left: 0 4)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521282",
      "event_type": "validation",
      "details": {
        "state": "7 / 7 = 1 (left: 1 4)",
        "thought": "7 / 7 = 1 (left: 1 4)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_7",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521287",
      "event_type": "validation",
      "details": {
        "state": "7 * 7 = 49 (left: 4 49)",
        "thought": "7 * 7 = 49 (left: 4 49)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521325",
      "event_type": "validation",
      "details": {
        "state": "3 + 4 = 7 (left: 7 7)",
        "thought": "3 + 4 = 7 (left: 7 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521344",
      "event_type": "validation",
      "details": {
        "state": "4 - 3 = 1 (left: 1 7)",
        "thought": "4 - 3 = 1 (left: 1 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521353",
      "event_type": "validation",
      "details": {
        "state": "7 - 3 = 4 (left: 4 4)",
        "thought": "7 - 3 = 4 (left: 4 4)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521359",
      "event_type": "validation",
      "details": {
        "state": "7 - 4 = 3 (left: 3 3)",
        "thought": "7 - 4 = 3 (left: 3 3)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521364",
      "event_type": "validation",
      "details": {
        "state": "4 / 3 = 1.33 (left: 1.33 7)",
        "thought": "4 / 3 = 1.33 (left: 1.33 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521368",
      "event_type": "validation",
      "details": {
        "state": "7 / 3 = 2.33 (left: 2.33 4)",
        "thought": "7 / 3 = 2.33 (left: 2.33 4)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521374",
      "event_type": "validation",
      "details": {
        "state": "7 / 4 = 1.75 (left: 1.75 3)",
        "thought": "7 / 4 = 1.75 (left: 1.75 3)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_7",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521379",
      "event_type": "validation",
      "details": {
        "state": "3 * 4 = 12 (left: 7 12)",
        "thought": "3 * 4 = 12 (left: 7 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521420",
      "event_type": "validation",
      "details": {
        "state": "2.5 + 4 = 6.5 (left: 6.5 7)",
        "thought": "2.5 + 4 = 6.5 (left: 6.5 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521425",
      "event_type": "validation",
      "details": {
        "state": "4 - 2.5 = 1.5 (left: 1.5 7)",
        "thought": "4 - 2.5 = 1.5 (left: 1.5 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521430",
      "event_type": "validation",
      "details": {
        "state": "7 - 2.5 = 4.5 (left: 4 4.5)",
        "thought": "7 - 2.5 = 4.5 (left: 4 4.5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521435",
      "event_type": "validation",
      "details": {
        "state": "7 - 4 = 3 (left: 2.5 3)",
        "thought": "7 - 4 = 3 (left: 2.5 3)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521443",
      "event_type": "validation",
      "details": {
        "state": "7 / 2.5 = 2.8 (left: 2.8 4)",
        "thought": "7 / 2.5 = 2.8 (left: 2.8 4)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521449",
      "event_type": "validation",
      "details": {
        "state": "4 / 2.5 = 1.6 (left: 1.6 7)",
        "thought": "4 / 2.5 = 1.6 (left: 1.6 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521457",
      "event_type": "validation",
      "details": {
        "state": "2.5 * 4 = 10 (left: 7 10)",
        "thought": "2.5 * 4 = 10 (left: 7 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521507",
      "event_type": "validation",
      "details": {
        "state": "4 + 5 = 9 (left: 5 9)",
        "thought": "4 + 5 = 9 (left: 5 9)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521514",
      "event_type": "validation",
      "details": {
        "state": "5 - 4 = 1 (left: 1 5)",
        "thought": "5 - 4 = 1 (left: 1 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521519",
      "event_type": "validation",
      "details": {
        "state": "5 / 4 = 1.25 (left: 1.25 5)",
        "thought": "5 / 4 = 1.25 (left: 1.25 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521524",
      "event_type": "validation",
      "details": {
        "state": "4 * 5 = 20 (left: 5 20)",
        "thought": "4 * 5 = 20 (left: 5 20)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521529",
      "event_type": "validation",
      "details": {
        "state": "5 * 5 = 25 (left: 4 25)",
        "thought": "5 * 5 = 25 (left: 4 25)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521533",
      "event_type": "validation",
      "details": {
        "state": "5 + 5 = 10 (left: 4 10)",
        "thought": "5 + 5 = 10 (left: 4 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_7_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521567",
      "event_type": "validation",
      "details": {
        "state": "4 + 3.5 = 7.5 (left: 5 7.5)",
        "thought": "4 + 3.5 = 7.5 (left: 5 7.5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_7_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521572",
      "event_type": "validation",
      "details": {
        "state": "5 - 3.5 = 1.5 (left: 1.5 4)",
        "thought": "5 - 3.5 = 1.5 (left: 1.5 4)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_7_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521576",
      "event_type": "validation",
      "details": {
        "state": "5 / 3.5 = 1.43 (left: 1.43 4)",
        "thought": "5 / 3.5 = 1.43 (left: 1.43 4)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_7_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521585",
      "event_type": "validation",
      "details": {
        "state": "4 - 3.5 = 0.5 (left: 0.5 5)",
        "thought": "4 - 3.5 = 0.5 (left: 0.5 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_7_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521590",
      "event_type": "validation",
      "details": {
        "state": "4 / 3.5 = 1.14 (left: 1.14 5)",
        "thought": "4 / 3.5 = 1.14 (left: 1.14 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_7_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521594",
      "event_type": "validation",
      "details": {
        "state": "5 * 3.5 = 17.5 (left: 4 17.5)",
        "thought": "5 * 3.5 = 17.5 (left: 4 17.5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_7_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T13:42:59.521599",
      "event_type": "validation",
      "details": {
        "state": "4 * 3.5 = 14 (left: 5 14)",
        "thought": "4 * 3.5 = 14 (left: 5 14)"
      }
    }
  ],
  "legacy_log": [
    {
      "event": "push",
      "node_id": "0",
      "issues": [],
      "log": []
    },
    {
      "event": "push",
      "node_id": "0_0",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_0 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '2 + 4 = 6 (left: 5 6 7)' found in parent's thoughts",
        "\u2705 Node 0_0 matches thought position.",
        "\u2705 State consistency check passed for node 0_0"
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_7",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_7 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_7 matches thought position."
      ]
    },
    {
      "event": "pop",
      "node_id": "",
      "issues": [
        "\u274c All children of node 0 were not explored \u2014 invalid reason for backtracking."
      ],
      "log": [
        "\u2705 Popped 0_0 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_0; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_0 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_2 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_2; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_2 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_3 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_3; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_3 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_4 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_4; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_4 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_5 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_5; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_5 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_7 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_7; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_7 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to 'None'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'"
      ]
    },
    {
      "event": "push",
      "node_id": "0_1",
      "issues": [],
      "log": [
        "\u2705 Sequential child node validation: pushing 0_1 after popping 0_0 is correct.",
        "\u2705 Node 0_1 with value 2.001 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_2 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '5 + 2 = 7 (left: 4 7 7)' found in parent's thoughts",
        "\u2705 Node 0_2 matches thought position.",
        "\u2705 State consistency check passed for node 0_2"
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_2 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_7",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_7 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_7 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_3 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '5 - 2 = 3 (left: 3 4 7)' found in parent's thoughts",
        "\u2705 Sequential child node validation: pushing 0_3 after popping 0_2 is correct.",
        "\u2705 Node 0_3 matches thought position.",
        "\u2705 State consistency check passed for node 0_3"
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_7",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_7 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_7 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_4 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '5 / 2 = 2.5 (left: 2.5 4 7)' found in parent's thoughts",
        "\u2705 Sequential child node validation: pushing 0_4 after popping 0_3 is correct.",
        "\u2705 Node 0_4 matches thought position.",
        "\u2705 State consistency check passed for node 0_4"
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_2 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_5 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '7 - 2 = 5 (left: 4 5 5)' found in parent's thoughts",
        "\u2705 Sequential child node validation: pushing 0_5 after popping 0_4 is correct.",
        "\u2705 Node 0_5 matches thought position.",
        "\u2705 State consistency check passed for node 0_5"
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_6",
      "issues": [],
      "log": [
        "\u2705 Sequential child node validation: pushing 0_6 after popping 0_5 is correct.",
        "\u2705 Node 0_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_7",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_7 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '7 / 2 = 3.5 (left: 3.5 4 5)' found in parent's thoughts",
        "\u2705 Node 0_7 matches thought position.",
        "\u2705 State consistency check passed for node 0_7"
      ]
    },
    {
      "event": "push",
      "node_id": "0_7_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_7_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_7_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_7_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_7_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_7_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_7_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_7_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_7_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_7_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_7_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_7_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_7_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_7_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_7_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_7_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_7_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_7_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_7_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_7_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_7_6 matches thought position."
      ]
    }
  ],
  "tree_trace": {
    "0": {
      "state": null,
      "thought": "2 + 4 = 6 (left: 5 6 7)\n4 - 2 = 2 (left: 2 5 7)\n5 + 2 = 7 (left: 4 7 7)\n5 - 2 = 3 (left: 3 4 7)\n5 / 2 = 2.5 (left: 2.5 4 7)\n7 - 2 = 5 (left: 4 5 5)\n7 - 5 = 2 (left: 2 2 4)\n7 / 2 = 3.5 (left: 3.5 4 5)\n7 * 2 = 14 (left: 4 5 14)\n2 * 4 = 8 (left: 5 7 8)\n4 + 5 = 9 (left: 2 7 9)\n5 * 7 = 35 (left: 2 4 35)\n7 + 5 = 12 (left: 2 4 12)\n7 * 4 = 28 (left: 2 5 28)",
      "value": null,
      "opening_remark": null,
      "children": {
        "0_0": {
          "state": "2 + 4 = 6 (left: 5 6 7)",
          "thought": "5 + 6 = 11 (left: 7 11)\n5 * 6 = 30 (left: 7 30)\n6 - 5 = 1 (left: 1 7)\n7 - 5 = 2 (left: 2 6)\n7 - 6 = 1 (left: 1 5)\n6 + 7 = 13 (left: 5 13)\n7 * 5 = 35 (left: 6 35)\n7 * 6 = 42 (left: 5 42)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_0_0": {
              "state": "2 + 4 = 6 (left: 5 6 7)\n5 + 6 = 11 (left: 7 11)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_1": {
              "state": "2 + 4 = 6 (left: 5 6 7)\n5 * 6 = 30 (left: 7 30)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_2": {
              "state": "2 + 4 = 6 (left: 5 6 7)\n6 - 5 = 1 (left: 1 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_3": {
              "state": "2 + 4 = 6 (left: 5 6 7)\n7 - 5 = 2 (left: 2 6)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_4": {
              "state": "2 + 4 = 6 (left: 5 6 7)\n7 - 6 = 1 (left: 1 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_5": {
              "state": "2 + 4 = 6 (left: 5 6 7)\n6 + 7 = 13 (left: 5 13)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_6": {
              "state": "2 + 4 = 6 (left: 5 6 7)\n7 * 5 = 35 (left: 6 35)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_7": {
              "state": "2 + 4 = 6 (left: 5 6 7)\n7 * 6 = 42 (left: 5 42)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_1": {
          "state": "4 - 2 = 2 (left: 2 5 7)",
          "thought": null,
          "value": 2.001,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_2": {
          "state": "5 + 2 = 7 (left: 4 7 7)",
          "thought": "4 + 7 = 11 (left: 7 11)\n7 - 4 = 3 (left: 3 7)\n7 / 4 = 1.75 (left: 1.75 7)\n4 * 7 = 28 (left: 7 28)\n7 + 7 = 14 (left: 4 14)\n7 - 7 = 0 (left: 0 4)\n7 / 7 = 1 (left: 1 4)\n7 * 7 = 49 (left: 4 49)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_2_0": {
              "state": "5 + 2 = 7 (left: 4 7 7)\n4 + 7 = 11 (left: 7 11)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_1": {
              "state": "5 + 2 = 7 (left: 4 7 7)\n7 - 4 = 3 (left: 3 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_2": {
              "state": "5 + 2 = 7 (left: 4 7 7)\n7 / 4 = 1.75 (left: 1.75 7)",
              "thought": null,
              "value": 1.002,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_3": {
              "state": "5 + 2 = 7 (left: 4 7 7)\n4 * 7 = 28 (left: 7 28)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_4": {
              "state": "5 + 2 = 7 (left: 4 7 7)\n7 + 7 = 14 (left: 4 14)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_5": {
              "state": "5 + 2 = 7 (left: 4 7 7)\n7 - 7 = 0 (left: 0 4)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_6": {
              "state": "5 + 2 = 7 (left: 4 7 7)\n7 / 7 = 1 (left: 1 4)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_7": {
              "state": "5 + 2 = 7 (left: 4 7 7)\n7 * 7 = 49 (left: 4 49)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_3": {
          "state": "5 - 2 = 3 (left: 3 4 7)",
          "thought": "3 + 4 = 7 (left: 7 7)\n4 - 3 = 1 (left: 1 7)\n7 - 3 = 4 (left: 4 4)\n7 - 4 = 3 (left: 3 3)\n4 / 3 = 1.33 (left: 1.33 7)\n7 / 3 = 2.33 (left: 2.33 4)\n7 / 4 = 1.75 (left: 1.75 3)\n3 * 4 = 12 (left: 7 12)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_3_0": {
              "state": "5 - 2 = 3 (left: 3 4 7)\n3 + 4 = 7 (left: 7 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_1": {
              "state": "5 - 2 = 3 (left: 3 4 7)\n4 - 3 = 1 (left: 1 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_2": {
              "state": "5 - 2 = 3 (left: 3 4 7)\n7 - 3 = 4 (left: 4 4)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_3": {
              "state": "5 - 2 = 3 (left: 3 4 7)\n7 - 4 = 3 (left: 3 3)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_4": {
              "state": "5 - 2 = 3 (left: 3 4 7)\n4 / 3 = 1.33 (left: 1.33 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_5": {
              "state": "5 - 2 = 3 (left: 3 4 7)\n7 / 3 = 2.33 (left: 2.33 4)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_6": {
              "state": "5 - 2 = 3 (left: 3 4 7)\n7 / 4 = 1.75 (left: 1.75 3)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_7": {
              "state": "5 - 2 = 3 (left: 3 4 7)\n3 * 4 = 12 (left: 7 12)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_4": {
          "state": "5 / 2 = 2.5 (left: 2.5 4 7)",
          "thought": "2.5 + 4 = 6.5 (left: 6.5 7)\n4 - 2.5 = 1.5 (left: 1.5 7)\n7 - 2.5 = 4.5 (left: 4 4.5)\n7 - 4 = 3 (left: 2.5 3)\n7 / 2.5 = 2.8 (left: 2.8 4)\n4 / 2.5 = 1.6 (left: 1.6 7)\n2.5 * 4 = 10 (left: 7 10)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_4_0": {
              "state": "5 / 2 = 2.5 (left: 2.5 4 7)\n2.5 + 4 = 6.5 (left: 6.5 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_4_1": {
              "state": "5 / 2 = 2.5 (left: 2.5 4 7)\n4 - 2.5 = 1.5 (left: 1.5 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_4_2": {
              "state": "5 / 2 = 2.5 (left: 2.5 4 7)\n7 - 2.5 = 4.5 (left: 4 4.5)",
              "thought": null,
              "value": 1.002,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_4_3": {
              "state": "5 / 2 = 2.5 (left: 2.5 4 7)\n7 - 4 = 3 (left: 2.5 3)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_4_4": {
              "state": "5 / 2 = 2.5 (left: 2.5 4 7)\n7 / 2.5 = 2.8 (left: 2.8 4)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_4_5": {
              "state": "5 / 2 = 2.5 (left: 2.5 4 7)\n4 / 2.5 = 1.6 (left: 1.6 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_4_6": {
              "state": "5 / 2 = 2.5 (left: 2.5 4 7)\n2.5 * 4 = 10 (left: 7 10)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_5": {
          "state": "7 - 2 = 5 (left: 4 5 5)",
          "thought": "4 + 5 = 9 (left: 5 9)\n5 - 4 = 1 (left: 1 5)\n5 / 4 = 1.25 (left: 1.25 5)\n4 * 5 = 20 (left: 5 20)\n5 * 5 = 25 (left: 4 25)\n5 + 5 = 10 (left: 4 10)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_5_0": {
              "state": "7 - 2 = 5 (left: 4 5 5)\n4 + 5 = 9 (left: 5 9)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_5_1": {
              "state": "7 - 2 = 5 (left: 4 5 5)\n5 - 4 = 1 (left: 1 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_5_2": {
              "state": "7 - 2 = 5 (left: 4 5 5)\n5 / 4 = 1.25 (left: 1.25 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_5_3": {
              "state": "7 - 2 = 5 (left: 4 5 5)\n4 * 5 = 20 (left: 5 20)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_5_4": {
              "state": "7 - 2 = 5 (left: 4 5 5)\n5 * 5 = 25 (left: 4 25)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_5_5": {
              "state": "7 - 2 = 5 (left: 4 5 5)\n5 + 5 = 10 (left: 4 10)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_6": {
          "state": "7 - 5 = 2 (left: 2 2 4)",
          "thought": null,
          "value": 0.003,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_7": {
          "state": "7 / 2 = 3.5 (left: 3.5 4 5)",
          "thought": "4 + 3.5 = 7.5 (left: 5 7.5)\n5 - 3.5 = 1.5 (left: 1.5 4)\n5 / 3.5 = 1.43 (left: 1.43 4)\n4 - 3.5 = 0.5 (left: 0.5 5)\n4 / 3.5 = 1.14 (left: 1.14 5)\n5 * 3.5 = 17.5 (left: 4 17.5)\n4 * 3.5 = 14 (left: 5 14)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_7_0": {
              "state": "7 / 2 = 3.5 (left: 3.5 4 5)\n4 + 3.5 = 7.5 (left: 5 7.5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_7_1": {
              "state": "7 / 2 = 3.5 (left: 3.5 4 5)\n5 - 3.5 = 1.5 (left: 1.5 4)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_7_2": {
              "state": "7 / 2 = 3.5 (left: 3.5 4 5)\n5 / 3.5 = 1.43 (left: 1.43 4)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_7_3": {
              "state": "7 / 2 = 3.5 (left: 3.5 4 5)\n4 - 3.5 = 0.5 (left: 0.5 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_7_4": {
              "state": "7 / 2 = 3.5 (left: 3.5 4 5)\n4 / 3.5 = 1.14 (left: 1.14 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_7_5": {
              "state": "7 / 2 = 3.5 (left: 3.5 4 5)\n5 * 3.5 = 17.5 (left: 4 17.5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_7_6": {
              "state": "7 / 2 = 3.5 (left: 3.5 4 5)\n4 * 3.5 = 14 (left: 5 14)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        }
      },
      "closing_remark": null,
      "backtracked": false
    }
  }
}