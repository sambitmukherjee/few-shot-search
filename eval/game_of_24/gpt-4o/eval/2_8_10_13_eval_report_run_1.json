{
  "summary": {
    "total_checks": 182,
    "passed": 182,
    "failed": 0
  },
  "checks_by_type": {
    "pruning": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pruning",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:21:06.388129",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:21:16.350754",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-29T12:21:25.969004",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:21:34.320104",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "Value 2.001 meets threshold 3.0",
          "timestamp": "2025-05-29T12:21:45.701000",
          "event_type": "validation",
          "details": {
            "value": 2.001,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:22:19.268100",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:22:45.266352",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:22:56.815023",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:23:07.650420",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:23:16.728829",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:23:27.017537",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:23:35.377017",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5_7",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:23:45.772455",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:23:57.399498",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_7",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-29T12:24:05.602794",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_8_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:24:37.740215",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_8_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:24:46.761327",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_8_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:24:55.476141",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_8_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:25:03.982204",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_8_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:25:16.986690",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_8_5",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-29T12:25:30.068035",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_8_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:25:39.933626",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_8_7",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:25:53.730862",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_9_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:26:28.569351",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_9_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:26:37.254832",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_9_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:26:45.852871",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_9_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:26:56.130656",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_9_4",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-29T12:27:06.492839",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_9_5",
          "result": "PASS",
          "reason": "Value 2.001 meets threshold 3.0",
          "timestamp": "2025-05-29T12:27:21.896154",
          "event_type": "validation",
          "details": {
            "value": 2.001,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_9_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:27:30.645146",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_10",
          "result": "PASS",
          "reason": "Value 2.001 meets threshold 3.0",
          "timestamp": "2025-05-29T12:27:45.060468",
          "event_type": "validation",
          "details": {
            "value": 2.001,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_11_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:28:21.405674",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_11_1",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-29T12:28:33.904674",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_11_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:28:46.314215",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_11_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:28:56.397225",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_11_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:29:12.496813",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_11_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:29:23.974856",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_11_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:29:35.238404",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_12_0",
          "result": "PASS",
          "reason": "Value 2.001 meets threshold 3.0",
          "timestamp": "2025-05-29T12:30:14.923408",
          "event_type": "validation",
          "details": {
            "value": 2.001,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_12_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:30:30.449360",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_12_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:30:43.522818",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_12_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:31:01.951208",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_12_4",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-29T12:31:14.742559",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_12_5",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-29T12:31:29.626637",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_12_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:31:40.257042",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_12_7",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-29T12:31:52.695698",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_13",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-29T12:32:05.830628",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        }
      ]
    },
    "child_id_assignment": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "node_id 0_0 matches thought position.",
          "timestamp": "2025-05-29T12:21:06.388530",
          "event_type": "validation",
          "details": {
            "node_id": "0_0",
            "state": "2 + 8 = 10 (left: 10 10 13)",
            "thoughts": [
              "2 + 8 = 10 (left: 10 10 13)",
              "8 + 2 = 10 (left: 10 10 13)",
              "10 + 2 = 12 (left: 8 12 13)",
              "13 - 2 = 11 (left: 8 10 11)",
              "13 - 8 = 5 (left: 2 5 10)",
              "13 - 10 = 3 (left: 2 3 8)",
              "10 - 2 = 8 (left: 8 8 13)",
              "10 - 8 = 2 (left: 2 2 13)",
              "8 - 2 = 6 (left: 6 10 13)",
              "10 / 2 = 5 (left: 5 8 13)",
              "8 / 2 = 4 (left: 4 10 13)",
              "13 / 2 = 6.5 (left: 6.5 8 10)",
              "13 / 10 = 1.3 (left: 1.3 2 8)",
              "10 / 8 = 1.25 (left: 1.25 2 13)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "node_id 0_1 matches thought position.",
          "timestamp": "2025-05-29T12:21:16.350854",
          "event_type": "validation",
          "details": {
            "node_id": "0_1",
            "state": "8 + 2 = 10 (left: 10 10 13)",
            "thoughts": [
              "2 + 8 = 10 (left: 10 10 13)",
              "8 + 2 = 10 (left: 10 10 13)",
              "10 + 2 = 12 (left: 8 12 13)",
              "13 - 2 = 11 (left: 8 10 11)",
              "13 - 8 = 5 (left: 2 5 10)",
              "13 - 10 = 3 (left: 2 3 8)",
              "10 - 2 = 8 (left: 8 8 13)",
              "10 - 8 = 2 (left: 2 2 13)",
              "8 - 2 = 6 (left: 6 10 13)",
              "10 / 2 = 5 (left: 5 8 13)",
              "8 / 2 = 4 (left: 4 10 13)",
              "13 / 2 = 6.5 (left: 6.5 8 10)",
              "13 / 10 = 1.3 (left: 1.3 2 8)",
              "10 / 8 = 1.25 (left: 1.25 2 13)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "node_id 0_2 matches thought position.",
          "timestamp": "2025-05-29T12:21:25.969090",
          "event_type": "validation",
          "details": {
            "node_id": "0_2",
            "state": "10 + 2 = 12 (left: 8 12 13)",
            "thoughts": [
              "2 + 8 = 10 (left: 10 10 13)",
              "8 + 2 = 10 (left: 10 10 13)",
              "10 + 2 = 12 (left: 8 12 13)",
              "13 - 2 = 11 (left: 8 10 11)",
              "13 - 8 = 5 (left: 2 5 10)",
              "13 - 10 = 3 (left: 2 3 8)",
              "10 - 2 = 8 (left: 8 8 13)",
              "10 - 8 = 2 (left: 2 2 13)",
              "8 - 2 = 6 (left: 6 10 13)",
              "10 / 2 = 5 (left: 5 8 13)",
              "8 / 2 = 4 (left: 4 10 13)",
              "13 / 2 = 6.5 (left: 6.5 8 10)",
              "13 / 10 = 1.3 (left: 1.3 2 8)",
              "10 / 8 = 1.25 (left: 1.25 2 13)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "node_id 0_3 matches thought position.",
          "timestamp": "2025-05-29T12:21:34.320195",
          "event_type": "validation",
          "details": {
            "node_id": "0_3",
            "state": "13 - 2 = 11 (left: 8 10 11)",
            "thoughts": [
              "2 + 8 = 10 (left: 10 10 13)",
              "8 + 2 = 10 (left: 10 10 13)",
              "10 + 2 = 12 (left: 8 12 13)",
              "13 - 2 = 11 (left: 8 10 11)",
              "13 - 8 = 5 (left: 2 5 10)",
              "13 - 10 = 3 (left: 2 3 8)",
              "10 - 2 = 8 (left: 8 8 13)",
              "10 - 8 = 2 (left: 2 2 13)",
              "8 - 2 = 6 (left: 6 10 13)",
              "10 / 2 = 5 (left: 5 8 13)",
              "8 / 2 = 4 (left: 4 10 13)",
              "13 / 2 = 6.5 (left: 6.5 8 10)",
              "13 / 10 = 1.3 (left: 1.3 2 8)",
              "10 / 8 = 1.25 (left: 1.25 2 13)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "node_id 0_4 matches thought position.",
          "timestamp": "2025-05-29T12:21:45.701088",
          "event_type": "validation",
          "details": {
            "node_id": "0_4",
            "state": "13 - 8 = 5 (left: 2 5 10)",
            "thoughts": [
              "2 + 8 = 10 (left: 10 10 13)",
              "8 + 2 = 10 (left: 10 10 13)",
              "10 + 2 = 12 (left: 8 12 13)",
              "13 - 2 = 11 (left: 8 10 11)",
              "13 - 8 = 5 (left: 2 5 10)",
              "13 - 10 = 3 (left: 2 3 8)",
              "10 - 2 = 8 (left: 8 8 13)",
              "10 - 8 = 2 (left: 2 2 13)",
              "8 - 2 = 6 (left: 6 10 13)",
              "10 / 2 = 5 (left: 5 8 13)",
              "8 / 2 = 4 (left: 4 10 13)",
              "13 / 2 = 6.5 (left: 6.5 8 10)",
              "13 / 10 = 1.3 (left: 1.3 2 8)",
              "10 / 8 = 1.25 (left: 1.25 2 13)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "node_id 0_5 matches thought position.",
          "timestamp": "2025-05-29T12:21:57.753725",
          "event_type": "validation",
          "details": {
            "node_id": "0_5",
            "state": "13 - 10 = 3 (left: 2 3 8)",
            "thoughts": [
              "2 + 8 = 10 (left: 10 10 13)",
              "8 + 2 = 10 (left: 10 10 13)",
              "10 + 2 = 12 (left: 8 12 13)",
              "13 - 2 = 11 (left: 8 10 11)",
              "13 - 8 = 5 (left: 2 5 10)",
              "13 - 10 = 3 (left: 2 3 8)",
              "10 - 2 = 8 (left: 8 8 13)",
              "10 - 8 = 2 (left: 2 2 13)",
              "8 - 2 = 6 (left: 6 10 13)",
              "10 / 2 = 5 (left: 5 8 13)",
              "8 / 2 = 4 (left: 4 10 13)",
              "13 / 2 = 6.5 (left: 6.5 8 10)",
              "13 / 10 = 1.3 (left: 1.3 2 8)",
              "10 / 8 = 1.25 (left: 1.25 2 13)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_0",
          "result": "PASS",
          "reason": "node_id 0_5_0 matches thought position.",
          "timestamp": "2025-05-29T12:22:19.268195",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_0",
            "state": "2 + 3 = 5 (left: 5 8)",
            "thoughts": [
              "2 + 3 = 5 (left: 5 8)",
              "3 - 2 = 1 (left: 1 8)",
              "8 - 2 = 6 (left: 3 6)",
              "8 - 3 = 5 (left: 2 5)",
              "2 * 3 = 6 (left: 6 8)",
              "3 * 2 = 6 (left: 6 8)",
              "8 / 2 = 4 (left: 3 4)",
              "8 / 3 = 2.67 (left: 2 2.67)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_1",
          "result": "PASS",
          "reason": "node_id 0_5_1 matches thought position.",
          "timestamp": "2025-05-29T12:22:45.266422",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_1",
            "state": "3 - 2 = 1 (left: 1 8)",
            "thoughts": [
              "2 + 3 = 5 (left: 5 8)",
              "3 - 2 = 1 (left: 1 8)",
              "8 - 2 = 6 (left: 3 6)",
              "8 - 3 = 5 (left: 2 5)",
              "2 * 3 = 6 (left: 6 8)",
              "3 * 2 = 6 (left: 6 8)",
              "8 / 2 = 4 (left: 3 4)",
              "8 / 3 = 2.67 (left: 2 2.67)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_2",
          "result": "PASS",
          "reason": "node_id 0_5_2 matches thought position.",
          "timestamp": "2025-05-29T12:22:56.815084",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_2",
            "state": "8 - 2 = 6 (left: 3 6)",
            "thoughts": [
              "2 + 3 = 5 (left: 5 8)",
              "3 - 2 = 1 (left: 1 8)",
              "8 - 2 = 6 (left: 3 6)",
              "8 - 3 = 5 (left: 2 5)",
              "2 * 3 = 6 (left: 6 8)",
              "3 * 2 = 6 (left: 6 8)",
              "8 / 2 = 4 (left: 3 4)",
              "8 / 3 = 2.67 (left: 2 2.67)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_3",
          "result": "PASS",
          "reason": "node_id 0_5_3 matches thought position.",
          "timestamp": "2025-05-29T12:23:07.650495",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_3",
            "state": "8 - 3 = 5 (left: 2 5)",
            "thoughts": [
              "2 + 3 = 5 (left: 5 8)",
              "3 - 2 = 1 (left: 1 8)",
              "8 - 2 = 6 (left: 3 6)",
              "8 - 3 = 5 (left: 2 5)",
              "2 * 3 = 6 (left: 6 8)",
              "3 * 2 = 6 (left: 6 8)",
              "8 / 2 = 4 (left: 3 4)",
              "8 / 3 = 2.67 (left: 2 2.67)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_4",
          "result": "PASS",
          "reason": "node_id 0_5_4 matches thought position.",
          "timestamp": "2025-05-29T12:23:16.728908",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_4",
            "state": "2 * 3 = 6 (left: 6 8)",
            "thoughts": [
              "2 + 3 = 5 (left: 5 8)",
              "3 - 2 = 1 (left: 1 8)",
              "8 - 2 = 6 (left: 3 6)",
              "8 - 3 = 5 (left: 2 5)",
              "2 * 3 = 6 (left: 6 8)",
              "3 * 2 = 6 (left: 6 8)",
              "8 / 2 = 4 (left: 3 4)",
              "8 / 3 = 2.67 (left: 2 2.67)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_5",
          "result": "PASS",
          "reason": "node_id 0_5_5 matches thought position.",
          "timestamp": "2025-05-29T12:23:27.017647",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_5",
            "state": "3 * 2 = 6 (left: 6 8)",
            "thoughts": [
              "2 + 3 = 5 (left: 5 8)",
              "3 - 2 = 1 (left: 1 8)",
              "8 - 2 = 6 (left: 3 6)",
              "8 - 3 = 5 (left: 2 5)",
              "2 * 3 = 6 (left: 6 8)",
              "3 * 2 = 6 (left: 6 8)",
              "8 / 2 = 4 (left: 3 4)",
              "8 / 3 = 2.67 (left: 2 2.67)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_6",
          "result": "PASS",
          "reason": "node_id 0_5_6 matches thought position.",
          "timestamp": "2025-05-29T12:23:35.377097",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_6",
            "state": "8 / 2 = 4 (left: 3 4)",
            "thoughts": [
              "2 + 3 = 5 (left: 5 8)",
              "3 - 2 = 1 (left: 1 8)",
              "8 - 2 = 6 (left: 3 6)",
              "8 - 3 = 5 (left: 2 5)",
              "2 * 3 = 6 (left: 6 8)",
              "3 * 2 = 6 (left: 6 8)",
              "8 / 2 = 4 (left: 3 4)",
              "8 / 3 = 2.67 (left: 2 2.67)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5_7",
          "result": "PASS",
          "reason": "node_id 0_5_7 matches thought position.",
          "timestamp": "2025-05-29T12:23:45.772565",
          "event_type": "validation",
          "details": {
            "node_id": "0_5_7",
            "state": "8 / 3 = 2.67 (left: 2 2.67)",
            "thoughts": [
              "2 + 3 = 5 (left: 5 8)",
              "3 - 2 = 1 (left: 1 8)",
              "8 - 2 = 6 (left: 3 6)",
              "8 - 3 = 5 (left: 2 5)",
              "2 * 3 = 6 (left: 6 8)",
              "3 * 2 = 6 (left: 6 8)",
              "8 / 2 = 4 (left: 3 4)",
              "8 / 3 = 2.67 (left: 2 2.67)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_6",
          "result": "PASS",
          "reason": "node_id 0_6 matches thought position.",
          "timestamp": "2025-05-29T12:23:57.399533",
          "event_type": "validation",
          "details": {
            "node_id": "0_6",
            "state": "10 - 2 = 8 (left: 8 8 13)",
            "thoughts": [
              "2 + 8 = 10 (left: 10 10 13)",
              "8 + 2 = 10 (left: 10 10 13)",
              "10 + 2 = 12 (left: 8 12 13)",
              "13 - 2 = 11 (left: 8 10 11)",
              "13 - 8 = 5 (left: 2 5 10)",
              "13 - 10 = 3 (left: 2 3 8)",
              "10 - 2 = 8 (left: 8 8 13)",
              "10 - 8 = 2 (left: 2 2 13)",
              "8 - 2 = 6 (left: 6 10 13)",
              "10 / 2 = 5 (left: 5 8 13)",
              "8 / 2 = 4 (left: 4 10 13)",
              "13 / 2 = 6.5 (left: 6.5 8 10)",
              "13 / 10 = 1.3 (left: 1.3 2 8)",
              "10 / 8 = 1.25 (left: 1.25 2 13)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_7",
          "result": "PASS",
          "reason": "node_id 0_7 matches thought position.",
          "timestamp": "2025-05-29T12:24:05.602867",
          "event_type": "validation",
          "details": {
            "node_id": "0_7",
            "state": "10 - 8 = 2 (left: 2 2 13)",
            "thoughts": [
              "2 + 8 = 10 (left: 10 10 13)",
              "8 + 2 = 10 (left: 10 10 13)",
              "10 + 2 = 12 (left: 8 12 13)",
              "13 - 2 = 11 (left: 8 10 11)",
              "13 - 8 = 5 (left: 2 5 10)",
              "13 - 10 = 3 (left: 2 3 8)",
              "10 - 2 = 8 (left: 8 8 13)",
              "10 - 8 = 2 (left: 2 2 13)",
              "8 - 2 = 6 (left: 6 10 13)",
              "10 / 2 = 5 (left: 5 8 13)",
              "8 / 2 = 4 (left: 4 10 13)",
              "13 / 2 = 6.5 (left: 6.5 8 10)",
              "13 / 10 = 1.3 (left: 1.3 2 8)",
              "10 / 8 = 1.25 (left: 1.25 2 13)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_8",
          "result": "PASS",
          "reason": "node_id 0_8 matches thought position.",
          "timestamp": "2025-05-29T12:24:14.698149",
          "event_type": "validation",
          "details": {
            "node_id": "0_8",
            "state": "8 - 2 = 6 (left: 6 10 13)",
            "thoughts": [
              "2 + 8 = 10 (left: 10 10 13)",
              "8 + 2 = 10 (left: 10 10 13)",
              "10 + 2 = 12 (left: 8 12 13)",
              "13 - 2 = 11 (left: 8 10 11)",
              "13 - 8 = 5 (left: 2 5 10)",
              "13 - 10 = 3 (left: 2 3 8)",
              "10 - 2 = 8 (left: 8 8 13)",
              "10 - 8 = 2 (left: 2 2 13)",
              "8 - 2 = 6 (left: 6 10 13)",
              "10 / 2 = 5 (left: 5 8 13)",
              "8 / 2 = 4 (left: 4 10 13)",
              "13 / 2 = 6.5 (left: 6.5 8 10)",
              "13 / 10 = 1.3 (left: 1.3 2 8)",
              "10 / 8 = 1.25 (left: 1.25 2 13)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_8_0",
          "result": "PASS",
          "reason": "node_id 0_8_0 matches thought position.",
          "timestamp": "2025-05-29T12:24:37.740300",
          "event_type": "validation",
          "details": {
            "node_id": "0_8_0",
            "state": "6 + 10 = 16 (left: 13 16)",
            "thoughts": [
              "6 + 10 = 16 (left: 13 16)",
              "10 - 6 = 4 (left: 4 13)",
              "13 - 10 = 3 (left: 3 6)",
              "13 - 6 = 7 (left: 7 10)",
              "10 / 6 = 1.67 (left: 1.67 13)",
              "13 / 6 = 2.17 (left: 2.17 10)",
              "13 / 10 = 1.3 (left: 1.3 6)",
              "6 * 10 = 60 (left: 13 60)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_8_1",
          "result": "PASS",
          "reason": "node_id 0_8_1 matches thought position.",
          "timestamp": "2025-05-29T12:24:46.761398",
          "event_type": "validation",
          "details": {
            "node_id": "0_8_1",
            "state": "10 - 6 = 4 (left: 4 13)",
            "thoughts": [
              "6 + 10 = 16 (left: 13 16)",
              "10 - 6 = 4 (left: 4 13)",
              "13 - 10 = 3 (left: 3 6)",
              "13 - 6 = 7 (left: 7 10)",
              "10 / 6 = 1.67 (left: 1.67 13)",
              "13 / 6 = 2.17 (left: 2.17 10)",
              "13 / 10 = 1.3 (left: 1.3 6)",
              "6 * 10 = 60 (left: 13 60)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_8_2",
          "result": "PASS",
          "reason": "node_id 0_8_2 matches thought position.",
          "timestamp": "2025-05-29T12:24:55.476230",
          "event_type": "validation",
          "details": {
            "node_id": "0_8_2",
            "state": "13 - 10 = 3 (left: 3 6)",
            "thoughts": [
              "6 + 10 = 16 (left: 13 16)",
              "10 - 6 = 4 (left: 4 13)",
              "13 - 10 = 3 (left: 3 6)",
              "13 - 6 = 7 (left: 7 10)",
              "10 / 6 = 1.67 (left: 1.67 13)",
              "13 / 6 = 2.17 (left: 2.17 10)",
              "13 / 10 = 1.3 (left: 1.3 6)",
              "6 * 10 = 60 (left: 13 60)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_8_3",
          "result": "PASS",
          "reason": "node_id 0_8_3 matches thought position.",
          "timestamp": "2025-05-29T12:25:03.982285",
          "event_type": "validation",
          "details": {
            "node_id": "0_8_3",
            "state": "13 - 6 = 7 (left: 7 10)",
            "thoughts": [
              "6 + 10 = 16 (left: 13 16)",
              "10 - 6 = 4 (left: 4 13)",
              "13 - 10 = 3 (left: 3 6)",
              "13 - 6 = 7 (left: 7 10)",
              "10 / 6 = 1.67 (left: 1.67 13)",
              "13 / 6 = 2.17 (left: 2.17 10)",
              "13 / 10 = 1.3 (left: 1.3 6)",
              "6 * 10 = 60 (left: 13 60)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_8_4",
          "result": "PASS",
          "reason": "node_id 0_8_4 matches thought position.",
          "timestamp": "2025-05-29T12:25:16.986765",
          "event_type": "validation",
          "details": {
            "node_id": "0_8_4",
            "state": "10 / 6 = 1.67 (left: 1.67 13)",
            "thoughts": [
              "6 + 10 = 16 (left: 13 16)",
              "10 - 6 = 4 (left: 4 13)",
              "13 - 10 = 3 (left: 3 6)",
              "13 - 6 = 7 (left: 7 10)",
              "10 / 6 = 1.67 (left: 1.67 13)",
              "13 / 6 = 2.17 (left: 2.17 10)",
              "13 / 10 = 1.3 (left: 1.3 6)",
              "6 * 10 = 60 (left: 13 60)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_8_5",
          "result": "PASS",
          "reason": "node_id 0_8_5 matches thought position.",
          "timestamp": "2025-05-29T12:25:30.068107",
          "event_type": "validation",
          "details": {
            "node_id": "0_8_5",
            "state": "13 / 6 = 2.17 (left: 2.17 10)",
            "thoughts": [
              "6 + 10 = 16 (left: 13 16)",
              "10 - 6 = 4 (left: 4 13)",
              "13 - 10 = 3 (left: 3 6)",
              "13 - 6 = 7 (left: 7 10)",
              "10 / 6 = 1.67 (left: 1.67 13)",
              "13 / 6 = 2.17 (left: 2.17 10)",
              "13 / 10 = 1.3 (left: 1.3 6)",
              "6 * 10 = 60 (left: 13 60)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_8_6",
          "result": "PASS",
          "reason": "node_id 0_8_6 matches thought position.",
          "timestamp": "2025-05-29T12:25:39.933705",
          "event_type": "validation",
          "details": {
            "node_id": "0_8_6",
            "state": "13 / 10 = 1.3 (left: 1.3 6)",
            "thoughts": [
              "6 + 10 = 16 (left: 13 16)",
              "10 - 6 = 4 (left: 4 13)",
              "13 - 10 = 3 (left: 3 6)",
              "13 - 6 = 7 (left: 7 10)",
              "10 / 6 = 1.67 (left: 1.67 13)",
              "13 / 6 = 2.17 (left: 2.17 10)",
              "13 / 10 = 1.3 (left: 1.3 6)",
              "6 * 10 = 60 (left: 13 60)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_8_7",
          "result": "PASS",
          "reason": "node_id 0_8_7 matches thought position.",
          "timestamp": "2025-05-29T12:25:53.730922",
          "event_type": "validation",
          "details": {
            "node_id": "0_8_7",
            "state": "6 * 10 = 60 (left: 13 60)",
            "thoughts": [
              "6 + 10 = 16 (left: 13 16)",
              "10 - 6 = 4 (left: 4 13)",
              "13 - 10 = 3 (left: 3 6)",
              "13 - 6 = 7 (left: 7 10)",
              "10 / 6 = 1.67 (left: 1.67 13)",
              "13 / 6 = 2.17 (left: 2.17 10)",
              "13 / 10 = 1.3 (left: 1.3 6)",
              "6 * 10 = 60 (left: 13 60)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_9",
          "result": "PASS",
          "reason": "node_id 0_9 matches thought position.",
          "timestamp": "2025-05-29T12:26:07.440934",
          "event_type": "validation",
          "details": {
            "node_id": "0_9",
            "state": "10 / 2 = 5 (left: 5 8 13)",
            "thoughts": [
              "2 + 8 = 10 (left: 10 10 13)",
              "8 + 2 = 10 (left: 10 10 13)",
              "10 + 2 = 12 (left: 8 12 13)",
              "13 - 2 = 11 (left: 8 10 11)",
              "13 - 8 = 5 (left: 2 5 10)",
              "13 - 10 = 3 (left: 2 3 8)",
              "10 - 2 = 8 (left: 8 8 13)",
              "10 - 8 = 2 (left: 2 2 13)",
              "8 - 2 = 6 (left: 6 10 13)",
              "10 / 2 = 5 (left: 5 8 13)",
              "8 / 2 = 4 (left: 4 10 13)",
              "13 / 2 = 6.5 (left: 6.5 8 10)",
              "13 / 10 = 1.3 (left: 1.3 2 8)",
              "10 / 8 = 1.25 (left: 1.25 2 13)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_9_0",
          "result": "PASS",
          "reason": "node_id 0_9_0 matches thought position.",
          "timestamp": "2025-05-29T12:26:28.569420",
          "event_type": "validation",
          "details": {
            "node_id": "0_9_0",
            "state": "5 + 8 = 13 (left: 13 13)",
            "thoughts": [
              "5 + 8 = 13 (left: 13 13)",
              "8 - 5 = 3 (left: 3 13)",
              "13 - 5 = 8 (left: 8 8)",
              "13 - 8 = 5 (left: 5 5)",
              "13 / 5 = 2.6 (left: 2.6 8)",
              "8 / 5 = 1.6 (left: 1.6 13)",
              "5 * 8 = 40 (left: 13 40)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_9_1",
          "result": "PASS",
          "reason": "node_id 0_9_1 matches thought position.",
          "timestamp": "2025-05-29T12:26:37.254920",
          "event_type": "validation",
          "details": {
            "node_id": "0_9_1",
            "state": "8 - 5 = 3 (left: 3 13)",
            "thoughts": [
              "5 + 8 = 13 (left: 13 13)",
              "8 - 5 = 3 (left: 3 13)",
              "13 - 5 = 8 (left: 8 8)",
              "13 - 8 = 5 (left: 5 5)",
              "13 / 5 = 2.6 (left: 2.6 8)",
              "8 / 5 = 1.6 (left: 1.6 13)",
              "5 * 8 = 40 (left: 13 40)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_9_2",
          "result": "PASS",
          "reason": "node_id 0_9_2 matches thought position.",
          "timestamp": "2025-05-29T12:26:45.852946",
          "event_type": "validation",
          "details": {
            "node_id": "0_9_2",
            "state": "13 - 5 = 8 (left: 8 8)",
            "thoughts": [
              "5 + 8 = 13 (left: 13 13)",
              "8 - 5 = 3 (left: 3 13)",
              "13 - 5 = 8 (left: 8 8)",
              "13 - 8 = 5 (left: 5 5)",
              "13 / 5 = 2.6 (left: 2.6 8)",
              "8 / 5 = 1.6 (left: 1.6 13)",
              "5 * 8 = 40 (left: 13 40)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_9_3",
          "result": "PASS",
          "reason": "node_id 0_9_3 matches thought position.",
          "timestamp": "2025-05-29T12:26:56.130735",
          "event_type": "validation",
          "details": {
            "node_id": "0_9_3",
            "state": "13 - 8 = 5 (left: 5 5)",
            "thoughts": [
              "5 + 8 = 13 (left: 13 13)",
              "8 - 5 = 3 (left: 3 13)",
              "13 - 5 = 8 (left: 8 8)",
              "13 - 8 = 5 (left: 5 5)",
              "13 / 5 = 2.6 (left: 2.6 8)",
              "8 / 5 = 1.6 (left: 1.6 13)",
              "5 * 8 = 40 (left: 13 40)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_9_4",
          "result": "PASS",
          "reason": "node_id 0_9_4 matches thought position.",
          "timestamp": "2025-05-29T12:27:06.492914",
          "event_type": "validation",
          "details": {
            "node_id": "0_9_4",
            "state": "13 / 5 = 2.6 (left: 2.6 8)",
            "thoughts": [
              "5 + 8 = 13 (left: 13 13)",
              "8 - 5 = 3 (left: 3 13)",
              "13 - 5 = 8 (left: 8 8)",
              "13 - 8 = 5 (left: 5 5)",
              "13 / 5 = 2.6 (left: 2.6 8)",
              "8 / 5 = 1.6 (left: 1.6 13)",
              "5 * 8 = 40 (left: 13 40)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_9_5",
          "result": "PASS",
          "reason": "node_id 0_9_5 matches thought position.",
          "timestamp": "2025-05-29T12:27:21.896224",
          "event_type": "validation",
          "details": {
            "node_id": "0_9_5",
            "state": "8 / 5 = 1.6 (left: 1.6 13)",
            "thoughts": [
              "5 + 8 = 13 (left: 13 13)",
              "8 - 5 = 3 (left: 3 13)",
              "13 - 5 = 8 (left: 8 8)",
              "13 - 8 = 5 (left: 5 5)",
              "13 / 5 = 2.6 (left: 2.6 8)",
              "8 / 5 = 1.6 (left: 1.6 13)",
              "5 * 8 = 40 (left: 13 40)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_9_6",
          "result": "PASS",
          "reason": "node_id 0_9_6 matches thought position.",
          "timestamp": "2025-05-29T12:27:30.645215",
          "event_type": "validation",
          "details": {
            "node_id": "0_9_6",
            "state": "5 * 8 = 40 (left: 13 40)",
            "thoughts": [
              "5 + 8 = 13 (left: 13 13)",
              "8 - 5 = 3 (left: 3 13)",
              "13 - 5 = 8 (left: 8 8)",
              "13 - 8 = 5 (left: 5 5)",
              "13 / 5 = 2.6 (left: 2.6 8)",
              "8 / 5 = 1.6 (left: 1.6 13)",
              "5 * 8 = 40 (left: 13 40)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_10",
          "result": "PASS",
          "reason": "node_id 0_10 matches thought position.",
          "timestamp": "2025-05-29T12:27:45.060508",
          "event_type": "validation",
          "details": {
            "node_id": "0_10",
            "state": "8 / 2 = 4 (left: 4 10 13)",
            "thoughts": [
              "2 + 8 = 10 (left: 10 10 13)",
              "8 + 2 = 10 (left: 10 10 13)",
              "10 + 2 = 12 (left: 8 12 13)",
              "13 - 2 = 11 (left: 8 10 11)",
              "13 - 8 = 5 (left: 2 5 10)",
              "13 - 10 = 3 (left: 2 3 8)",
              "10 - 2 = 8 (left: 8 8 13)",
              "10 - 8 = 2 (left: 2 2 13)",
              "8 - 2 = 6 (left: 6 10 13)",
              "10 / 2 = 5 (left: 5 8 13)",
              "8 / 2 = 4 (left: 4 10 13)",
              "13 / 2 = 6.5 (left: 6.5 8 10)",
              "13 / 10 = 1.3 (left: 1.3 2 8)",
              "10 / 8 = 1.25 (left: 1.25 2 13)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_11",
          "result": "PASS",
          "reason": "node_id 0_11 matches thought position.",
          "timestamp": "2025-05-29T12:27:57.090432",
          "event_type": "validation",
          "details": {
            "node_id": "0_11",
            "state": "13 / 2 = 6.5 (left: 6.5 8 10)",
            "thoughts": [
              "2 + 8 = 10 (left: 10 10 13)",
              "8 + 2 = 10 (left: 10 10 13)",
              "10 + 2 = 12 (left: 8 12 13)",
              "13 - 2 = 11 (left: 8 10 11)",
              "13 - 8 = 5 (left: 2 5 10)",
              "13 - 10 = 3 (left: 2 3 8)",
              "10 - 2 = 8 (left: 8 8 13)",
              "10 - 8 = 2 (left: 2 2 13)",
              "8 - 2 = 6 (left: 6 10 13)",
              "10 / 2 = 5 (left: 5 8 13)",
              "8 / 2 = 4 (left: 4 10 13)",
              "13 / 2 = 6.5 (left: 6.5 8 10)",
              "13 / 10 = 1.3 (left: 1.3 2 8)",
              "10 / 8 = 1.25 (left: 1.25 2 13)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_11_0",
          "result": "PASS",
          "reason": "node_id 0_11_0 matches thought position.",
          "timestamp": "2025-05-29T12:28:21.405751",
          "event_type": "validation",
          "details": {
            "node_id": "0_11_0",
            "state": "6.5 + 8 = 14.5 (left: 10 14.5)",
            "thoughts": [
              "6.5 + 8 = 14.5 (left: 10 14.5)",
              "8 - 6.5 = 1.5 (left: 1.5 10)",
              "10 - 6.5 = 3.5 (left: 3.5 8)",
              "10 - 8 = 2 (left: 2 6.5)",
              "8 * 6.5 = 52 (left: 10 52)",
              "10 / 6.5 = ~1.54 (left: ~1.54 8)",
              "6.5 / 8 = ~0.81 (left: ~0.81 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_11_1",
          "result": "PASS",
          "reason": "node_id 0_11_1 matches thought position.",
          "timestamp": "2025-05-29T12:28:33.904750",
          "event_type": "validation",
          "details": {
            "node_id": "0_11_1",
            "state": "8 - 6.5 = 1.5 (left: 1.5 10)",
            "thoughts": [
              "6.5 + 8 = 14.5 (left: 10 14.5)",
              "8 - 6.5 = 1.5 (left: 1.5 10)",
              "10 - 6.5 = 3.5 (left: 3.5 8)",
              "10 - 8 = 2 (left: 2 6.5)",
              "8 * 6.5 = 52 (left: 10 52)",
              "10 / 6.5 = ~1.54 (left: ~1.54 8)",
              "6.5 / 8 = ~0.81 (left: ~0.81 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_11_2",
          "result": "PASS",
          "reason": "node_id 0_11_2 matches thought position.",
          "timestamp": "2025-05-29T12:28:46.314287",
          "event_type": "validation",
          "details": {
            "node_id": "0_11_2",
            "state": "10 - 6.5 = 3.5 (left: 3.5 8)",
            "thoughts": [
              "6.5 + 8 = 14.5 (left: 10 14.5)",
              "8 - 6.5 = 1.5 (left: 1.5 10)",
              "10 - 6.5 = 3.5 (left: 3.5 8)",
              "10 - 8 = 2 (left: 2 6.5)",
              "8 * 6.5 = 52 (left: 10 52)",
              "10 / 6.5 = ~1.54 (left: ~1.54 8)",
              "6.5 / 8 = ~0.81 (left: ~0.81 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_11_3",
          "result": "PASS",
          "reason": "node_id 0_11_3 matches thought position.",
          "timestamp": "2025-05-29T12:28:56.397299",
          "event_type": "validation",
          "details": {
            "node_id": "0_11_3",
            "state": "10 - 8 = 2 (left: 2 6.5)",
            "thoughts": [
              "6.5 + 8 = 14.5 (left: 10 14.5)",
              "8 - 6.5 = 1.5 (left: 1.5 10)",
              "10 - 6.5 = 3.5 (left: 3.5 8)",
              "10 - 8 = 2 (left: 2 6.5)",
              "8 * 6.5 = 52 (left: 10 52)",
              "10 / 6.5 = ~1.54 (left: ~1.54 8)",
              "6.5 / 8 = ~0.81 (left: ~0.81 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_11_4",
          "result": "PASS",
          "reason": "node_id 0_11_4 matches thought position.",
          "timestamp": "2025-05-29T12:29:12.496881",
          "event_type": "validation",
          "details": {
            "node_id": "0_11_4",
            "state": "8 * 6.5 = 52 (left: 10 52)",
            "thoughts": [
              "6.5 + 8 = 14.5 (left: 10 14.5)",
              "8 - 6.5 = 1.5 (left: 1.5 10)",
              "10 - 6.5 = 3.5 (left: 3.5 8)",
              "10 - 8 = 2 (left: 2 6.5)",
              "8 * 6.5 = 52 (left: 10 52)",
              "10 / 6.5 = ~1.54 (left: ~1.54 8)",
              "6.5 / 8 = ~0.81 (left: ~0.81 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_11_5",
          "result": "PASS",
          "reason": "node_id 0_11_5 matches thought position.",
          "timestamp": "2025-05-29T12:29:23.974937",
          "event_type": "validation",
          "details": {
            "node_id": "0_11_5",
            "state": "10 / 6.5 = ~1.54 (left: ~1.54 8)",
            "thoughts": [
              "6.5 + 8 = 14.5 (left: 10 14.5)",
              "8 - 6.5 = 1.5 (left: 1.5 10)",
              "10 - 6.5 = 3.5 (left: 3.5 8)",
              "10 - 8 = 2 (left: 2 6.5)",
              "8 * 6.5 = 52 (left: 10 52)",
              "10 / 6.5 = ~1.54 (left: ~1.54 8)",
              "6.5 / 8 = ~0.81 (left: ~0.81 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_11_6",
          "result": "PASS",
          "reason": "node_id 0_11_6 matches thought position.",
          "timestamp": "2025-05-29T12:29:35.238484",
          "event_type": "validation",
          "details": {
            "node_id": "0_11_6",
            "state": "6.5 / 8 = ~0.81 (left: ~0.81 10)",
            "thoughts": [
              "6.5 + 8 = 14.5 (left: 10 14.5)",
              "8 - 6.5 = 1.5 (left: 1.5 10)",
              "10 - 6.5 = 3.5 (left: 3.5 8)",
              "10 - 8 = 2 (left: 2 6.5)",
              "8 * 6.5 = 52 (left: 10 52)",
              "10 / 6.5 = ~1.54 (left: ~1.54 8)",
              "6.5 / 8 = ~0.81 (left: ~0.81 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_12",
          "result": "PASS",
          "reason": "node_id 0_12 matches thought position.",
          "timestamp": "2025-05-29T12:29:48.295610",
          "event_type": "validation",
          "details": {
            "node_id": "0_12",
            "state": "13 / 10 = 1.3 (left: 1.3 2 8)",
            "thoughts": [
              "2 + 8 = 10 (left: 10 10 13)",
              "8 + 2 = 10 (left: 10 10 13)",
              "10 + 2 = 12 (left: 8 12 13)",
              "13 - 2 = 11 (left: 8 10 11)",
              "13 - 8 = 5 (left: 2 5 10)",
              "13 - 10 = 3 (left: 2 3 8)",
              "10 - 2 = 8 (left: 8 8 13)",
              "10 - 8 = 2 (left: 2 2 13)",
              "8 - 2 = 6 (left: 6 10 13)",
              "10 / 2 = 5 (left: 5 8 13)",
              "8 / 2 = 4 (left: 4 10 13)",
              "13 / 2 = 6.5 (left: 6.5 8 10)",
              "13 / 10 = 1.3 (left: 1.3 2 8)",
              "10 / 8 = 1.25 (left: 1.25 2 13)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_12_0",
          "result": "PASS",
          "reason": "node_id 0_12_0 matches thought position.",
          "timestamp": "2025-05-29T12:30:14.923477",
          "event_type": "validation",
          "details": {
            "node_id": "0_12_0",
            "state": "1.3 + 2 = 3.3 (left: 3.3 8)",
            "thoughts": [
              "1.3 + 2 = 3.3 (left: 3.3 8)",
              "2 - 1.3 = 0.7 (left: 0.7 8)",
              "8 - 1.3 = 6.7 (left: 2 6.7)",
              "1.3 * 2 = 2.6 (left: 2.6 8)",
              "8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
              "2 * 8 = 16 (left: 1.3 16)",
              "8 - 2 = 6 (left: 1.3 6)",
              "8 / 2 = 4 (left: 1.3 4)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_12_1",
          "result": "PASS",
          "reason": "node_id 0_12_1 matches thought position.",
          "timestamp": "2025-05-29T12:30:30.449436",
          "event_type": "validation",
          "details": {
            "node_id": "0_12_1",
            "state": "2 - 1.3 = 0.7 (left: 0.7 8)",
            "thoughts": [
              "1.3 + 2 = 3.3 (left: 3.3 8)",
              "2 - 1.3 = 0.7 (left: 0.7 8)",
              "8 - 1.3 = 6.7 (left: 2 6.7)",
              "1.3 * 2 = 2.6 (left: 2.6 8)",
              "8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
              "2 * 8 = 16 (left: 1.3 16)",
              "8 - 2 = 6 (left: 1.3 6)",
              "8 / 2 = 4 (left: 1.3 4)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_12_2",
          "result": "PASS",
          "reason": "node_id 0_12_2 matches thought position.",
          "timestamp": "2025-05-29T12:30:43.522894",
          "event_type": "validation",
          "details": {
            "node_id": "0_12_2",
            "state": "8 - 1.3 = 6.7 (left: 2 6.7)",
            "thoughts": [
              "1.3 + 2 = 3.3 (left: 3.3 8)",
              "2 - 1.3 = 0.7 (left: 0.7 8)",
              "8 - 1.3 = 6.7 (left: 2 6.7)",
              "1.3 * 2 = 2.6 (left: 2.6 8)",
              "8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
              "2 * 8 = 16 (left: 1.3 16)",
              "8 - 2 = 6 (left: 1.3 6)",
              "8 / 2 = 4 (left: 1.3 4)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_12_3",
          "result": "PASS",
          "reason": "node_id 0_12_3 matches thought position.",
          "timestamp": "2025-05-29T12:31:01.951300",
          "event_type": "validation",
          "details": {
            "node_id": "0_12_3",
            "state": "1.3 * 2 = 2.6 (left: 2.6 8)",
            "thoughts": [
              "1.3 + 2 = 3.3 (left: 3.3 8)",
              "2 - 1.3 = 0.7 (left: 0.7 8)",
              "8 - 1.3 = 6.7 (left: 2 6.7)",
              "1.3 * 2 = 2.6 (left: 2.6 8)",
              "8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
              "2 * 8 = 16 (left: 1.3 16)",
              "8 - 2 = 6 (left: 1.3 6)",
              "8 / 2 = 4 (left: 1.3 4)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_12_4",
          "result": "PASS",
          "reason": "node_id 0_12_4 matches thought position.",
          "timestamp": "2025-05-29T12:31:14.742638",
          "event_type": "validation",
          "details": {
            "node_id": "0_12_4",
            "state": "8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
            "thoughts": [
              "1.3 + 2 = 3.3 (left: 3.3 8)",
              "2 - 1.3 = 0.7 (left: 0.7 8)",
              "8 - 1.3 = 6.7 (left: 2 6.7)",
              "1.3 * 2 = 2.6 (left: 2.6 8)",
              "8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
              "2 * 8 = 16 (left: 1.3 16)",
              "8 - 2 = 6 (left: 1.3 6)",
              "8 / 2 = 4 (left: 1.3 4)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_12_5",
          "result": "PASS",
          "reason": "node_id 0_12_5 matches thought position.",
          "timestamp": "2025-05-29T12:31:29.626717",
          "event_type": "validation",
          "details": {
            "node_id": "0_12_5",
            "state": "2 * 8 = 16 (left: 1.3 16)",
            "thoughts": [
              "1.3 + 2 = 3.3 (left: 3.3 8)",
              "2 - 1.3 = 0.7 (left: 0.7 8)",
              "8 - 1.3 = 6.7 (left: 2 6.7)",
              "1.3 * 2 = 2.6 (left: 2.6 8)",
              "8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
              "2 * 8 = 16 (left: 1.3 16)",
              "8 - 2 = 6 (left: 1.3 6)",
              "8 / 2 = 4 (left: 1.3 4)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_12_6",
          "result": "PASS",
          "reason": "node_id 0_12_6 matches thought position.",
          "timestamp": "2025-05-29T12:31:40.257113",
          "event_type": "validation",
          "details": {
            "node_id": "0_12_6",
            "state": "8 - 2 = 6 (left: 1.3 6)",
            "thoughts": [
              "1.3 + 2 = 3.3 (left: 3.3 8)",
              "2 - 1.3 = 0.7 (left: 0.7 8)",
              "8 - 1.3 = 6.7 (left: 2 6.7)",
              "1.3 * 2 = 2.6 (left: 2.6 8)",
              "8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
              "2 * 8 = 16 (left: 1.3 16)",
              "8 - 2 = 6 (left: 1.3 6)",
              "8 / 2 = 4 (left: 1.3 4)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_12_7",
          "result": "PASS",
          "reason": "node_id 0_12_7 matches thought position.",
          "timestamp": "2025-05-29T12:31:52.695759",
          "event_type": "validation",
          "details": {
            "node_id": "0_12_7",
            "state": "8 / 2 = 4 (left: 1.3 4)",
            "thoughts": [
              "1.3 + 2 = 3.3 (left: 3.3 8)",
              "2 - 1.3 = 0.7 (left: 0.7 8)",
              "8 - 1.3 = 6.7 (left: 2 6.7)",
              "1.3 * 2 = 2.6 (left: 2.6 8)",
              "8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
              "2 * 8 = 16 (left: 1.3 16)",
              "8 - 2 = 6 (left: 1.3 6)",
              "8 / 2 = 4 (left: 1.3 4)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_13",
          "result": "PASS",
          "reason": "node_id 0_13 matches thought position.",
          "timestamp": "2025-05-29T12:32:05.830700",
          "event_type": "validation",
          "details": {
            "node_id": "0_13",
            "state": "10 / 8 = 1.25 (left: 1.25 2 13)",
            "thoughts": [
              "2 + 8 = 10 (left: 10 10 13)",
              "8 + 2 = 10 (left: 10 10 13)",
              "10 + 2 = 12 (left: 8 12 13)",
              "13 - 2 = 11 (left: 8 10 11)",
              "13 - 8 = 5 (left: 2 5 10)",
              "13 - 10 = 3 (left: 2 3 8)",
              "10 - 2 = 8 (left: 8 8 13)",
              "10 - 8 = 2 (left: 2 2 13)",
              "8 - 2 = 6 (left: 6 10 13)",
              "10 / 2 = 5 (left: 5 8 13)",
              "8 / 2 = 4 (left: 4 10 13)",
              "13 / 2 = 6.5 (left: 6.5 8 10)",
              "13 / 10 = 1.3 (left: 1.3 2 8)",
              "10 / 8 = 1.25 (left: 1.25 2 13)"
            ]
          }
        }
      ]
    },
    "pseudo_recursive_call": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-29T12:21:57.753627",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_8",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-29T12:24:14.698052",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_9",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-29T12:26:07.440789",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_11",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-29T12:27:57.090232",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_12",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-29T12:29:48.295389",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        }
      ]
    },
    "child_state": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "child_state",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "State validation passed: Last thought '13 - 10 = 3 (left: 2 3 8)' found in parent's thoughts",
          "timestamp": "2025-05-29T12:21:57.753681",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '13 - 10 = 3 (left: 2 3 8)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "2 + 8 = 10 (left: 10 10 13)",
              "8 + 2 = 10 (left: 10 10 13)",
              "10 + 2 = 12 (left: 8 12 13)",
              "13 - 2 = 11 (left: 8 10 11)",
              "13 - 8 = 5 (left: 2 5 10)",
              "13 - 10 = 3 (left: 2 3 8)",
              "10 - 2 = 8 (left: 8 8 13)",
              "10 - 8 = 2 (left: 2 2 13)",
              "8 - 2 = 6 (left: 6 10 13)",
              "10 / 2 = 5 (left: 5 8 13)",
              "8 / 2 = 4 (left: 4 10 13)",
              "13 / 2 = 6.5 (left: 6.5 8 10)",
              "13 / 10 = 1.3 (left: 1.3 2 8)",
              "10 / 8 = 1.25 (left: 1.25 2 13)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_8",
          "result": "PASS",
          "reason": "State validation passed: Last thought '8 - 2 = 6 (left: 6 10 13)' found in parent's thoughts",
          "timestamp": "2025-05-29T12:24:14.698108",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '8 - 2 = 6 (left: 6 10 13)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "2 + 8 = 10 (left: 10 10 13)",
              "8 + 2 = 10 (left: 10 10 13)",
              "10 + 2 = 12 (left: 8 12 13)",
              "13 - 2 = 11 (left: 8 10 11)",
              "13 - 8 = 5 (left: 2 5 10)",
              "13 - 10 = 3 (left: 2 3 8)",
              "10 - 2 = 8 (left: 8 8 13)",
              "10 - 8 = 2 (left: 2 2 13)",
              "8 - 2 = 6 (left: 6 10 13)",
              "10 / 2 = 5 (left: 5 8 13)",
              "8 / 2 = 4 (left: 4 10 13)",
              "13 / 2 = 6.5 (left: 6.5 8 10)",
              "13 / 10 = 1.3 (left: 1.3 2 8)",
              "10 / 8 = 1.25 (left: 1.25 2 13)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_9",
          "result": "PASS",
          "reason": "State validation passed: Last thought '10 / 2 = 5 (left: 5 8 13)' found in parent's thoughts",
          "timestamp": "2025-05-29T12:26:07.440850",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '10 / 2 = 5 (left: 5 8 13)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "2 + 8 = 10 (left: 10 10 13)",
              "8 + 2 = 10 (left: 10 10 13)",
              "10 + 2 = 12 (left: 8 12 13)",
              "13 - 2 = 11 (left: 8 10 11)",
              "13 - 8 = 5 (left: 2 5 10)",
              "13 - 10 = 3 (left: 2 3 8)",
              "10 - 2 = 8 (left: 8 8 13)",
              "10 - 8 = 2 (left: 2 2 13)",
              "8 - 2 = 6 (left: 6 10 13)",
              "10 / 2 = 5 (left: 5 8 13)",
              "8 / 2 = 4 (left: 4 10 13)",
              "13 / 2 = 6.5 (left: 6.5 8 10)",
              "13 / 10 = 1.3 (left: 1.3 2 8)",
              "10 / 8 = 1.25 (left: 1.25 2 13)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_11",
          "result": "PASS",
          "reason": "State validation passed: Last thought '13 / 2 = 6.5 (left: 6.5 8 10)' found in parent's thoughts",
          "timestamp": "2025-05-29T12:27:57.090319",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '13 / 2 = 6.5 (left: 6.5 8 10)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "2 + 8 = 10 (left: 10 10 13)",
              "8 + 2 = 10 (left: 10 10 13)",
              "10 + 2 = 12 (left: 8 12 13)",
              "13 - 2 = 11 (left: 8 10 11)",
              "13 - 8 = 5 (left: 2 5 10)",
              "13 - 10 = 3 (left: 2 3 8)",
              "10 - 2 = 8 (left: 8 8 13)",
              "10 - 8 = 2 (left: 2 2 13)",
              "8 - 2 = 6 (left: 6 10 13)",
              "10 / 2 = 5 (left: 5 8 13)",
              "8 / 2 = 4 (left: 4 10 13)",
              "13 / 2 = 6.5 (left: 6.5 8 10)",
              "13 / 10 = 1.3 (left: 1.3 2 8)",
              "10 / 8 = 1.25 (left: 1.25 2 13)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_12",
          "result": "PASS",
          "reason": "State validation passed: Last thought '13 / 10 = 1.3 (left: 1.3 2 8)' found in parent's thoughts",
          "timestamp": "2025-05-29T12:29:48.295451",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '13 / 10 = 1.3 (left: 1.3 2 8)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "2 + 8 = 10 (left: 10 10 13)",
              "8 + 2 = 10 (left: 10 10 13)",
              "10 + 2 = 12 (left: 8 12 13)",
              "13 - 2 = 11 (left: 8 10 11)",
              "13 - 8 = 5 (left: 2 5 10)",
              "13 - 10 = 3 (left: 2 3 8)",
              "10 - 2 = 8 (left: 8 8 13)",
              "10 - 8 = 2 (left: 2 2 13)",
              "8 - 2 = 6 (left: 6 10 13)",
              "10 / 2 = 5 (left: 5 8 13)",
              "8 / 2 = 4 (left: 4 10 13)",
              "13 / 2 = 6.5 (left: 6.5 8 10)",
              "13 / 10 = 1.3 (left: 1.3 2 8)",
              "10 / 8 = 1.25 (left: 1.25 2 13)"
            ],
            "parent_state": null
          }
        }
      ]
    },
    "node_state": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "node_state",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-29T12:22:08.710359",
          "event_type": "validation",
          "details": {
            "expected_state": "13 - 10 = 3 (left: 2 3 8)",
            "actual_state": "13 - 10 = 3 (left: 2 3 8)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_8",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-29T12:24:23.800863",
          "event_type": "validation",
          "details": {
            "expected_state": "8 - 2 = 6 (left: 6 10 13)",
            "actual_state": "8 - 2 = 6 (left: 6 10 13)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_9",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-29T12:26:18.428429",
          "event_type": "validation",
          "details": {
            "expected_state": "10 / 2 = 5 (left: 5 8 13)",
            "actual_state": "10 / 2 = 5 (left: 5 8 13)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_11",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-29T12:28:09.548453",
          "event_type": "validation",
          "details": {
            "expected_state": "13 / 2 = 6.5 (left: 6.5 8 10)",
            "actual_state": "13 / 2 = 6.5 (left: 6.5 8 10)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_12",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-29T12:29:59.608705",
          "event_type": "validation",
          "details": {
            "expected_state": "13 / 10 = 1.3 (left: 1.3 2 8)",
            "actual_state": "13 / 10 = 1.3 (left: 1.3 2 8)"
          }
        }
      ]
    },
    "backtracking_I": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_I",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_5; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-29T12:23:48.270789",
          "event_type": "validation",
          "details": {
            "popped_node": "0_5",
            "expected_popped": "0_5",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_5",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_8",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_8; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-29T12:25:56.719989",
          "event_type": "validation",
          "details": {
            "popped_node": "0_8",
            "expected_popped": "0_8",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_8",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_9",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_9; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-29T12:27:33.796063",
          "event_type": "validation",
          "details": {
            "popped_node": "0_9",
            "expected_popped": "0_9",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_9",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_11",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_11; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-29T12:29:38.416992",
          "event_type": "validation",
          "details": {
            "popped_node": "0_11",
            "expected_popped": "0_11",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_11",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_12",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_12; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-29T12:31:55.851122",
          "event_type": "validation",
          "details": {
            "popped_node": "0_12",
            "expected_popped": "0_12",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_12",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
          "timestamp": "2025-05-29T12:32:08.877641",
          "event_type": "validation",
          "details": {
            "popped_node": "0",
            "expected_popped": "0",
            "backtrack_to": "None",
            "expected_parent": "None",
            "validation_details": [
              "Correctly popped expected node 0",
              "Correctly backtracking to parent 'None'"
            ]
          }
        }
      ]
    },
    "backtracking_III": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_III",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "All 8 children explored - valid backtrack",
          "timestamp": "2025-05-29T12:23:48.270820",
          "event_type": "validation",
          "details": {
            "total_thoughts": 8,
            "evaluated_children": 8
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_8",
          "result": "PASS",
          "reason": "All 8 children explored - valid backtrack",
          "timestamp": "2025-05-29T12:25:56.720023",
          "event_type": "validation",
          "details": {
            "total_thoughts": 8,
            "evaluated_children": 8
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_9",
          "result": "PASS",
          "reason": "All 7 children explored - valid backtrack",
          "timestamp": "2025-05-29T12:27:33.796100",
          "event_type": "validation",
          "details": {
            "total_thoughts": 7,
            "evaluated_children": 7
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_11",
          "result": "PASS",
          "reason": "All 7 children explored - valid backtrack",
          "timestamp": "2025-05-29T12:29:38.417018",
          "event_type": "validation",
          "details": {
            "total_thoughts": 7,
            "evaluated_children": 7
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_12",
          "result": "PASS",
          "reason": "All 8 children explored - valid backtrack",
          "timestamp": "2025-05-29T12:31:55.851153",
          "event_type": "validation",
          "details": {
            "total_thoughts": 8,
            "evaluated_children": 8
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0",
          "result": "PASS",
          "reason": "All 14 children explored - valid backtrack",
          "timestamp": "2025-05-29T12:32:08.877677",
          "event_type": "validation",
          "details": {
            "total_thoughts": 14,
            "evaluated_children": 14
          }
        }
      ]
    },
    "backtracking_IV": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_IV",
          "node_id": "0_6",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_6 follows 0_5",
          "timestamp": "2025-05-29T12:23:57.399462",
          "event_type": "validation",
          "details": {
            "popped_node": "0_5",
            "current_node": "0_6",
            "expected_index": 6,
            "actual_index": 6
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_9",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_9 follows 0_8",
          "timestamp": "2025-05-29T12:26:07.440896",
          "event_type": "validation",
          "details": {
            "popped_node": "0_8",
            "current_node": "0_9",
            "expected_index": 9,
            "actual_index": 9
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_10",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_10 follows 0_9",
          "timestamp": "2025-05-29T12:27:45.060421",
          "event_type": "validation",
          "details": {
            "popped_node": "0_9",
            "current_node": "0_10",
            "expected_index": 10,
            "actual_index": 10
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_12",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_12 follows 0_11",
          "timestamp": "2025-05-29T12:29:48.295516",
          "event_type": "validation",
          "details": {
            "popped_node": "0_11",
            "current_node": "0_12",
            "expected_index": 12,
            "actual_index": 12
          }
        }
      ]
    },
    "looping_order": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "looping_order",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.596954",
          "event_type": "validation",
          "details": {
            "state": "2 + 8 = 10 (left: 10 10 13)",
            "thought": "2 + 8 = 10 (left: 10 10 13)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.596985",
          "event_type": "validation",
          "details": {
            "state": "8 + 2 = 10 (left: 10 10 13)",
            "thought": "8 + 2 = 10 (left: 10 10 13)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.596993",
          "event_type": "validation",
          "details": {
            "state": "10 + 2 = 12 (left: 8 12 13)",
            "thought": "10 + 2 = 12 (left: 8 12 13)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.596999",
          "event_type": "validation",
          "details": {
            "state": "13 - 2 = 11 (left: 8 10 11)",
            "thought": "13 - 2 = 11 (left: 8 10 11)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597004",
          "event_type": "validation",
          "details": {
            "state": "13 - 8 = 5 (left: 2 5 10)",
            "thought": "13 - 8 = 5 (left: 2 5 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597010",
          "event_type": "validation",
          "details": {
            "state": "13 - 10 = 3 (left: 2 3 8)",
            "thought": "13 - 10 = 3 (left: 2 3 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597016",
          "event_type": "validation",
          "details": {
            "state": "10 - 2 = 8 (left: 8 8 13)",
            "thought": "10 - 2 = 8 (left: 8 8 13)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_7",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597023",
          "event_type": "validation",
          "details": {
            "state": "10 - 8 = 2 (left: 2 2 13)",
            "thought": "10 - 8 = 2 (left: 2 2 13)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_8",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597028",
          "event_type": "validation",
          "details": {
            "state": "8 - 2 = 6 (left: 6 10 13)",
            "thought": "8 - 2 = 6 (left: 6 10 13)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_9",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597034",
          "event_type": "validation",
          "details": {
            "state": "10 / 2 = 5 (left: 5 8 13)",
            "thought": "10 / 2 = 5 (left: 5 8 13)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_10",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597040",
          "event_type": "validation",
          "details": {
            "state": "8 / 2 = 4 (left: 4 10 13)",
            "thought": "8 / 2 = 4 (left: 4 10 13)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_11",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597045",
          "event_type": "validation",
          "details": {
            "state": "13 / 2 = 6.5 (left: 6.5 8 10)",
            "thought": "13 / 2 = 6.5 (left: 6.5 8 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_12",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597052",
          "event_type": "validation",
          "details": {
            "state": "13 / 10 = 1.3 (left: 1.3 2 8)",
            "thought": "13 / 10 = 1.3 (left: 1.3 2 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_13",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597066",
          "event_type": "validation",
          "details": {
            "state": "10 / 8 = 1.25 (left: 1.25 2 13)",
            "thought": "10 / 8 = 1.25 (left: 1.25 2 13)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597150",
          "event_type": "validation",
          "details": {
            "state": "2 + 3 = 5 (left: 5 8)",
            "thought": "2 + 3 = 5 (left: 5 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597157",
          "event_type": "validation",
          "details": {
            "state": "3 - 2 = 1 (left: 1 8)",
            "thought": "3 - 2 = 1 (left: 1 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597162",
          "event_type": "validation",
          "details": {
            "state": "8 - 2 = 6 (left: 3 6)",
            "thought": "8 - 2 = 6 (left: 3 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597168",
          "event_type": "validation",
          "details": {
            "state": "8 - 3 = 5 (left: 2 5)",
            "thought": "8 - 3 = 5 (left: 2 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597174",
          "event_type": "validation",
          "details": {
            "state": "2 * 3 = 6 (left: 6 8)",
            "thought": "2 * 3 = 6 (left: 6 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597186",
          "event_type": "validation",
          "details": {
            "state": "3 * 2 = 6 (left: 6 8)",
            "thought": "3 * 2 = 6 (left: 6 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597193",
          "event_type": "validation",
          "details": {
            "state": "8 / 2 = 4 (left: 3 4)",
            "thought": "8 / 2 = 4 (left: 3 4)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5_7",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597199",
          "event_type": "validation",
          "details": {
            "state": "8 / 3 = 2.67 (left: 2 2.67)",
            "thought": "8 / 3 = 2.67 (left: 2 2.67)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_8_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597418",
          "event_type": "validation",
          "details": {
            "state": "6 + 10 = 16 (left: 13 16)",
            "thought": "6 + 10 = 16 (left: 13 16)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_8_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597439",
          "event_type": "validation",
          "details": {
            "state": "10 - 6 = 4 (left: 4 13)",
            "thought": "10 - 6 = 4 (left: 4 13)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_8_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597447",
          "event_type": "validation",
          "details": {
            "state": "13 - 10 = 3 (left: 3 6)",
            "thought": "13 - 10 = 3 (left: 3 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_8_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597454",
          "event_type": "validation",
          "details": {
            "state": "13 - 6 = 7 (left: 7 10)",
            "thought": "13 - 6 = 7 (left: 7 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_8_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597460",
          "event_type": "validation",
          "details": {
            "state": "10 / 6 = 1.67 (left: 1.67 13)",
            "thought": "10 / 6 = 1.67 (left: 1.67 13)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_8_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597466",
          "event_type": "validation",
          "details": {
            "state": "13 / 6 = 2.17 (left: 2.17 10)",
            "thought": "13 / 6 = 2.17 (left: 2.17 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_8_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597474",
          "event_type": "validation",
          "details": {
            "state": "13 / 10 = 1.3 (left: 1.3 6)",
            "thought": "13 / 10 = 1.3 (left: 1.3 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_8_7",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597480",
          "event_type": "validation",
          "details": {
            "state": "6 * 10 = 60 (left: 13 60)",
            "thought": "6 * 10 = 60 (left: 13 60)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_9_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597626",
          "event_type": "validation",
          "details": {
            "state": "5 + 8 = 13 (left: 13 13)",
            "thought": "5 + 8 = 13 (left: 13 13)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_9_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597640",
          "event_type": "validation",
          "details": {
            "state": "8 - 5 = 3 (left: 3 13)",
            "thought": "8 - 5 = 3 (left: 3 13)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_9_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597649",
          "event_type": "validation",
          "details": {
            "state": "13 - 5 = 8 (left: 8 8)",
            "thought": "13 - 5 = 8 (left: 8 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_9_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597669",
          "event_type": "validation",
          "details": {
            "state": "13 - 8 = 5 (left: 5 5)",
            "thought": "13 - 8 = 5 (left: 5 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_9_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597677",
          "event_type": "validation",
          "details": {
            "state": "13 / 5 = 2.6 (left: 2.6 8)",
            "thought": "13 / 5 = 2.6 (left: 2.6 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_9_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597687",
          "event_type": "validation",
          "details": {
            "state": "8 / 5 = 1.6 (left: 1.6 13)",
            "thought": "8 / 5 = 1.6 (left: 1.6 13)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_9_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597695",
          "event_type": "validation",
          "details": {
            "state": "5 * 8 = 40 (left: 13 40)",
            "thought": "5 * 8 = 40 (left: 13 40)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_11_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597825",
          "event_type": "validation",
          "details": {
            "state": "6.5 + 8 = 14.5 (left: 10 14.5)",
            "thought": "6.5 + 8 = 14.5 (left: 10 14.5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_11_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597839",
          "event_type": "validation",
          "details": {
            "state": "8 - 6.5 = 1.5 (left: 1.5 10)",
            "thought": "8 - 6.5 = 1.5 (left: 1.5 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_11_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597849",
          "event_type": "validation",
          "details": {
            "state": "10 - 6.5 = 3.5 (left: 3.5 8)",
            "thought": "10 - 6.5 = 3.5 (left: 3.5 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_11_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597859",
          "event_type": "validation",
          "details": {
            "state": "10 - 8 = 2 (left: 2 6.5)",
            "thought": "10 - 8 = 2 (left: 2 6.5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_11_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597869",
          "event_type": "validation",
          "details": {
            "state": "8 * 6.5 = 52 (left: 10 52)",
            "thought": "8 * 6.5 = 52 (left: 10 52)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_11_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597879",
          "event_type": "validation",
          "details": {
            "state": "10 / 6.5 = ~1.54 (left: ~1.54 8)",
            "thought": "10 / 6.5 = ~1.54 (left: ~1.54 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_11_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597893",
          "event_type": "validation",
          "details": {
            "state": "6.5 / 8 = ~0.81 (left: ~0.81 10)",
            "thought": "6.5 / 8 = ~0.81 (left: ~0.81 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_12_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.597997",
          "event_type": "validation",
          "details": {
            "state": "1.3 + 2 = 3.3 (left: 3.3 8)",
            "thought": "1.3 + 2 = 3.3 (left: 3.3 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_12_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.598007",
          "event_type": "validation",
          "details": {
            "state": "2 - 1.3 = 0.7 (left: 0.7 8)",
            "thought": "2 - 1.3 = 0.7 (left: 0.7 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_12_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.598014",
          "event_type": "validation",
          "details": {
            "state": "8 - 1.3 = 6.7 (left: 2 6.7)",
            "thought": "8 - 1.3 = 6.7 (left: 2 6.7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_12_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.598021",
          "event_type": "validation",
          "details": {
            "state": "1.3 * 2 = 2.6 (left: 2.6 8)",
            "thought": "1.3 * 2 = 2.6 (left: 2.6 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_12_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.598028",
          "event_type": "validation",
          "details": {
            "state": "8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
            "thought": "8 / 1.3 = 6.15 (approx) (left: 2 6.15)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_12_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.598034",
          "event_type": "validation",
          "details": {
            "state": "2 * 8 = 16 (left: 1.3 16)",
            "thought": "2 * 8 = 16 (left: 1.3 16)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_12_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.598040",
          "event_type": "validation",
          "details": {
            "state": "8 - 2 = 6 (left: 1.3 6)",
            "thought": "8 - 2 = 6 (left: 1.3 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_12_7",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-29T12:32:10.598047",
          "event_type": "validation",
          "details": {
            "state": "8 / 2 = 4 (left: 1.3 4)",
            "thought": "8 / 2 = 4 (left: 1.3 4)"
          }
        }
      ]
    },
    "valid_search_trace": {
      "success_trace": true
    }
  },
  "detailed_results": [
    {
      "check_name": "pruning",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:21:06.388129",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "node_id 0_0 matches thought position.",
      "timestamp": "2025-05-29T12:21:06.388530",
      "event_type": "validation",
      "details": {
        "node_id": "0_0",
        "state": "2 + 8 = 10 (left: 10 10 13)",
        "thoughts": [
          "2 + 8 = 10 (left: 10 10 13)",
          "8 + 2 = 10 (left: 10 10 13)",
          "10 + 2 = 12 (left: 8 12 13)",
          "13 - 2 = 11 (left: 8 10 11)",
          "13 - 8 = 5 (left: 2 5 10)",
          "13 - 10 = 3 (left: 2 3 8)",
          "10 - 2 = 8 (left: 8 8 13)",
          "10 - 8 = 2 (left: 2 2 13)",
          "8 - 2 = 6 (left: 6 10 13)",
          "10 / 2 = 5 (left: 5 8 13)",
          "8 / 2 = 4 (left: 4 10 13)",
          "13 / 2 = 6.5 (left: 6.5 8 10)",
          "13 / 10 = 1.3 (left: 1.3 2 8)",
          "10 / 8 = 1.25 (left: 1.25 2 13)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:21:16.350754",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "node_id 0_1 matches thought position.",
      "timestamp": "2025-05-29T12:21:16.350854",
      "event_type": "validation",
      "details": {
        "node_id": "0_1",
        "state": "8 + 2 = 10 (left: 10 10 13)",
        "thoughts": [
          "2 + 8 = 10 (left: 10 10 13)",
          "8 + 2 = 10 (left: 10 10 13)",
          "10 + 2 = 12 (left: 8 12 13)",
          "13 - 2 = 11 (left: 8 10 11)",
          "13 - 8 = 5 (left: 2 5 10)",
          "13 - 10 = 3 (left: 2 3 8)",
          "10 - 2 = 8 (left: 8 8 13)",
          "10 - 8 = 2 (left: 2 2 13)",
          "8 - 2 = 6 (left: 6 10 13)",
          "10 / 2 = 5 (left: 5 8 13)",
          "8 / 2 = 4 (left: 4 10 13)",
          "13 / 2 = 6.5 (left: 6.5 8 10)",
          "13 / 10 = 1.3 (left: 1.3 2 8)",
          "10 / 8 = 1.25 (left: 1.25 2 13)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-29T12:21:25.969004",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "node_id 0_2 matches thought position.",
      "timestamp": "2025-05-29T12:21:25.969090",
      "event_type": "validation",
      "details": {
        "node_id": "0_2",
        "state": "10 + 2 = 12 (left: 8 12 13)",
        "thoughts": [
          "2 + 8 = 10 (left: 10 10 13)",
          "8 + 2 = 10 (left: 10 10 13)",
          "10 + 2 = 12 (left: 8 12 13)",
          "13 - 2 = 11 (left: 8 10 11)",
          "13 - 8 = 5 (left: 2 5 10)",
          "13 - 10 = 3 (left: 2 3 8)",
          "10 - 2 = 8 (left: 8 8 13)",
          "10 - 8 = 2 (left: 2 2 13)",
          "8 - 2 = 6 (left: 6 10 13)",
          "10 / 2 = 5 (left: 5 8 13)",
          "8 / 2 = 4 (left: 4 10 13)",
          "13 / 2 = 6.5 (left: 6.5 8 10)",
          "13 / 10 = 1.3 (left: 1.3 2 8)",
          "10 / 8 = 1.25 (left: 1.25 2 13)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:21:34.320104",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "node_id 0_3 matches thought position.",
      "timestamp": "2025-05-29T12:21:34.320195",
      "event_type": "validation",
      "details": {
        "node_id": "0_3",
        "state": "13 - 2 = 11 (left: 8 10 11)",
        "thoughts": [
          "2 + 8 = 10 (left: 10 10 13)",
          "8 + 2 = 10 (left: 10 10 13)",
          "10 + 2 = 12 (left: 8 12 13)",
          "13 - 2 = 11 (left: 8 10 11)",
          "13 - 8 = 5 (left: 2 5 10)",
          "13 - 10 = 3 (left: 2 3 8)",
          "10 - 2 = 8 (left: 8 8 13)",
          "10 - 8 = 2 (left: 2 2 13)",
          "8 - 2 = 6 (left: 6 10 13)",
          "10 / 2 = 5 (left: 5 8 13)",
          "8 / 2 = 4 (left: 4 10 13)",
          "13 / 2 = 6.5 (left: 6.5 8 10)",
          "13 / 10 = 1.3 (left: 1.3 2 8)",
          "10 / 8 = 1.25 (left: 1.25 2 13)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "Value 2.001 meets threshold 3.0",
      "timestamp": "2025-05-29T12:21:45.701000",
      "event_type": "validation",
      "details": {
        "value": 2.001,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "node_id 0_4 matches thought position.",
      "timestamp": "2025-05-29T12:21:45.701088",
      "event_type": "validation",
      "details": {
        "node_id": "0_4",
        "state": "13 - 8 = 5 (left: 2 5 10)",
        "thoughts": [
          "2 + 8 = 10 (left: 10 10 13)",
          "8 + 2 = 10 (left: 10 10 13)",
          "10 + 2 = 12 (left: 8 12 13)",
          "13 - 2 = 11 (left: 8 10 11)",
          "13 - 8 = 5 (left: 2 5 10)",
          "13 - 10 = 3 (left: 2 3 8)",
          "10 - 2 = 8 (left: 8 8 13)",
          "10 - 8 = 2 (left: 2 2 13)",
          "8 - 2 = 6 (left: 6 10 13)",
          "10 / 2 = 5 (left: 5 8 13)",
          "8 / 2 = 4 (left: 4 10 13)",
          "13 / 2 = 6.5 (left: 6.5 8 10)",
          "13 / 10 = 1.3 (left: 1.3 2 8)",
          "10 / 8 = 1.25 (left: 1.25 2 13)"
        ]
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-29T12:21:57.753627",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "State validation passed: Last thought '13 - 10 = 3 (left: 2 3 8)' found in parent's thoughts",
      "timestamp": "2025-05-29T12:21:57.753681",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '13 - 10 = 3 (left: 2 3 8)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "2 + 8 = 10 (left: 10 10 13)",
          "8 + 2 = 10 (left: 10 10 13)",
          "10 + 2 = 12 (left: 8 12 13)",
          "13 - 2 = 11 (left: 8 10 11)",
          "13 - 8 = 5 (left: 2 5 10)",
          "13 - 10 = 3 (left: 2 3 8)",
          "10 - 2 = 8 (left: 8 8 13)",
          "10 - 8 = 2 (left: 2 2 13)",
          "8 - 2 = 6 (left: 6 10 13)",
          "10 / 2 = 5 (left: 5 8 13)",
          "8 / 2 = 4 (left: 4 10 13)",
          "13 / 2 = 6.5 (left: 6.5 8 10)",
          "13 / 10 = 1.3 (left: 1.3 2 8)",
          "10 / 8 = 1.25 (left: 1.25 2 13)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "node_id 0_5 matches thought position.",
      "timestamp": "2025-05-29T12:21:57.753725",
      "event_type": "validation",
      "details": {
        "node_id": "0_5",
        "state": "13 - 10 = 3 (left: 2 3 8)",
        "thoughts": [
          "2 + 8 = 10 (left: 10 10 13)",
          "8 + 2 = 10 (left: 10 10 13)",
          "10 + 2 = 12 (left: 8 12 13)",
          "13 - 2 = 11 (left: 8 10 11)",
          "13 - 8 = 5 (left: 2 5 10)",
          "13 - 10 = 3 (left: 2 3 8)",
          "10 - 2 = 8 (left: 8 8 13)",
          "10 - 8 = 2 (left: 2 2 13)",
          "8 - 2 = 6 (left: 6 10 13)",
          "10 / 2 = 5 (left: 5 8 13)",
          "8 / 2 = 4 (left: 4 10 13)",
          "13 / 2 = 6.5 (left: 6.5 8 10)",
          "13 / 10 = 1.3 (left: 1.3 2 8)",
          "10 / 8 = 1.25 (left: 1.25 2 13)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-29T12:22:08.710359",
      "event_type": "validation",
      "details": {
        "expected_state": "13 - 10 = 3 (left: 2 3 8)",
        "actual_state": "13 - 10 = 3 (left: 2 3 8)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:22:19.268100",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_0",
      "result": "PASS",
      "reason": "node_id 0_5_0 matches thought position.",
      "timestamp": "2025-05-29T12:22:19.268195",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_0",
        "state": "2 + 3 = 5 (left: 5 8)",
        "thoughts": [
          "2 + 3 = 5 (left: 5 8)",
          "3 - 2 = 1 (left: 1 8)",
          "8 - 2 = 6 (left: 3 6)",
          "8 - 3 = 5 (left: 2 5)",
          "2 * 3 = 6 (left: 6 8)",
          "3 * 2 = 6 (left: 6 8)",
          "8 / 2 = 4 (left: 3 4)",
          "8 / 3 = 2.67 (left: 2 2.67)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:22:45.266352",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_1",
      "result": "PASS",
      "reason": "node_id 0_5_1 matches thought position.",
      "timestamp": "2025-05-29T12:22:45.266422",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_1",
        "state": "3 - 2 = 1 (left: 1 8)",
        "thoughts": [
          "2 + 3 = 5 (left: 5 8)",
          "3 - 2 = 1 (left: 1 8)",
          "8 - 2 = 6 (left: 3 6)",
          "8 - 3 = 5 (left: 2 5)",
          "2 * 3 = 6 (left: 6 8)",
          "3 * 2 = 6 (left: 6 8)",
          "8 / 2 = 4 (left: 3 4)",
          "8 / 3 = 2.67 (left: 2 2.67)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:22:56.815023",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_2",
      "result": "PASS",
      "reason": "node_id 0_5_2 matches thought position.",
      "timestamp": "2025-05-29T12:22:56.815084",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_2",
        "state": "8 - 2 = 6 (left: 3 6)",
        "thoughts": [
          "2 + 3 = 5 (left: 5 8)",
          "3 - 2 = 1 (left: 1 8)",
          "8 - 2 = 6 (left: 3 6)",
          "8 - 3 = 5 (left: 2 5)",
          "2 * 3 = 6 (left: 6 8)",
          "3 * 2 = 6 (left: 6 8)",
          "8 / 2 = 4 (left: 3 4)",
          "8 / 3 = 2.67 (left: 2 2.67)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:23:07.650420",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_3",
      "result": "PASS",
      "reason": "node_id 0_5_3 matches thought position.",
      "timestamp": "2025-05-29T12:23:07.650495",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_3",
        "state": "8 - 3 = 5 (left: 2 5)",
        "thoughts": [
          "2 + 3 = 5 (left: 5 8)",
          "3 - 2 = 1 (left: 1 8)",
          "8 - 2 = 6 (left: 3 6)",
          "8 - 3 = 5 (left: 2 5)",
          "2 * 3 = 6 (left: 6 8)",
          "3 * 2 = 6 (left: 6 8)",
          "8 / 2 = 4 (left: 3 4)",
          "8 / 3 = 2.67 (left: 2 2.67)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:23:16.728829",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_4",
      "result": "PASS",
      "reason": "node_id 0_5_4 matches thought position.",
      "timestamp": "2025-05-29T12:23:16.728908",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_4",
        "state": "2 * 3 = 6 (left: 6 8)",
        "thoughts": [
          "2 + 3 = 5 (left: 5 8)",
          "3 - 2 = 1 (left: 1 8)",
          "8 - 2 = 6 (left: 3 6)",
          "8 - 3 = 5 (left: 2 5)",
          "2 * 3 = 6 (left: 6 8)",
          "3 * 2 = 6 (left: 6 8)",
          "8 / 2 = 4 (left: 3 4)",
          "8 / 3 = 2.67 (left: 2 2.67)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:23:27.017537",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_5",
      "result": "PASS",
      "reason": "node_id 0_5_5 matches thought position.",
      "timestamp": "2025-05-29T12:23:27.017647",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_5",
        "state": "3 * 2 = 6 (left: 6 8)",
        "thoughts": [
          "2 + 3 = 5 (left: 5 8)",
          "3 - 2 = 1 (left: 1 8)",
          "8 - 2 = 6 (left: 3 6)",
          "8 - 3 = 5 (left: 2 5)",
          "2 * 3 = 6 (left: 6 8)",
          "3 * 2 = 6 (left: 6 8)",
          "8 / 2 = 4 (left: 3 4)",
          "8 / 3 = 2.67 (left: 2 2.67)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:23:35.377017",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_6",
      "result": "PASS",
      "reason": "node_id 0_5_6 matches thought position.",
      "timestamp": "2025-05-29T12:23:35.377097",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_6",
        "state": "8 / 2 = 4 (left: 3 4)",
        "thoughts": [
          "2 + 3 = 5 (left: 5 8)",
          "3 - 2 = 1 (left: 1 8)",
          "8 - 2 = 6 (left: 3 6)",
          "8 - 3 = 5 (left: 2 5)",
          "2 * 3 = 6 (left: 6 8)",
          "3 * 2 = 6 (left: 6 8)",
          "8 / 2 = 4 (left: 3 4)",
          "8 / 3 = 2.67 (left: 2 2.67)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5_7",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:23:45.772455",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5_7",
      "result": "PASS",
      "reason": "node_id 0_5_7 matches thought position.",
      "timestamp": "2025-05-29T12:23:45.772565",
      "event_type": "validation",
      "details": {
        "node_id": "0_5_7",
        "state": "8 / 3 = 2.67 (left: 2 2.67)",
        "thoughts": [
          "2 + 3 = 5 (left: 5 8)",
          "3 - 2 = 1 (left: 1 8)",
          "8 - 2 = 6 (left: 3 6)",
          "8 - 3 = 5 (left: 2 5)",
          "2 * 3 = 6 (left: 6 8)",
          "3 * 2 = 6 (left: 6 8)",
          "8 / 2 = 4 (left: 3 4)",
          "8 / 3 = 2.67 (left: 2 2.67)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_5; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-29T12:23:48.270789",
      "event_type": "validation",
      "details": {
        "popped_node": "0_5",
        "expected_popped": "0_5",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_5",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "All 8 children explored - valid backtrack",
      "timestamp": "2025-05-29T12:23:48.270820",
      "event_type": "validation",
      "details": {
        "total_thoughts": 8,
        "evaluated_children": 8
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_6",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_6 follows 0_5",
      "timestamp": "2025-05-29T12:23:57.399462",
      "event_type": "validation",
      "details": {
        "popped_node": "0_5",
        "current_node": "0_6",
        "expected_index": 6,
        "actual_index": 6
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:23:57.399498",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_6",
      "result": "PASS",
      "reason": "node_id 0_6 matches thought position.",
      "timestamp": "2025-05-29T12:23:57.399533",
      "event_type": "validation",
      "details": {
        "node_id": "0_6",
        "state": "10 - 2 = 8 (left: 8 8 13)",
        "thoughts": [
          "2 + 8 = 10 (left: 10 10 13)",
          "8 + 2 = 10 (left: 10 10 13)",
          "10 + 2 = 12 (left: 8 12 13)",
          "13 - 2 = 11 (left: 8 10 11)",
          "13 - 8 = 5 (left: 2 5 10)",
          "13 - 10 = 3 (left: 2 3 8)",
          "10 - 2 = 8 (left: 8 8 13)",
          "10 - 8 = 2 (left: 2 2 13)",
          "8 - 2 = 6 (left: 6 10 13)",
          "10 / 2 = 5 (left: 5 8 13)",
          "8 / 2 = 4 (left: 4 10 13)",
          "13 / 2 = 6.5 (left: 6.5 8 10)",
          "13 / 10 = 1.3 (left: 1.3 2 8)",
          "10 / 8 = 1.25 (left: 1.25 2 13)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_7",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-29T12:24:05.602794",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_7",
      "result": "PASS",
      "reason": "node_id 0_7 matches thought position.",
      "timestamp": "2025-05-29T12:24:05.602867",
      "event_type": "validation",
      "details": {
        "node_id": "0_7",
        "state": "10 - 8 = 2 (left: 2 2 13)",
        "thoughts": [
          "2 + 8 = 10 (left: 10 10 13)",
          "8 + 2 = 10 (left: 10 10 13)",
          "10 + 2 = 12 (left: 8 12 13)",
          "13 - 2 = 11 (left: 8 10 11)",
          "13 - 8 = 5 (left: 2 5 10)",
          "13 - 10 = 3 (left: 2 3 8)",
          "10 - 2 = 8 (left: 8 8 13)",
          "10 - 8 = 2 (left: 2 2 13)",
          "8 - 2 = 6 (left: 6 10 13)",
          "10 / 2 = 5 (left: 5 8 13)",
          "8 / 2 = 4 (left: 4 10 13)",
          "13 / 2 = 6.5 (left: 6.5 8 10)",
          "13 / 10 = 1.3 (left: 1.3 2 8)",
          "10 / 8 = 1.25 (left: 1.25 2 13)"
        ]
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_8",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-29T12:24:14.698052",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_8",
      "result": "PASS",
      "reason": "State validation passed: Last thought '8 - 2 = 6 (left: 6 10 13)' found in parent's thoughts",
      "timestamp": "2025-05-29T12:24:14.698108",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '8 - 2 = 6 (left: 6 10 13)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "2 + 8 = 10 (left: 10 10 13)",
          "8 + 2 = 10 (left: 10 10 13)",
          "10 + 2 = 12 (left: 8 12 13)",
          "13 - 2 = 11 (left: 8 10 11)",
          "13 - 8 = 5 (left: 2 5 10)",
          "13 - 10 = 3 (left: 2 3 8)",
          "10 - 2 = 8 (left: 8 8 13)",
          "10 - 8 = 2 (left: 2 2 13)",
          "8 - 2 = 6 (left: 6 10 13)",
          "10 / 2 = 5 (left: 5 8 13)",
          "8 / 2 = 4 (left: 4 10 13)",
          "13 / 2 = 6.5 (left: 6.5 8 10)",
          "13 / 10 = 1.3 (left: 1.3 2 8)",
          "10 / 8 = 1.25 (left: 1.25 2 13)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_8",
      "result": "PASS",
      "reason": "node_id 0_8 matches thought position.",
      "timestamp": "2025-05-29T12:24:14.698149",
      "event_type": "validation",
      "details": {
        "node_id": "0_8",
        "state": "8 - 2 = 6 (left: 6 10 13)",
        "thoughts": [
          "2 + 8 = 10 (left: 10 10 13)",
          "8 + 2 = 10 (left: 10 10 13)",
          "10 + 2 = 12 (left: 8 12 13)",
          "13 - 2 = 11 (left: 8 10 11)",
          "13 - 8 = 5 (left: 2 5 10)",
          "13 - 10 = 3 (left: 2 3 8)",
          "10 - 2 = 8 (left: 8 8 13)",
          "10 - 8 = 2 (left: 2 2 13)",
          "8 - 2 = 6 (left: 6 10 13)",
          "10 / 2 = 5 (left: 5 8 13)",
          "8 / 2 = 4 (left: 4 10 13)",
          "13 / 2 = 6.5 (left: 6.5 8 10)",
          "13 / 10 = 1.3 (left: 1.3 2 8)",
          "10 / 8 = 1.25 (left: 1.25 2 13)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_8",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-29T12:24:23.800863",
      "event_type": "validation",
      "details": {
        "expected_state": "8 - 2 = 6 (left: 6 10 13)",
        "actual_state": "8 - 2 = 6 (left: 6 10 13)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_8_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:24:37.740215",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_8_0",
      "result": "PASS",
      "reason": "node_id 0_8_0 matches thought position.",
      "timestamp": "2025-05-29T12:24:37.740300",
      "event_type": "validation",
      "details": {
        "node_id": "0_8_0",
        "state": "6 + 10 = 16 (left: 13 16)",
        "thoughts": [
          "6 + 10 = 16 (left: 13 16)",
          "10 - 6 = 4 (left: 4 13)",
          "13 - 10 = 3 (left: 3 6)",
          "13 - 6 = 7 (left: 7 10)",
          "10 / 6 = 1.67 (left: 1.67 13)",
          "13 / 6 = 2.17 (left: 2.17 10)",
          "13 / 10 = 1.3 (left: 1.3 6)",
          "6 * 10 = 60 (left: 13 60)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_8_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:24:46.761327",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_8_1",
      "result": "PASS",
      "reason": "node_id 0_8_1 matches thought position.",
      "timestamp": "2025-05-29T12:24:46.761398",
      "event_type": "validation",
      "details": {
        "node_id": "0_8_1",
        "state": "10 - 6 = 4 (left: 4 13)",
        "thoughts": [
          "6 + 10 = 16 (left: 13 16)",
          "10 - 6 = 4 (left: 4 13)",
          "13 - 10 = 3 (left: 3 6)",
          "13 - 6 = 7 (left: 7 10)",
          "10 / 6 = 1.67 (left: 1.67 13)",
          "13 / 6 = 2.17 (left: 2.17 10)",
          "13 / 10 = 1.3 (left: 1.3 6)",
          "6 * 10 = 60 (left: 13 60)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_8_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:24:55.476141",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_8_2",
      "result": "PASS",
      "reason": "node_id 0_8_2 matches thought position.",
      "timestamp": "2025-05-29T12:24:55.476230",
      "event_type": "validation",
      "details": {
        "node_id": "0_8_2",
        "state": "13 - 10 = 3 (left: 3 6)",
        "thoughts": [
          "6 + 10 = 16 (left: 13 16)",
          "10 - 6 = 4 (left: 4 13)",
          "13 - 10 = 3 (left: 3 6)",
          "13 - 6 = 7 (left: 7 10)",
          "10 / 6 = 1.67 (left: 1.67 13)",
          "13 / 6 = 2.17 (left: 2.17 10)",
          "13 / 10 = 1.3 (left: 1.3 6)",
          "6 * 10 = 60 (left: 13 60)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_8_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:25:03.982204",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_8_3",
      "result": "PASS",
      "reason": "node_id 0_8_3 matches thought position.",
      "timestamp": "2025-05-29T12:25:03.982285",
      "event_type": "validation",
      "details": {
        "node_id": "0_8_3",
        "state": "13 - 6 = 7 (left: 7 10)",
        "thoughts": [
          "6 + 10 = 16 (left: 13 16)",
          "10 - 6 = 4 (left: 4 13)",
          "13 - 10 = 3 (left: 3 6)",
          "13 - 6 = 7 (left: 7 10)",
          "10 / 6 = 1.67 (left: 1.67 13)",
          "13 / 6 = 2.17 (left: 2.17 10)",
          "13 / 10 = 1.3 (left: 1.3 6)",
          "6 * 10 = 60 (left: 13 60)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_8_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:25:16.986690",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_8_4",
      "result": "PASS",
      "reason": "node_id 0_8_4 matches thought position.",
      "timestamp": "2025-05-29T12:25:16.986765",
      "event_type": "validation",
      "details": {
        "node_id": "0_8_4",
        "state": "10 / 6 = 1.67 (left: 1.67 13)",
        "thoughts": [
          "6 + 10 = 16 (left: 13 16)",
          "10 - 6 = 4 (left: 4 13)",
          "13 - 10 = 3 (left: 3 6)",
          "13 - 6 = 7 (left: 7 10)",
          "10 / 6 = 1.67 (left: 1.67 13)",
          "13 / 6 = 2.17 (left: 2.17 10)",
          "13 / 10 = 1.3 (left: 1.3 6)",
          "6 * 10 = 60 (left: 13 60)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_8_5",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-29T12:25:30.068035",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_8_5",
      "result": "PASS",
      "reason": "node_id 0_8_5 matches thought position.",
      "timestamp": "2025-05-29T12:25:30.068107",
      "event_type": "validation",
      "details": {
        "node_id": "0_8_5",
        "state": "13 / 6 = 2.17 (left: 2.17 10)",
        "thoughts": [
          "6 + 10 = 16 (left: 13 16)",
          "10 - 6 = 4 (left: 4 13)",
          "13 - 10 = 3 (left: 3 6)",
          "13 - 6 = 7 (left: 7 10)",
          "10 / 6 = 1.67 (left: 1.67 13)",
          "13 / 6 = 2.17 (left: 2.17 10)",
          "13 / 10 = 1.3 (left: 1.3 6)",
          "6 * 10 = 60 (left: 13 60)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_8_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:25:39.933626",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_8_6",
      "result": "PASS",
      "reason": "node_id 0_8_6 matches thought position.",
      "timestamp": "2025-05-29T12:25:39.933705",
      "event_type": "validation",
      "details": {
        "node_id": "0_8_6",
        "state": "13 / 10 = 1.3 (left: 1.3 6)",
        "thoughts": [
          "6 + 10 = 16 (left: 13 16)",
          "10 - 6 = 4 (left: 4 13)",
          "13 - 10 = 3 (left: 3 6)",
          "13 - 6 = 7 (left: 7 10)",
          "10 / 6 = 1.67 (left: 1.67 13)",
          "13 / 6 = 2.17 (left: 2.17 10)",
          "13 / 10 = 1.3 (left: 1.3 6)",
          "6 * 10 = 60 (left: 13 60)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_8_7",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:25:53.730862",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_8_7",
      "result": "PASS",
      "reason": "node_id 0_8_7 matches thought position.",
      "timestamp": "2025-05-29T12:25:53.730922",
      "event_type": "validation",
      "details": {
        "node_id": "0_8_7",
        "state": "6 * 10 = 60 (left: 13 60)",
        "thoughts": [
          "6 + 10 = 16 (left: 13 16)",
          "10 - 6 = 4 (left: 4 13)",
          "13 - 10 = 3 (left: 3 6)",
          "13 - 6 = 7 (left: 7 10)",
          "10 / 6 = 1.67 (left: 1.67 13)",
          "13 / 6 = 2.17 (left: 2.17 10)",
          "13 / 10 = 1.3 (left: 1.3 6)",
          "6 * 10 = 60 (left: 13 60)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_8",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_8; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-29T12:25:56.719989",
      "event_type": "validation",
      "details": {
        "popped_node": "0_8",
        "expected_popped": "0_8",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_8",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_8",
      "result": "PASS",
      "reason": "All 8 children explored - valid backtrack",
      "timestamp": "2025-05-29T12:25:56.720023",
      "event_type": "validation",
      "details": {
        "total_thoughts": 8,
        "evaluated_children": 8
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_9",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-29T12:26:07.440789",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_9",
      "result": "PASS",
      "reason": "State validation passed: Last thought '10 / 2 = 5 (left: 5 8 13)' found in parent's thoughts",
      "timestamp": "2025-05-29T12:26:07.440850",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '10 / 2 = 5 (left: 5 8 13)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "2 + 8 = 10 (left: 10 10 13)",
          "8 + 2 = 10 (left: 10 10 13)",
          "10 + 2 = 12 (left: 8 12 13)",
          "13 - 2 = 11 (left: 8 10 11)",
          "13 - 8 = 5 (left: 2 5 10)",
          "13 - 10 = 3 (left: 2 3 8)",
          "10 - 2 = 8 (left: 8 8 13)",
          "10 - 8 = 2 (left: 2 2 13)",
          "8 - 2 = 6 (left: 6 10 13)",
          "10 / 2 = 5 (left: 5 8 13)",
          "8 / 2 = 4 (left: 4 10 13)",
          "13 / 2 = 6.5 (left: 6.5 8 10)",
          "13 / 10 = 1.3 (left: 1.3 2 8)",
          "10 / 8 = 1.25 (left: 1.25 2 13)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_9",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_9 follows 0_8",
      "timestamp": "2025-05-29T12:26:07.440896",
      "event_type": "validation",
      "details": {
        "popped_node": "0_8",
        "current_node": "0_9",
        "expected_index": 9,
        "actual_index": 9
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_9",
      "result": "PASS",
      "reason": "node_id 0_9 matches thought position.",
      "timestamp": "2025-05-29T12:26:07.440934",
      "event_type": "validation",
      "details": {
        "node_id": "0_9",
        "state": "10 / 2 = 5 (left: 5 8 13)",
        "thoughts": [
          "2 + 8 = 10 (left: 10 10 13)",
          "8 + 2 = 10 (left: 10 10 13)",
          "10 + 2 = 12 (left: 8 12 13)",
          "13 - 2 = 11 (left: 8 10 11)",
          "13 - 8 = 5 (left: 2 5 10)",
          "13 - 10 = 3 (left: 2 3 8)",
          "10 - 2 = 8 (left: 8 8 13)",
          "10 - 8 = 2 (left: 2 2 13)",
          "8 - 2 = 6 (left: 6 10 13)",
          "10 / 2 = 5 (left: 5 8 13)",
          "8 / 2 = 4 (left: 4 10 13)",
          "13 / 2 = 6.5 (left: 6.5 8 10)",
          "13 / 10 = 1.3 (left: 1.3 2 8)",
          "10 / 8 = 1.25 (left: 1.25 2 13)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_9",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-29T12:26:18.428429",
      "event_type": "validation",
      "details": {
        "expected_state": "10 / 2 = 5 (left: 5 8 13)",
        "actual_state": "10 / 2 = 5 (left: 5 8 13)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_9_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:26:28.569351",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_9_0",
      "result": "PASS",
      "reason": "node_id 0_9_0 matches thought position.",
      "timestamp": "2025-05-29T12:26:28.569420",
      "event_type": "validation",
      "details": {
        "node_id": "0_9_0",
        "state": "5 + 8 = 13 (left: 13 13)",
        "thoughts": [
          "5 + 8 = 13 (left: 13 13)",
          "8 - 5 = 3 (left: 3 13)",
          "13 - 5 = 8 (left: 8 8)",
          "13 - 8 = 5 (left: 5 5)",
          "13 / 5 = 2.6 (left: 2.6 8)",
          "8 / 5 = 1.6 (left: 1.6 13)",
          "5 * 8 = 40 (left: 13 40)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_9_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:26:37.254832",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_9_1",
      "result": "PASS",
      "reason": "node_id 0_9_1 matches thought position.",
      "timestamp": "2025-05-29T12:26:37.254920",
      "event_type": "validation",
      "details": {
        "node_id": "0_9_1",
        "state": "8 - 5 = 3 (left: 3 13)",
        "thoughts": [
          "5 + 8 = 13 (left: 13 13)",
          "8 - 5 = 3 (left: 3 13)",
          "13 - 5 = 8 (left: 8 8)",
          "13 - 8 = 5 (left: 5 5)",
          "13 / 5 = 2.6 (left: 2.6 8)",
          "8 / 5 = 1.6 (left: 1.6 13)",
          "5 * 8 = 40 (left: 13 40)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_9_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:26:45.852871",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_9_2",
      "result": "PASS",
      "reason": "node_id 0_9_2 matches thought position.",
      "timestamp": "2025-05-29T12:26:45.852946",
      "event_type": "validation",
      "details": {
        "node_id": "0_9_2",
        "state": "13 - 5 = 8 (left: 8 8)",
        "thoughts": [
          "5 + 8 = 13 (left: 13 13)",
          "8 - 5 = 3 (left: 3 13)",
          "13 - 5 = 8 (left: 8 8)",
          "13 - 8 = 5 (left: 5 5)",
          "13 / 5 = 2.6 (left: 2.6 8)",
          "8 / 5 = 1.6 (left: 1.6 13)",
          "5 * 8 = 40 (left: 13 40)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_9_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:26:56.130656",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_9_3",
      "result": "PASS",
      "reason": "node_id 0_9_3 matches thought position.",
      "timestamp": "2025-05-29T12:26:56.130735",
      "event_type": "validation",
      "details": {
        "node_id": "0_9_3",
        "state": "13 - 8 = 5 (left: 5 5)",
        "thoughts": [
          "5 + 8 = 13 (left: 13 13)",
          "8 - 5 = 3 (left: 3 13)",
          "13 - 5 = 8 (left: 8 8)",
          "13 - 8 = 5 (left: 5 5)",
          "13 / 5 = 2.6 (left: 2.6 8)",
          "8 / 5 = 1.6 (left: 1.6 13)",
          "5 * 8 = 40 (left: 13 40)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_9_4",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-29T12:27:06.492839",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_9_4",
      "result": "PASS",
      "reason": "node_id 0_9_4 matches thought position.",
      "timestamp": "2025-05-29T12:27:06.492914",
      "event_type": "validation",
      "details": {
        "node_id": "0_9_4",
        "state": "13 / 5 = 2.6 (left: 2.6 8)",
        "thoughts": [
          "5 + 8 = 13 (left: 13 13)",
          "8 - 5 = 3 (left: 3 13)",
          "13 - 5 = 8 (left: 8 8)",
          "13 - 8 = 5 (left: 5 5)",
          "13 / 5 = 2.6 (left: 2.6 8)",
          "8 / 5 = 1.6 (left: 1.6 13)",
          "5 * 8 = 40 (left: 13 40)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_9_5",
      "result": "PASS",
      "reason": "Value 2.001 meets threshold 3.0",
      "timestamp": "2025-05-29T12:27:21.896154",
      "event_type": "validation",
      "details": {
        "value": 2.001,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_9_5",
      "result": "PASS",
      "reason": "node_id 0_9_5 matches thought position.",
      "timestamp": "2025-05-29T12:27:21.896224",
      "event_type": "validation",
      "details": {
        "node_id": "0_9_5",
        "state": "8 / 5 = 1.6 (left: 1.6 13)",
        "thoughts": [
          "5 + 8 = 13 (left: 13 13)",
          "8 - 5 = 3 (left: 3 13)",
          "13 - 5 = 8 (left: 8 8)",
          "13 - 8 = 5 (left: 5 5)",
          "13 / 5 = 2.6 (left: 2.6 8)",
          "8 / 5 = 1.6 (left: 1.6 13)",
          "5 * 8 = 40 (left: 13 40)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_9_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:27:30.645146",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_9_6",
      "result": "PASS",
      "reason": "node_id 0_9_6 matches thought position.",
      "timestamp": "2025-05-29T12:27:30.645215",
      "event_type": "validation",
      "details": {
        "node_id": "0_9_6",
        "state": "5 * 8 = 40 (left: 13 40)",
        "thoughts": [
          "5 + 8 = 13 (left: 13 13)",
          "8 - 5 = 3 (left: 3 13)",
          "13 - 5 = 8 (left: 8 8)",
          "13 - 8 = 5 (left: 5 5)",
          "13 / 5 = 2.6 (left: 2.6 8)",
          "8 / 5 = 1.6 (left: 1.6 13)",
          "5 * 8 = 40 (left: 13 40)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_9",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_9; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-29T12:27:33.796063",
      "event_type": "validation",
      "details": {
        "popped_node": "0_9",
        "expected_popped": "0_9",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_9",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_9",
      "result": "PASS",
      "reason": "All 7 children explored - valid backtrack",
      "timestamp": "2025-05-29T12:27:33.796100",
      "event_type": "validation",
      "details": {
        "total_thoughts": 7,
        "evaluated_children": 7
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_10",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_10 follows 0_9",
      "timestamp": "2025-05-29T12:27:45.060421",
      "event_type": "validation",
      "details": {
        "popped_node": "0_9",
        "current_node": "0_10",
        "expected_index": 10,
        "actual_index": 10
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_10",
      "result": "PASS",
      "reason": "Value 2.001 meets threshold 3.0",
      "timestamp": "2025-05-29T12:27:45.060468",
      "event_type": "validation",
      "details": {
        "value": 2.001,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_10",
      "result": "PASS",
      "reason": "node_id 0_10 matches thought position.",
      "timestamp": "2025-05-29T12:27:45.060508",
      "event_type": "validation",
      "details": {
        "node_id": "0_10",
        "state": "8 / 2 = 4 (left: 4 10 13)",
        "thoughts": [
          "2 + 8 = 10 (left: 10 10 13)",
          "8 + 2 = 10 (left: 10 10 13)",
          "10 + 2 = 12 (left: 8 12 13)",
          "13 - 2 = 11 (left: 8 10 11)",
          "13 - 8 = 5 (left: 2 5 10)",
          "13 - 10 = 3 (left: 2 3 8)",
          "10 - 2 = 8 (left: 8 8 13)",
          "10 - 8 = 2 (left: 2 2 13)",
          "8 - 2 = 6 (left: 6 10 13)",
          "10 / 2 = 5 (left: 5 8 13)",
          "8 / 2 = 4 (left: 4 10 13)",
          "13 / 2 = 6.5 (left: 6.5 8 10)",
          "13 / 10 = 1.3 (left: 1.3 2 8)",
          "10 / 8 = 1.25 (left: 1.25 2 13)"
        ]
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_11",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-29T12:27:57.090232",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_11",
      "result": "PASS",
      "reason": "State validation passed: Last thought '13 / 2 = 6.5 (left: 6.5 8 10)' found in parent's thoughts",
      "timestamp": "2025-05-29T12:27:57.090319",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '13 / 2 = 6.5 (left: 6.5 8 10)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "2 + 8 = 10 (left: 10 10 13)",
          "8 + 2 = 10 (left: 10 10 13)",
          "10 + 2 = 12 (left: 8 12 13)",
          "13 - 2 = 11 (left: 8 10 11)",
          "13 - 8 = 5 (left: 2 5 10)",
          "13 - 10 = 3 (left: 2 3 8)",
          "10 - 2 = 8 (left: 8 8 13)",
          "10 - 8 = 2 (left: 2 2 13)",
          "8 - 2 = 6 (left: 6 10 13)",
          "10 / 2 = 5 (left: 5 8 13)",
          "8 / 2 = 4 (left: 4 10 13)",
          "13 / 2 = 6.5 (left: 6.5 8 10)",
          "13 / 10 = 1.3 (left: 1.3 2 8)",
          "10 / 8 = 1.25 (left: 1.25 2 13)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_11",
      "result": "PASS",
      "reason": "node_id 0_11 matches thought position.",
      "timestamp": "2025-05-29T12:27:57.090432",
      "event_type": "validation",
      "details": {
        "node_id": "0_11",
        "state": "13 / 2 = 6.5 (left: 6.5 8 10)",
        "thoughts": [
          "2 + 8 = 10 (left: 10 10 13)",
          "8 + 2 = 10 (left: 10 10 13)",
          "10 + 2 = 12 (left: 8 12 13)",
          "13 - 2 = 11 (left: 8 10 11)",
          "13 - 8 = 5 (left: 2 5 10)",
          "13 - 10 = 3 (left: 2 3 8)",
          "10 - 2 = 8 (left: 8 8 13)",
          "10 - 8 = 2 (left: 2 2 13)",
          "8 - 2 = 6 (left: 6 10 13)",
          "10 / 2 = 5 (left: 5 8 13)",
          "8 / 2 = 4 (left: 4 10 13)",
          "13 / 2 = 6.5 (left: 6.5 8 10)",
          "13 / 10 = 1.3 (left: 1.3 2 8)",
          "10 / 8 = 1.25 (left: 1.25 2 13)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_11",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-29T12:28:09.548453",
      "event_type": "validation",
      "details": {
        "expected_state": "13 / 2 = 6.5 (left: 6.5 8 10)",
        "actual_state": "13 / 2 = 6.5 (left: 6.5 8 10)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_11_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:28:21.405674",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_11_0",
      "result": "PASS",
      "reason": "node_id 0_11_0 matches thought position.",
      "timestamp": "2025-05-29T12:28:21.405751",
      "event_type": "validation",
      "details": {
        "node_id": "0_11_0",
        "state": "6.5 + 8 = 14.5 (left: 10 14.5)",
        "thoughts": [
          "6.5 + 8 = 14.5 (left: 10 14.5)",
          "8 - 6.5 = 1.5 (left: 1.5 10)",
          "10 - 6.5 = 3.5 (left: 3.5 8)",
          "10 - 8 = 2 (left: 2 6.5)",
          "8 * 6.5 = 52 (left: 10 52)",
          "10 / 6.5 = ~1.54 (left: ~1.54 8)",
          "6.5 / 8 = ~0.81 (left: ~0.81 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_11_1",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-29T12:28:33.904674",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_11_1",
      "result": "PASS",
      "reason": "node_id 0_11_1 matches thought position.",
      "timestamp": "2025-05-29T12:28:33.904750",
      "event_type": "validation",
      "details": {
        "node_id": "0_11_1",
        "state": "8 - 6.5 = 1.5 (left: 1.5 10)",
        "thoughts": [
          "6.5 + 8 = 14.5 (left: 10 14.5)",
          "8 - 6.5 = 1.5 (left: 1.5 10)",
          "10 - 6.5 = 3.5 (left: 3.5 8)",
          "10 - 8 = 2 (left: 2 6.5)",
          "8 * 6.5 = 52 (left: 10 52)",
          "10 / 6.5 = ~1.54 (left: ~1.54 8)",
          "6.5 / 8 = ~0.81 (left: ~0.81 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_11_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:28:46.314215",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_11_2",
      "result": "PASS",
      "reason": "node_id 0_11_2 matches thought position.",
      "timestamp": "2025-05-29T12:28:46.314287",
      "event_type": "validation",
      "details": {
        "node_id": "0_11_2",
        "state": "10 - 6.5 = 3.5 (left: 3.5 8)",
        "thoughts": [
          "6.5 + 8 = 14.5 (left: 10 14.5)",
          "8 - 6.5 = 1.5 (left: 1.5 10)",
          "10 - 6.5 = 3.5 (left: 3.5 8)",
          "10 - 8 = 2 (left: 2 6.5)",
          "8 * 6.5 = 52 (left: 10 52)",
          "10 / 6.5 = ~1.54 (left: ~1.54 8)",
          "6.5 / 8 = ~0.81 (left: ~0.81 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_11_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:28:56.397225",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_11_3",
      "result": "PASS",
      "reason": "node_id 0_11_3 matches thought position.",
      "timestamp": "2025-05-29T12:28:56.397299",
      "event_type": "validation",
      "details": {
        "node_id": "0_11_3",
        "state": "10 - 8 = 2 (left: 2 6.5)",
        "thoughts": [
          "6.5 + 8 = 14.5 (left: 10 14.5)",
          "8 - 6.5 = 1.5 (left: 1.5 10)",
          "10 - 6.5 = 3.5 (left: 3.5 8)",
          "10 - 8 = 2 (left: 2 6.5)",
          "8 * 6.5 = 52 (left: 10 52)",
          "10 / 6.5 = ~1.54 (left: ~1.54 8)",
          "6.5 / 8 = ~0.81 (left: ~0.81 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_11_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:29:12.496813",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_11_4",
      "result": "PASS",
      "reason": "node_id 0_11_4 matches thought position.",
      "timestamp": "2025-05-29T12:29:12.496881",
      "event_type": "validation",
      "details": {
        "node_id": "0_11_4",
        "state": "8 * 6.5 = 52 (left: 10 52)",
        "thoughts": [
          "6.5 + 8 = 14.5 (left: 10 14.5)",
          "8 - 6.5 = 1.5 (left: 1.5 10)",
          "10 - 6.5 = 3.5 (left: 3.5 8)",
          "10 - 8 = 2 (left: 2 6.5)",
          "8 * 6.5 = 52 (left: 10 52)",
          "10 / 6.5 = ~1.54 (left: ~1.54 8)",
          "6.5 / 8 = ~0.81 (left: ~0.81 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_11_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:29:23.974856",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_11_5",
      "result": "PASS",
      "reason": "node_id 0_11_5 matches thought position.",
      "timestamp": "2025-05-29T12:29:23.974937",
      "event_type": "validation",
      "details": {
        "node_id": "0_11_5",
        "state": "10 / 6.5 = ~1.54 (left: ~1.54 8)",
        "thoughts": [
          "6.5 + 8 = 14.5 (left: 10 14.5)",
          "8 - 6.5 = 1.5 (left: 1.5 10)",
          "10 - 6.5 = 3.5 (left: 3.5 8)",
          "10 - 8 = 2 (left: 2 6.5)",
          "8 * 6.5 = 52 (left: 10 52)",
          "10 / 6.5 = ~1.54 (left: ~1.54 8)",
          "6.5 / 8 = ~0.81 (left: ~0.81 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_11_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:29:35.238404",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_11_6",
      "result": "PASS",
      "reason": "node_id 0_11_6 matches thought position.",
      "timestamp": "2025-05-29T12:29:35.238484",
      "event_type": "validation",
      "details": {
        "node_id": "0_11_6",
        "state": "6.5 / 8 = ~0.81 (left: ~0.81 10)",
        "thoughts": [
          "6.5 + 8 = 14.5 (left: 10 14.5)",
          "8 - 6.5 = 1.5 (left: 1.5 10)",
          "10 - 6.5 = 3.5 (left: 3.5 8)",
          "10 - 8 = 2 (left: 2 6.5)",
          "8 * 6.5 = 52 (left: 10 52)",
          "10 / 6.5 = ~1.54 (left: ~1.54 8)",
          "6.5 / 8 = ~0.81 (left: ~0.81 10)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_11",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_11; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-29T12:29:38.416992",
      "event_type": "validation",
      "details": {
        "popped_node": "0_11",
        "expected_popped": "0_11",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_11",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_11",
      "result": "PASS",
      "reason": "All 7 children explored - valid backtrack",
      "timestamp": "2025-05-29T12:29:38.417018",
      "event_type": "validation",
      "details": {
        "total_thoughts": 7,
        "evaluated_children": 7
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_12",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-29T12:29:48.295389",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_12",
      "result": "PASS",
      "reason": "State validation passed: Last thought '13 / 10 = 1.3 (left: 1.3 2 8)' found in parent's thoughts",
      "timestamp": "2025-05-29T12:29:48.295451",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '13 / 10 = 1.3 (left: 1.3 2 8)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "2 + 8 = 10 (left: 10 10 13)",
          "8 + 2 = 10 (left: 10 10 13)",
          "10 + 2 = 12 (left: 8 12 13)",
          "13 - 2 = 11 (left: 8 10 11)",
          "13 - 8 = 5 (left: 2 5 10)",
          "13 - 10 = 3 (left: 2 3 8)",
          "10 - 2 = 8 (left: 8 8 13)",
          "10 - 8 = 2 (left: 2 2 13)",
          "8 - 2 = 6 (left: 6 10 13)",
          "10 / 2 = 5 (left: 5 8 13)",
          "8 / 2 = 4 (left: 4 10 13)",
          "13 / 2 = 6.5 (left: 6.5 8 10)",
          "13 / 10 = 1.3 (left: 1.3 2 8)",
          "10 / 8 = 1.25 (left: 1.25 2 13)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_12",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_12 follows 0_11",
      "timestamp": "2025-05-29T12:29:48.295516",
      "event_type": "validation",
      "details": {
        "popped_node": "0_11",
        "current_node": "0_12",
        "expected_index": 12,
        "actual_index": 12
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_12",
      "result": "PASS",
      "reason": "node_id 0_12 matches thought position.",
      "timestamp": "2025-05-29T12:29:48.295610",
      "event_type": "validation",
      "details": {
        "node_id": "0_12",
        "state": "13 / 10 = 1.3 (left: 1.3 2 8)",
        "thoughts": [
          "2 + 8 = 10 (left: 10 10 13)",
          "8 + 2 = 10 (left: 10 10 13)",
          "10 + 2 = 12 (left: 8 12 13)",
          "13 - 2 = 11 (left: 8 10 11)",
          "13 - 8 = 5 (left: 2 5 10)",
          "13 - 10 = 3 (left: 2 3 8)",
          "10 - 2 = 8 (left: 8 8 13)",
          "10 - 8 = 2 (left: 2 2 13)",
          "8 - 2 = 6 (left: 6 10 13)",
          "10 / 2 = 5 (left: 5 8 13)",
          "8 / 2 = 4 (left: 4 10 13)",
          "13 / 2 = 6.5 (left: 6.5 8 10)",
          "13 / 10 = 1.3 (left: 1.3 2 8)",
          "10 / 8 = 1.25 (left: 1.25 2 13)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_12",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-29T12:29:59.608705",
      "event_type": "validation",
      "details": {
        "expected_state": "13 / 10 = 1.3 (left: 1.3 2 8)",
        "actual_state": "13 / 10 = 1.3 (left: 1.3 2 8)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_12_0",
      "result": "PASS",
      "reason": "Value 2.001 meets threshold 3.0",
      "timestamp": "2025-05-29T12:30:14.923408",
      "event_type": "validation",
      "details": {
        "value": 2.001,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_12_0",
      "result": "PASS",
      "reason": "node_id 0_12_0 matches thought position.",
      "timestamp": "2025-05-29T12:30:14.923477",
      "event_type": "validation",
      "details": {
        "node_id": "0_12_0",
        "state": "1.3 + 2 = 3.3 (left: 3.3 8)",
        "thoughts": [
          "1.3 + 2 = 3.3 (left: 3.3 8)",
          "2 - 1.3 = 0.7 (left: 0.7 8)",
          "8 - 1.3 = 6.7 (left: 2 6.7)",
          "1.3 * 2 = 2.6 (left: 2.6 8)",
          "8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
          "2 * 8 = 16 (left: 1.3 16)",
          "8 - 2 = 6 (left: 1.3 6)",
          "8 / 2 = 4 (left: 1.3 4)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_12_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:30:30.449360",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_12_1",
      "result": "PASS",
      "reason": "node_id 0_12_1 matches thought position.",
      "timestamp": "2025-05-29T12:30:30.449436",
      "event_type": "validation",
      "details": {
        "node_id": "0_12_1",
        "state": "2 - 1.3 = 0.7 (left: 0.7 8)",
        "thoughts": [
          "1.3 + 2 = 3.3 (left: 3.3 8)",
          "2 - 1.3 = 0.7 (left: 0.7 8)",
          "8 - 1.3 = 6.7 (left: 2 6.7)",
          "1.3 * 2 = 2.6 (left: 2.6 8)",
          "8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
          "2 * 8 = 16 (left: 1.3 16)",
          "8 - 2 = 6 (left: 1.3 6)",
          "8 / 2 = 4 (left: 1.3 4)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_12_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:30:43.522818",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_12_2",
      "result": "PASS",
      "reason": "node_id 0_12_2 matches thought position.",
      "timestamp": "2025-05-29T12:30:43.522894",
      "event_type": "validation",
      "details": {
        "node_id": "0_12_2",
        "state": "8 - 1.3 = 6.7 (left: 2 6.7)",
        "thoughts": [
          "1.3 + 2 = 3.3 (left: 3.3 8)",
          "2 - 1.3 = 0.7 (left: 0.7 8)",
          "8 - 1.3 = 6.7 (left: 2 6.7)",
          "1.3 * 2 = 2.6 (left: 2.6 8)",
          "8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
          "2 * 8 = 16 (left: 1.3 16)",
          "8 - 2 = 6 (left: 1.3 6)",
          "8 / 2 = 4 (left: 1.3 4)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_12_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:31:01.951208",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_12_3",
      "result": "PASS",
      "reason": "node_id 0_12_3 matches thought position.",
      "timestamp": "2025-05-29T12:31:01.951300",
      "event_type": "validation",
      "details": {
        "node_id": "0_12_3",
        "state": "1.3 * 2 = 2.6 (left: 2.6 8)",
        "thoughts": [
          "1.3 + 2 = 3.3 (left: 3.3 8)",
          "2 - 1.3 = 0.7 (left: 0.7 8)",
          "8 - 1.3 = 6.7 (left: 2 6.7)",
          "1.3 * 2 = 2.6 (left: 2.6 8)",
          "8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
          "2 * 8 = 16 (left: 1.3 16)",
          "8 - 2 = 6 (left: 1.3 6)",
          "8 / 2 = 4 (left: 1.3 4)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_12_4",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-29T12:31:14.742559",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_12_4",
      "result": "PASS",
      "reason": "node_id 0_12_4 matches thought position.",
      "timestamp": "2025-05-29T12:31:14.742638",
      "event_type": "validation",
      "details": {
        "node_id": "0_12_4",
        "state": "8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
        "thoughts": [
          "1.3 + 2 = 3.3 (left: 3.3 8)",
          "2 - 1.3 = 0.7 (left: 0.7 8)",
          "8 - 1.3 = 6.7 (left: 2 6.7)",
          "1.3 * 2 = 2.6 (left: 2.6 8)",
          "8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
          "2 * 8 = 16 (left: 1.3 16)",
          "8 - 2 = 6 (left: 1.3 6)",
          "8 / 2 = 4 (left: 1.3 4)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_12_5",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-29T12:31:29.626637",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_12_5",
      "result": "PASS",
      "reason": "node_id 0_12_5 matches thought position.",
      "timestamp": "2025-05-29T12:31:29.626717",
      "event_type": "validation",
      "details": {
        "node_id": "0_12_5",
        "state": "2 * 8 = 16 (left: 1.3 16)",
        "thoughts": [
          "1.3 + 2 = 3.3 (left: 3.3 8)",
          "2 - 1.3 = 0.7 (left: 0.7 8)",
          "8 - 1.3 = 6.7 (left: 2 6.7)",
          "1.3 * 2 = 2.6 (left: 2.6 8)",
          "8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
          "2 * 8 = 16 (left: 1.3 16)",
          "8 - 2 = 6 (left: 1.3 6)",
          "8 / 2 = 4 (left: 1.3 4)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_12_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:31:40.257042",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_12_6",
      "result": "PASS",
      "reason": "node_id 0_12_6 matches thought position.",
      "timestamp": "2025-05-29T12:31:40.257113",
      "event_type": "validation",
      "details": {
        "node_id": "0_12_6",
        "state": "8 - 2 = 6 (left: 1.3 6)",
        "thoughts": [
          "1.3 + 2 = 3.3 (left: 3.3 8)",
          "2 - 1.3 = 0.7 (left: 0.7 8)",
          "8 - 1.3 = 6.7 (left: 2 6.7)",
          "1.3 * 2 = 2.6 (left: 2.6 8)",
          "8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
          "2 * 8 = 16 (left: 1.3 16)",
          "8 - 2 = 6 (left: 1.3 6)",
          "8 / 2 = 4 (left: 1.3 4)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_12_7",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-29T12:31:52.695698",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_12_7",
      "result": "PASS",
      "reason": "node_id 0_12_7 matches thought position.",
      "timestamp": "2025-05-29T12:31:52.695759",
      "event_type": "validation",
      "details": {
        "node_id": "0_12_7",
        "state": "8 / 2 = 4 (left: 1.3 4)",
        "thoughts": [
          "1.3 + 2 = 3.3 (left: 3.3 8)",
          "2 - 1.3 = 0.7 (left: 0.7 8)",
          "8 - 1.3 = 6.7 (left: 2 6.7)",
          "1.3 * 2 = 2.6 (left: 2.6 8)",
          "8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
          "2 * 8 = 16 (left: 1.3 16)",
          "8 - 2 = 6 (left: 1.3 6)",
          "8 / 2 = 4 (left: 1.3 4)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_12",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_12; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-29T12:31:55.851122",
      "event_type": "validation",
      "details": {
        "popped_node": "0_12",
        "expected_popped": "0_12",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_12",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_12",
      "result": "PASS",
      "reason": "All 8 children explored - valid backtrack",
      "timestamp": "2025-05-29T12:31:55.851153",
      "event_type": "validation",
      "details": {
        "total_thoughts": 8,
        "evaluated_children": 8
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_13",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-29T12:32:05.830628",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_13",
      "result": "PASS",
      "reason": "node_id 0_13 matches thought position.",
      "timestamp": "2025-05-29T12:32:05.830700",
      "event_type": "validation",
      "details": {
        "node_id": "0_13",
        "state": "10 / 8 = 1.25 (left: 1.25 2 13)",
        "thoughts": [
          "2 + 8 = 10 (left: 10 10 13)",
          "8 + 2 = 10 (left: 10 10 13)",
          "10 + 2 = 12 (left: 8 12 13)",
          "13 - 2 = 11 (left: 8 10 11)",
          "13 - 8 = 5 (left: 2 5 10)",
          "13 - 10 = 3 (left: 2 3 8)",
          "10 - 2 = 8 (left: 8 8 13)",
          "10 - 8 = 2 (left: 2 2 13)",
          "8 - 2 = 6 (left: 6 10 13)",
          "10 / 2 = 5 (left: 5 8 13)",
          "8 / 2 = 4 (left: 4 10 13)",
          "13 / 2 = 6.5 (left: 6.5 8 10)",
          "13 / 10 = 1.3 (left: 1.3 2 8)",
          "10 / 8 = 1.25 (left: 1.25 2 13)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
      "timestamp": "2025-05-29T12:32:08.877641",
      "event_type": "validation",
      "details": {
        "popped_node": "0",
        "expected_popped": "0",
        "backtrack_to": "None",
        "expected_parent": "None",
        "validation_details": [
          "Correctly popped expected node 0",
          "Correctly backtracking to parent 'None'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0",
      "result": "PASS",
      "reason": "All 14 children explored - valid backtrack",
      "timestamp": "2025-05-29T12:32:08.877677",
      "event_type": "validation",
      "details": {
        "total_thoughts": 14,
        "evaluated_children": 14
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.596954",
      "event_type": "validation",
      "details": {
        "state": "2 + 8 = 10 (left: 10 10 13)",
        "thought": "2 + 8 = 10 (left: 10 10 13)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.596985",
      "event_type": "validation",
      "details": {
        "state": "8 + 2 = 10 (left: 10 10 13)",
        "thought": "8 + 2 = 10 (left: 10 10 13)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.596993",
      "event_type": "validation",
      "details": {
        "state": "10 + 2 = 12 (left: 8 12 13)",
        "thought": "10 + 2 = 12 (left: 8 12 13)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.596999",
      "event_type": "validation",
      "details": {
        "state": "13 - 2 = 11 (left: 8 10 11)",
        "thought": "13 - 2 = 11 (left: 8 10 11)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597004",
      "event_type": "validation",
      "details": {
        "state": "13 - 8 = 5 (left: 2 5 10)",
        "thought": "13 - 8 = 5 (left: 2 5 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597010",
      "event_type": "validation",
      "details": {
        "state": "13 - 10 = 3 (left: 2 3 8)",
        "thought": "13 - 10 = 3 (left: 2 3 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597016",
      "event_type": "validation",
      "details": {
        "state": "10 - 2 = 8 (left: 8 8 13)",
        "thought": "10 - 2 = 8 (left: 8 8 13)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_7",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597023",
      "event_type": "validation",
      "details": {
        "state": "10 - 8 = 2 (left: 2 2 13)",
        "thought": "10 - 8 = 2 (left: 2 2 13)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_8",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597028",
      "event_type": "validation",
      "details": {
        "state": "8 - 2 = 6 (left: 6 10 13)",
        "thought": "8 - 2 = 6 (left: 6 10 13)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_9",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597034",
      "event_type": "validation",
      "details": {
        "state": "10 / 2 = 5 (left: 5 8 13)",
        "thought": "10 / 2 = 5 (left: 5 8 13)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_10",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597040",
      "event_type": "validation",
      "details": {
        "state": "8 / 2 = 4 (left: 4 10 13)",
        "thought": "8 / 2 = 4 (left: 4 10 13)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_11",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597045",
      "event_type": "validation",
      "details": {
        "state": "13 / 2 = 6.5 (left: 6.5 8 10)",
        "thought": "13 / 2 = 6.5 (left: 6.5 8 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_12",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597052",
      "event_type": "validation",
      "details": {
        "state": "13 / 10 = 1.3 (left: 1.3 2 8)",
        "thought": "13 / 10 = 1.3 (left: 1.3 2 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_13",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597066",
      "event_type": "validation",
      "details": {
        "state": "10 / 8 = 1.25 (left: 1.25 2 13)",
        "thought": "10 / 8 = 1.25 (left: 1.25 2 13)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597150",
      "event_type": "validation",
      "details": {
        "state": "2 + 3 = 5 (left: 5 8)",
        "thought": "2 + 3 = 5 (left: 5 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597157",
      "event_type": "validation",
      "details": {
        "state": "3 - 2 = 1 (left: 1 8)",
        "thought": "3 - 2 = 1 (left: 1 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597162",
      "event_type": "validation",
      "details": {
        "state": "8 - 2 = 6 (left: 3 6)",
        "thought": "8 - 2 = 6 (left: 3 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597168",
      "event_type": "validation",
      "details": {
        "state": "8 - 3 = 5 (left: 2 5)",
        "thought": "8 - 3 = 5 (left: 2 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597174",
      "event_type": "validation",
      "details": {
        "state": "2 * 3 = 6 (left: 6 8)",
        "thought": "2 * 3 = 6 (left: 6 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597186",
      "event_type": "validation",
      "details": {
        "state": "3 * 2 = 6 (left: 6 8)",
        "thought": "3 * 2 = 6 (left: 6 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597193",
      "event_type": "validation",
      "details": {
        "state": "8 / 2 = 4 (left: 3 4)",
        "thought": "8 / 2 = 4 (left: 3 4)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5_7",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597199",
      "event_type": "validation",
      "details": {
        "state": "8 / 3 = 2.67 (left: 2 2.67)",
        "thought": "8 / 3 = 2.67 (left: 2 2.67)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_8_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597418",
      "event_type": "validation",
      "details": {
        "state": "6 + 10 = 16 (left: 13 16)",
        "thought": "6 + 10 = 16 (left: 13 16)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_8_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597439",
      "event_type": "validation",
      "details": {
        "state": "10 - 6 = 4 (left: 4 13)",
        "thought": "10 - 6 = 4 (left: 4 13)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_8_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597447",
      "event_type": "validation",
      "details": {
        "state": "13 - 10 = 3 (left: 3 6)",
        "thought": "13 - 10 = 3 (left: 3 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_8_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597454",
      "event_type": "validation",
      "details": {
        "state": "13 - 6 = 7 (left: 7 10)",
        "thought": "13 - 6 = 7 (left: 7 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_8_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597460",
      "event_type": "validation",
      "details": {
        "state": "10 / 6 = 1.67 (left: 1.67 13)",
        "thought": "10 / 6 = 1.67 (left: 1.67 13)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_8_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597466",
      "event_type": "validation",
      "details": {
        "state": "13 / 6 = 2.17 (left: 2.17 10)",
        "thought": "13 / 6 = 2.17 (left: 2.17 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_8_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597474",
      "event_type": "validation",
      "details": {
        "state": "13 / 10 = 1.3 (left: 1.3 6)",
        "thought": "13 / 10 = 1.3 (left: 1.3 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_8_7",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597480",
      "event_type": "validation",
      "details": {
        "state": "6 * 10 = 60 (left: 13 60)",
        "thought": "6 * 10 = 60 (left: 13 60)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_9_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597626",
      "event_type": "validation",
      "details": {
        "state": "5 + 8 = 13 (left: 13 13)",
        "thought": "5 + 8 = 13 (left: 13 13)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_9_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597640",
      "event_type": "validation",
      "details": {
        "state": "8 - 5 = 3 (left: 3 13)",
        "thought": "8 - 5 = 3 (left: 3 13)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_9_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597649",
      "event_type": "validation",
      "details": {
        "state": "13 - 5 = 8 (left: 8 8)",
        "thought": "13 - 5 = 8 (left: 8 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_9_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597669",
      "event_type": "validation",
      "details": {
        "state": "13 - 8 = 5 (left: 5 5)",
        "thought": "13 - 8 = 5 (left: 5 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_9_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597677",
      "event_type": "validation",
      "details": {
        "state": "13 / 5 = 2.6 (left: 2.6 8)",
        "thought": "13 / 5 = 2.6 (left: 2.6 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_9_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597687",
      "event_type": "validation",
      "details": {
        "state": "8 / 5 = 1.6 (left: 1.6 13)",
        "thought": "8 / 5 = 1.6 (left: 1.6 13)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_9_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597695",
      "event_type": "validation",
      "details": {
        "state": "5 * 8 = 40 (left: 13 40)",
        "thought": "5 * 8 = 40 (left: 13 40)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_11_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597825",
      "event_type": "validation",
      "details": {
        "state": "6.5 + 8 = 14.5 (left: 10 14.5)",
        "thought": "6.5 + 8 = 14.5 (left: 10 14.5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_11_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597839",
      "event_type": "validation",
      "details": {
        "state": "8 - 6.5 = 1.5 (left: 1.5 10)",
        "thought": "8 - 6.5 = 1.5 (left: 1.5 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_11_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597849",
      "event_type": "validation",
      "details": {
        "state": "10 - 6.5 = 3.5 (left: 3.5 8)",
        "thought": "10 - 6.5 = 3.5 (left: 3.5 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_11_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597859",
      "event_type": "validation",
      "details": {
        "state": "10 - 8 = 2 (left: 2 6.5)",
        "thought": "10 - 8 = 2 (left: 2 6.5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_11_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597869",
      "event_type": "validation",
      "details": {
        "state": "8 * 6.5 = 52 (left: 10 52)",
        "thought": "8 * 6.5 = 52 (left: 10 52)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_11_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597879",
      "event_type": "validation",
      "details": {
        "state": "10 / 6.5 = ~1.54 (left: ~1.54 8)",
        "thought": "10 / 6.5 = ~1.54 (left: ~1.54 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_11_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597893",
      "event_type": "validation",
      "details": {
        "state": "6.5 / 8 = ~0.81 (left: ~0.81 10)",
        "thought": "6.5 / 8 = ~0.81 (left: ~0.81 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_12_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.597997",
      "event_type": "validation",
      "details": {
        "state": "1.3 + 2 = 3.3 (left: 3.3 8)",
        "thought": "1.3 + 2 = 3.3 (left: 3.3 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_12_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.598007",
      "event_type": "validation",
      "details": {
        "state": "2 - 1.3 = 0.7 (left: 0.7 8)",
        "thought": "2 - 1.3 = 0.7 (left: 0.7 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_12_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.598014",
      "event_type": "validation",
      "details": {
        "state": "8 - 1.3 = 6.7 (left: 2 6.7)",
        "thought": "8 - 1.3 = 6.7 (left: 2 6.7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_12_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.598021",
      "event_type": "validation",
      "details": {
        "state": "1.3 * 2 = 2.6 (left: 2.6 8)",
        "thought": "1.3 * 2 = 2.6 (left: 2.6 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_12_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.598028",
      "event_type": "validation",
      "details": {
        "state": "8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
        "thought": "8 / 1.3 = 6.15 (approx) (left: 2 6.15)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_12_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.598034",
      "event_type": "validation",
      "details": {
        "state": "2 * 8 = 16 (left: 1.3 16)",
        "thought": "2 * 8 = 16 (left: 1.3 16)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_12_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.598040",
      "event_type": "validation",
      "details": {
        "state": "8 - 2 = 6 (left: 1.3 6)",
        "thought": "8 - 2 = 6 (left: 1.3 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_12_7",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-29T12:32:10.598047",
      "event_type": "validation",
      "details": {
        "state": "8 / 2 = 4 (left: 1.3 4)",
        "thought": "8 / 2 = 4 (left: 1.3 4)"
      }
    }
  ],
  "legacy_log": [
    {
      "event": "push",
      "node_id": "0",
      "issues": [],
      "log": []
    },
    {
      "event": "push",
      "node_id": "0_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_2 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_4 with value 2.001 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_5 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '13 - 10 = 3 (left: 2 3 8)' found in parent's thoughts",
        "\u2705 Node 0_5 matches thought position.",
        "\u2705 State consistency check passed for node 0_5"
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5_7",
      "issues": [],
      "log": [
        "\u2705 Node 0_5_7 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_5_7 matches thought position."
      ]
    },
    {
      "event": "pop",
      "node_id": "",
      "issues": [],
      "log": [
        "\u2705 Popped 0_5 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_5; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_5 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_8 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_8; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_8 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_9 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_9; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_9 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_11 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_11; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_11 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_12 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_12; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_12 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to 'None'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
        "\u2705 All children of node 0 were explored \u2014 valid reason for backtracking."
      ]
    },
    {
      "event": "push",
      "node_id": "0_6",
      "issues": [],
      "log": [
        "\u2705 Sequential child node validation: pushing 0_6 after popping 0_5 is correct.",
        "\u2705 Node 0_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_7",
      "issues": [],
      "log": [
        "\u2705 Node 0_7 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_7 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_8",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_8 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '8 - 2 = 6 (left: 6 10 13)' found in parent's thoughts",
        "\u2705 Node 0_8 matches thought position.",
        "\u2705 State consistency check passed for node 0_8"
      ]
    },
    {
      "event": "push",
      "node_id": "0_8_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_8_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_8_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_8_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_8_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_8_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_8_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_8_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_8_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_8_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_8_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_8_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_8_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_8_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_8_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_8_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_8_5 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_8_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_8_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_8_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_8_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_8_7",
      "issues": [],
      "log": [
        "\u2705 Node 0_8_7 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_8_7 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_9",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_9 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '10 / 2 = 5 (left: 5 8 13)' found in parent's thoughts",
        "\u2705 Sequential child node validation: pushing 0_9 after popping 0_8 is correct.",
        "\u2705 Node 0_9 matches thought position.",
        "\u2705 State consistency check passed for node 0_9"
      ]
    },
    {
      "event": "push",
      "node_id": "0_9_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_9_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_9_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_9_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_9_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_9_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_9_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_9_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_9_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_9_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_9_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_9_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_9_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_9_4 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_9_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_9_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_9_5 with value 2.001 less than 3.0 pruned successfully.",
        "\u2705 Node 0_9_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_9_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_9_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_9_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_10",
      "issues": [],
      "log": [
        "\u2705 Sequential child node validation: pushing 0_10 after popping 0_9 is correct.",
        "\u2705 Node 0_10 with value 2.001 less than 3.0 pruned successfully.",
        "\u2705 Node 0_10 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_11",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_11 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '13 / 2 = 6.5 (left: 6.5 8 10)' found in parent's thoughts",
        "\u2705 Node 0_11 matches thought position.",
        "\u2705 State consistency check passed for node 0_11"
      ]
    },
    {
      "event": "push",
      "node_id": "0_11_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_11_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_11_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_11_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_11_1 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_11_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_11_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_11_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_11_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_11_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_11_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_11_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_11_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_11_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_11_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_11_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_11_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_11_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_11_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_11_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_11_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_12",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_12 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '13 / 10 = 1.3 (left: 1.3 2 8)' found in parent's thoughts",
        "\u2705 Sequential child node validation: pushing 0_12 after popping 0_11 is correct.",
        "\u2705 Node 0_12 matches thought position.",
        "\u2705 State consistency check passed for node 0_12"
      ]
    },
    {
      "event": "push",
      "node_id": "0_12_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_12_0 with value 2.001 less than 3.0 pruned successfully.",
        "\u2705 Node 0_12_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_12_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_12_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_12_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_12_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_12_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_12_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_12_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_12_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_12_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_12_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_12_4 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_12_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_12_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_12_5 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_12_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_12_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_12_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_12_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_12_7",
      "issues": [],
      "log": [
        "\u2705 Node 0_12_7 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_12_7 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_13",
      "issues": [],
      "log": [
        "\u2705 Node 0_13 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_13 matches thought position."
      ]
    }
  ],
  "tree_trace": {
    "0": {
      "state": null,
      "thought": "2 + 8 = 10 (left: 10 10 13)\n8 + 2 = 10 (left: 10 10 13)\n10 + 2 = 12 (left: 8 12 13)\n13 - 2 = 11 (left: 8 10 11)\n13 - 8 = 5 (left: 2 5 10)\n13 - 10 = 3 (left: 2 3 8)\n10 - 2 = 8 (left: 8 8 13)\n10 - 8 = 2 (left: 2 2 13)\n8 - 2 = 6 (left: 6 10 13)\n10 / 2 = 5 (left: 5 8 13)\n8 / 2 = 4 (left: 4 10 13)\n13 / 2 = 6.5 (left: 6.5 8 10)\n13 / 10 = 1.3 (left: 1.3 2 8)\n10 / 8 = 1.25 (left: 1.25 2 13)",
      "value": null,
      "opening_remark": null,
      "children": {
        "0_0": {
          "state": "2 + 8 = 10 (left: 10 10 13)",
          "thought": null,
          "value": 0.003,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_1": {
          "state": "8 + 2 = 10 (left: 10 10 13)",
          "thought": null,
          "value": 0.003,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_2": {
          "state": "10 + 2 = 12 (left: 8 12 13)",
          "thought": null,
          "value": 1.002,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_3": {
          "state": "13 - 2 = 11 (left: 8 10 11)",
          "thought": null,
          "value": 0.003,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_4": {
          "state": "13 - 8 = 5 (left: 2 5 10)",
          "thought": null,
          "value": 2.001,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_5": {
          "state": "13 - 10 = 3 (left: 2 3 8)",
          "thought": "2 + 3 = 5 (left: 5 8)\n3 - 2 = 1 (left: 1 8)\n8 - 2 = 6 (left: 3 6)\n8 - 3 = 5 (left: 2 5)\n2 * 3 = 6 (left: 6 8)\n3 * 2 = 6 (left: 6 8)\n8 / 2 = 4 (left: 3 4)\n8 / 3 = 2.67 (left: 2 2.67)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_5_0": {
              "state": "13 - 10 = 3 (left: 2 3 8)\n2 + 3 = 5 (left: 5 8)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_5_1": {
              "state": "13 - 10 = 3 (left: 2 3 8)\n3 - 2 = 1 (left: 1 8)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_5_2": {
              "state": "13 - 10 = 3 (left: 2 3 8)\n8 - 2 = 6 (left: 3 6)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_5_3": {
              "state": "13 - 10 = 3 (left: 2 3 8)\n8 - 3 = 5 (left: 2 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_5_4": {
              "state": "13 - 10 = 3 (left: 2 3 8)\n2 * 3 = 6 (left: 6 8)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_5_5": {
              "state": "13 - 10 = 3 (left: 2 3 8)\n3 * 2 = 6 (left: 6 8)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_5_6": {
              "state": "13 - 10 = 3 (left: 2 3 8)\n8 / 2 = 4 (left: 3 4)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_5_7": {
              "state": "13 - 10 = 3 (left: 2 3 8)\n8 / 3 = 2.67 (left: 2 2.67)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_6": {
          "state": "10 - 2 = 8 (left: 8 8 13)",
          "thought": null,
          "value": 0.003,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_7": {
          "state": "10 - 8 = 2 (left: 2 2 13)",
          "thought": null,
          "value": 1.002,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_8": {
          "state": "8 - 2 = 6 (left: 6 10 13)",
          "thought": "6 + 10 = 16 (left: 13 16)\n10 - 6 = 4 (left: 4 13)\n13 - 10 = 3 (left: 3 6)\n13 - 6 = 7 (left: 7 10)\n10 / 6 = 1.67 (left: 1.67 13)\n13 / 6 = 2.17 (left: 2.17 10)\n13 / 10 = 1.3 (left: 1.3 6)\n6 * 10 = 60 (left: 13 60)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_8_0": {
              "state": "8 - 2 = 6 (left: 6 10 13)\n6 + 10 = 16 (left: 13 16)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_8_1": {
              "state": "8 - 2 = 6 (left: 6 10 13)\n10 - 6 = 4 (left: 4 13)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_8_2": {
              "state": "8 - 2 = 6 (left: 6 10 13)\n13 - 10 = 3 (left: 3 6)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_8_3": {
              "state": "8 - 2 = 6 (left: 6 10 13)\n13 - 6 = 7 (left: 7 10)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_8_4": {
              "state": "8 - 2 = 6 (left: 6 10 13)\n10 / 6 = 1.67 (left: 1.67 13)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_8_5": {
              "state": "8 - 2 = 6 (left: 6 10 13)\n13 / 6 = 2.17 (left: 2.17 10)",
              "thought": null,
              "value": 1.002,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_8_6": {
              "state": "8 - 2 = 6 (left: 6 10 13)\n13 / 10 = 1.3 (left: 1.3 6)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_8_7": {
              "state": "8 - 2 = 6 (left: 6 10 13)\n6 * 10 = 60 (left: 13 60)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_9": {
          "state": "10 / 2 = 5 (left: 5 8 13)",
          "thought": "5 + 8 = 13 (left: 13 13)\n8 - 5 = 3 (left: 3 13)\n13 - 5 = 8 (left: 8 8)\n13 - 8 = 5 (left: 5 5)\n13 / 5 = 2.6 (left: 2.6 8)\n8 / 5 = 1.6 (left: 1.6 13)\n5 * 8 = 40 (left: 13 40)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_9_0": {
              "state": "10 / 2 = 5 (left: 5 8 13)\n5 + 8 = 13 (left: 13 13)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_9_1": {
              "state": "10 / 2 = 5 (left: 5 8 13)\n8 - 5 = 3 (left: 3 13)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_9_2": {
              "state": "10 / 2 = 5 (left: 5 8 13)\n13 - 5 = 8 (left: 8 8)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_9_3": {
              "state": "10 / 2 = 5 (left: 5 8 13)\n13 - 8 = 5 (left: 5 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_9_4": {
              "state": "10 / 2 = 5 (left: 5 8 13)\n13 / 5 = 2.6 (left: 2.6 8)",
              "thought": null,
              "value": 1.002,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_9_5": {
              "state": "10 / 2 = 5 (left: 5 8 13)\n8 / 5 = 1.6 (left: 1.6 13)",
              "thought": null,
              "value": 2.001,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_9_6": {
              "state": "10 / 2 = 5 (left: 5 8 13)\n5 * 8 = 40 (left: 13 40)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_10": {
          "state": "8 / 2 = 4 (left: 4 10 13)",
          "thought": null,
          "value": 2.001,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_11": {
          "state": "13 / 2 = 6.5 (left: 6.5 8 10)",
          "thought": "6.5 + 8 = 14.5 (left: 10 14.5)\n8 - 6.5 = 1.5 (left: 1.5 10)\n10 - 6.5 = 3.5 (left: 3.5 8)\n10 - 8 = 2 (left: 2 6.5)\n8 * 6.5 = 52 (left: 10 52)\n10 / 6.5 = ~1.54 (left: ~1.54 8)\n6.5 / 8 = ~0.81 (left: ~0.81 10)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_11_0": {
              "state": "13 / 2 = 6.5 (left: 6.5 8 10)\n6.5 + 8 = 14.5 (left: 10 14.5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_11_1": {
              "state": "13 / 2 = 6.5 (left: 6.5 8 10)\n8 - 6.5 = 1.5 (left: 1.5 10)",
              "thought": null,
              "value": 1.002,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_11_2": {
              "state": "13 / 2 = 6.5 (left: 6.5 8 10)\n10 - 6.5 = 3.5 (left: 3.5 8)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_11_3": {
              "state": "13 / 2 = 6.5 (left: 6.5 8 10)\n10 - 8 = 2 (left: 2 6.5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_11_4": {
              "state": "13 / 2 = 6.5 (left: 6.5 8 10)\n8 * 6.5 = 52 (left: 10 52)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_11_5": {
              "state": "13 / 2 = 6.5 (left: 6.5 8 10)\n10 / 6.5 = ~1.54 (left: ~1.54 8)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_11_6": {
              "state": "13 / 2 = 6.5 (left: 6.5 8 10)\n6.5 / 8 = ~0.81 (left: ~0.81 10)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_12": {
          "state": "13 / 10 = 1.3 (left: 1.3 2 8)",
          "thought": "1.3 + 2 = 3.3 (left: 3.3 8)\n2 - 1.3 = 0.7 (left: 0.7 8)\n8 - 1.3 = 6.7 (left: 2 6.7)\n1.3 * 2 = 2.6 (left: 2.6 8)\n8 / 1.3 = 6.15 (approx) (left: 2 6.15)\n2 * 8 = 16 (left: 1.3 16)\n8 - 2 = 6 (left: 1.3 6)\n8 / 2 = 4 (left: 1.3 4)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_12_0": {
              "state": "13 / 10 = 1.3 (left: 1.3 2 8)\n1.3 + 2 = 3.3 (left: 3.3 8)",
              "thought": null,
              "value": 2.001,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_12_1": {
              "state": "13 / 10 = 1.3 (left: 1.3 2 8)\n2 - 1.3 = 0.7 (left: 0.7 8)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_12_2": {
              "state": "13 / 10 = 1.3 (left: 1.3 2 8)\n8 - 1.3 = 6.7 (left: 2 6.7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_12_3": {
              "state": "13 / 10 = 1.3 (left: 1.3 2 8)\n1.3 * 2 = 2.6 (left: 2.6 8)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_12_4": {
              "state": "13 / 10 = 1.3 (left: 1.3 2 8)\n8 / 1.3 = 6.15 (approx) (left: 2 6.15)",
              "thought": null,
              "value": 1.002,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_12_5": {
              "state": "13 / 10 = 1.3 (left: 1.3 2 8)\n2 * 8 = 16 (left: 1.3 16)",
              "thought": null,
              "value": 1.002,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_12_6": {
              "state": "13 / 10 = 1.3 (left: 1.3 2 8)\n8 - 2 = 6 (left: 1.3 6)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_12_7": {
              "state": "13 / 10 = 1.3 (left: 1.3 2 8)\n8 / 2 = 4 (left: 1.3 4)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_13": {
          "state": "10 / 8 = 1.25 (left: 1.25 2 13)",
          "thought": null,
          "value": 1.002,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        }
      },
      "closing_remark": null,
      "backtracked": false
    }
  }
}