{
  "summary": {
    "total_checks": 34,
    "passed": 33,
    "failed": 1
  },
  "checks_by_type": {
    "pseudo_recursive_call": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "Value 40.001 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T08:40:43.974443",
          "event_type": "validation",
          "details": {
            "value": 40.001,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "Value 60.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T08:41:13.777756",
          "event_type": "validation",
          "details": {
            "value": 60.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_0_1_2",
          "result": "PASS",
          "reason": "Value 60.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T08:41:46.803817",
          "event_type": "validation",
          "details": {
            "value": 60.0,
            "threshold": 3.0
          }
        }
      ]
    },
    "child_state": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "child_state",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State validation passed: Last thought '3 + 3 = 6 (left: 6 12 12)' found in parent's thoughts",
          "timestamp": "2025-05-30T08:40:43.974498",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '3 + 3 = 6 (left: 6 12 12)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "3 + 3 = 6 (left: 6 12 12)",
              "12 / 3 = 4 (left: 3 4 12)",
              "12 - 3 = 9 (left: 3 9 12)",
              "3 * 3 = 9 (left: 9 12 12)",
              "12 + 3 = 15 (left: 3 12 15)",
              "12 * 3 = 36 (left: 3 12 36)",
              "12 - 12 = 0 (left: 0 3 3)",
              "12 / 12 = 1 (left: 1 3 3)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "State validation passed: Last thought '12 / 6 = 2 (left: 2 12)' found in parent's thoughts; Previous thought '3 + 3 = 6 (left: 6 12 12)' found in parent's state",
          "timestamp": "2025-05-30T08:41:13.777814",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '12 / 6 = 2 (left: 2 12)' found in parent's thoughts",
              "Previous thought '3 + 3 = 6 (left: 6 12 12)' found in parent's state"
            ],
            "parent_thoughts": [
              "6 + 12 = 18 (left: 12 18)",
              "12 / 6 = 2 (left: 2 12)",
              "12 - 6 = 6 (left: 6 12)",
              "6 * 12 = 72 (left: 12 72)",
              "12 + 12 = 24 (left: 6 24)",
              "12 / 12 = 1 (left: 1 6)",
              "12 - 12 = 0 (left: 0 6)"
            ],
            "parent_state": [
              "3 + 3 = 6 (left: 6 12 12)"
            ]
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_0_1_2",
          "result": "PASS",
          "reason": "State validation passed: Last thought '2 * 12 = 24 (left: 24)' found in parent's thoughts; Previous thought '3 + 3 = 6 (left: 6 12 12)' found in parent's state; Previous thought '12 / 6 = 2 (left: 2 12)' found in parent's state",
          "timestamp": "2025-05-30T08:41:46.803880",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '2 * 12 = 24 (left: 24)' found in parent's thoughts",
              "Previous thought '3 + 3 = 6 (left: 6 12 12)' found in parent's state",
              "Previous thought '12 / 6 = 2 (left: 2 12)' found in parent's state"
            ],
            "parent_thoughts": [
              "2 + 12 = 14 (left: 14)",
              "12 - 2 = 10 (left: 10)",
              "2 * 12 = 24 (left: 24)",
              "12 / 2 = 6 (left: 6)"
            ],
            "parent_state": [
              "3 + 3 = 6 (left: 6 12 12)",
              "12 / 6 = 2 (left: 2 12)"
            ]
          }
        }
      ]
    },
    "child_id_assignment": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "node_id 0_0 matches thought position.",
          "timestamp": "2025-05-30T08:40:43.974541",
          "event_type": "validation",
          "details": {
            "node_id": "0_0",
            "state": "3 + 3 = 6 (left: 6 12 12)",
            "thoughts": [
              "3 + 3 = 6 (left: 6 12 12)",
              "12 / 3 = 4 (left: 3 4 12)",
              "12 - 3 = 9 (left: 3 9 12)",
              "3 * 3 = 9 (left: 9 12 12)",
              "12 + 3 = 15 (left: 3 12 15)",
              "12 * 3 = 36 (left: 3 12 36)",
              "12 - 12 = 0 (left: 0 3 3)",
              "12 / 12 = 1 (left: 1 3 3)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_0",
          "result": "PASS",
          "reason": "node_id 0_0_0 matches thought position.",
          "timestamp": "2025-05-30T08:41:05.164290",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_0",
            "state": "6 + 12 = 18 (left: 12 18)",
            "thoughts": [
              "6 + 12 = 18 (left: 12 18)",
              "12 / 6 = 2 (left: 2 12)",
              "12 - 6 = 6 (left: 6 12)",
              "6 * 12 = 72 (left: 12 72)",
              "12 + 12 = 24 (left: 6 24)",
              "12 / 12 = 1 (left: 1 6)",
              "12 - 12 = 0 (left: 0 6)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "node_id 0_0_1 matches thought position.",
          "timestamp": "2025-05-30T08:41:13.777856",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_1",
            "state": "12 / 6 = 2 (left: 2 12)",
            "thoughts": [
              "6 + 12 = 18 (left: 12 18)",
              "12 / 6 = 2 (left: 2 12)",
              "12 - 6 = 6 (left: 6 12)",
              "6 * 12 = 72 (left: 12 72)",
              "12 + 12 = 24 (left: 6 24)",
              "12 / 12 = 1 (left: 1 6)",
              "12 - 12 = 0 (left: 0 6)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_1_0",
          "result": "PASS",
          "reason": "node_id 0_0_1_0 matches thought position.",
          "timestamp": "2025-05-30T08:41:30.509287",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_1_0",
            "state": "2 + 12 = 14 (left: 14)",
            "thoughts": [
              "2 + 12 = 14 (left: 14)",
              "12 - 2 = 10 (left: 10)",
              "2 * 12 = 24 (left: 24)",
              "12 / 2 = 6 (left: 6)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_1_1",
          "result": "PASS",
          "reason": "node_id 0_0_1_1 matches thought position.",
          "timestamp": "2025-05-30T08:41:37.859588",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_1_1",
            "state": "12 - 2 = 10 (left: 10)",
            "thoughts": [
              "2 + 12 = 14 (left: 14)",
              "12 - 2 = 10 (left: 10)",
              "2 * 12 = 24 (left: 24)",
              "12 / 2 = 6 (left: 6)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_1_2",
          "result": "PASS",
          "reason": "node_id 0_0_1_2 matches thought position.",
          "timestamp": "2025-05-30T08:41:46.803920",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_1_2",
            "state": "2 * 12 = 24 (left: 24)",
            "thoughts": [
              "2 + 12 = 14 (left: 14)",
              "12 - 2 = 10 (left: 10)",
              "2 * 12 = 24 (left: 24)",
              "12 / 2 = 6 (left: 6)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_1_2_0",
          "result": "PASS",
          "reason": "node_id 0_0_1_2_0 matches thought position.",
          "timestamp": "2025-05-30T08:41:59.663241",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_1_2_0",
            "state": "Answer: (12 / (3 + 3)) * 12 = 24",
            "thoughts": [
              "Answer: (12 / (3 + 3)) * 12 = 24"
            ]
          }
        }
      ]
    },
    "node_state": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "node_state",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T08:40:52.567340",
          "event_type": "validation",
          "details": {
            "expected_state": "3 + 3 = 6 (left: 6 12 12)",
            "actual_state": "3 + 3 = 6 (left: 6 12 12)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T08:41:21.059241",
          "event_type": "validation",
          "details": {
            "expected_state": "3 + 3 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)",
            "actual_state": "3 + 3 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_0_1_2",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T08:41:52.774278",
          "event_type": "validation",
          "details": {
            "expected_state": "3 + 3 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
            "actual_state": "3 + 3 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
          }
        }
      ]
    },
    "pruning": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pruning",
          "node_id": "0_0_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T08:41:05.164190",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_1_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T08:41:30.509204",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_1_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T08:41:37.859507",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        }
      ]
    },
    "backtracking_I": {
      "FAIL": 1,
      "details": [
        {
          "check_name": "backtracking_I",
          "node_id": "0_0_1_2",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_0_1_2; Correctly backtracking to parent '0_0_1'",
          "timestamp": "2025-05-30T08:42:05.305467",
          "event_type": "validation",
          "details": {
            "popped_node": "0_0_1_2",
            "expected_popped": "0_0_1_2",
            "backtrack_to": "0_0_1",
            "expected_parent": "0_0_1",
            "validation_details": [
              "Correctly popped expected node 0_0_1_2",
              "Correctly backtracking to parent '0_0_1'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_0_1; Correctly backtracking to parent '0_0'",
          "timestamp": "2025-05-30T08:42:08.087527",
          "event_type": "validation",
          "details": {
            "popped_node": "0_0_1",
            "expected_popped": "0_0_1",
            "backtrack_to": "0_0",
            "expected_parent": "0_0",
            "validation_details": [
              "Correctly popped expected node 0_0_1",
              "Correctly backtracking to parent '0_0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_0",
          "result": "FAIL",
          "reason": "Complete backtracking validation failed: Expected to pop 0, but popped 0_0; Expected to backtrack to '0', but got 'None'",
          "timestamp": "2025-05-30T08:42:10.363900",
          "event_type": "validation",
          "details": {
            "popped_node": "0_0",
            "expected_popped": "0",
            "backtrack_to": "None",
            "expected_parent": "0",
            "validation_errors": [
              "Expected to pop 0, but popped 0_0",
              "Expected to backtrack to '0', but got 'None'"
            ]
          }
        }
      ]
    },
    "base_case": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "base_case",
          "node_id": "0_0_1_2",
          "result": "PASS",
          "reason": "Level limit 3 exceeded - valid backtrack",
          "timestamp": "2025-05-30T08:42:05.305495",
          "event_type": "validation",
          "details": {
            "stack_size": 3,
            "level_limit": 3
          }
        }
      ]
    },
    "backtracking_II": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_II",
          "node_id": "0_0_1_2",
          "result": "PASS",
          "reason": "Correct True flag used in True backtrack mode",
          "timestamp": "2025-05-30T08:42:05.305502",
          "event_type": "validation",
          "details": {
            "flag": "True",
            "true_backtrack_mode": true
          }
        },
        {
          "check_name": "backtracking_II",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "Correct True flag used in True backtrack mode",
          "timestamp": "2025-05-30T08:42:08.087558",
          "event_type": "validation",
          "details": {
            "flag": "True",
            "true_backtrack_mode": true
          }
        },
        {
          "check_name": "backtracking_II",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "Correct True flag used in True backtrack mode",
          "timestamp": "2025-05-30T08:42:10.363935",
          "event_type": "validation",
          "details": {
            "flag": "True",
            "true_backtrack_mode": true
          }
        }
      ]
    },
    "looping_order": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "looping_order",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T08:42:11.743382",
          "event_type": "validation",
          "details": {
            "state": "3 + 3 = 6 (left: 6 12 12)",
            "thought": "3 + 3 = 6 (left: 6 12 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T08:42:11.743445",
          "event_type": "validation",
          "details": {
            "state": "6 + 12 = 18 (left: 12 18)",
            "thought": "6 + 12 = 18 (left: 12 18)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T08:42:11.743458",
          "event_type": "validation",
          "details": {
            "state": "12 / 6 = 2 (left: 2 12)",
            "thought": "12 / 6 = 2 (left: 2 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_1_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T08:42:11.743517",
          "event_type": "validation",
          "details": {
            "state": "2 + 12 = 14 (left: 14)",
            "thought": "2 + 12 = 14 (left: 14)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_1_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T08:42:11.743529",
          "event_type": "validation",
          "details": {
            "state": "12 - 2 = 10 (left: 10)",
            "thought": "12 - 2 = 10 (left: 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_1_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T08:42:11.743539",
          "event_type": "validation",
          "details": {
            "state": "2 * 12 = 24 (left: 24)",
            "thought": "2 * 12 = 24 (left: 24)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_1_2_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T08:42:11.743582",
          "event_type": "validation",
          "details": {
            "state": "Answer: (12 / (3 + 3)) * 12 = 24",
            "thought": "Answer: (12 / (3 + 3)) * 12 = 24"
          }
        }
      ]
    },
    "final_answer": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "final_answer",
          "node_id": "final",
          "result": "PASS",
          "reason": "Result 24.0 matches expected answer 24.0",
          "timestamp": "2025-05-30T08:42:11.743732",
          "event_type": "validation",
          "details": {
            "result": 24.0,
            "expected": 24.0,
            "difference": 0.0
          }
        }
      ]
    },
    "valid_search_trace": {
      "success_trace": false
    }
  },
  "detailed_results": [
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "Value 40.001 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T08:40:43.974443",
      "event_type": "validation",
      "details": {
        "value": 40.001,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State validation passed: Last thought '3 + 3 = 6 (left: 6 12 12)' found in parent's thoughts",
      "timestamp": "2025-05-30T08:40:43.974498",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '3 + 3 = 6 (left: 6 12 12)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "3 + 3 = 6 (left: 6 12 12)",
          "12 / 3 = 4 (left: 3 4 12)",
          "12 - 3 = 9 (left: 3 9 12)",
          "3 * 3 = 9 (left: 9 12 12)",
          "12 + 3 = 15 (left: 3 12 15)",
          "12 * 3 = 36 (left: 3 12 36)",
          "12 - 12 = 0 (left: 0 3 3)",
          "12 / 12 = 1 (left: 1 3 3)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "node_id 0_0 matches thought position.",
      "timestamp": "2025-05-30T08:40:43.974541",
      "event_type": "validation",
      "details": {
        "node_id": "0_0",
        "state": "3 + 3 = 6 (left: 6 12 12)",
        "thoughts": [
          "3 + 3 = 6 (left: 6 12 12)",
          "12 / 3 = 4 (left: 3 4 12)",
          "12 - 3 = 9 (left: 3 9 12)",
          "3 * 3 = 9 (left: 9 12 12)",
          "12 + 3 = 15 (left: 3 12 15)",
          "12 * 3 = 36 (left: 3 12 36)",
          "12 - 12 = 0 (left: 0 3 3)",
          "12 / 12 = 1 (left: 1 3 3)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T08:40:52.567340",
      "event_type": "validation",
      "details": {
        "expected_state": "3 + 3 = 6 (left: 6 12 12)",
        "actual_state": "3 + 3 = 6 (left: 6 12 12)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T08:41:05.164190",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_0",
      "result": "PASS",
      "reason": "node_id 0_0_0 matches thought position.",
      "timestamp": "2025-05-30T08:41:05.164290",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_0",
        "state": "6 + 12 = 18 (left: 12 18)",
        "thoughts": [
          "6 + 12 = 18 (left: 12 18)",
          "12 / 6 = 2 (left: 2 12)",
          "12 - 6 = 6 (left: 6 12)",
          "6 * 12 = 72 (left: 12 72)",
          "12 + 12 = 24 (left: 6 24)",
          "12 / 12 = 1 (left: 1 6)",
          "12 - 12 = 0 (left: 0 6)"
        ]
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "Value 60.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T08:41:13.777756",
      "event_type": "validation",
      "details": {
        "value": 60.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "State validation passed: Last thought '12 / 6 = 2 (left: 2 12)' found in parent's thoughts; Previous thought '3 + 3 = 6 (left: 6 12 12)' found in parent's state",
      "timestamp": "2025-05-30T08:41:13.777814",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '12 / 6 = 2 (left: 2 12)' found in parent's thoughts",
          "Previous thought '3 + 3 = 6 (left: 6 12 12)' found in parent's state"
        ],
        "parent_thoughts": [
          "6 + 12 = 18 (left: 12 18)",
          "12 / 6 = 2 (left: 2 12)",
          "12 - 6 = 6 (left: 6 12)",
          "6 * 12 = 72 (left: 12 72)",
          "12 + 12 = 24 (left: 6 24)",
          "12 / 12 = 1 (left: 1 6)",
          "12 - 12 = 0 (left: 0 6)"
        ],
        "parent_state": [
          "3 + 3 = 6 (left: 6 12 12)"
        ]
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "node_id 0_0_1 matches thought position.",
      "timestamp": "2025-05-30T08:41:13.777856",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_1",
        "state": "12 / 6 = 2 (left: 2 12)",
        "thoughts": [
          "6 + 12 = 18 (left: 12 18)",
          "12 / 6 = 2 (left: 2 12)",
          "12 - 6 = 6 (left: 6 12)",
          "6 * 12 = 72 (left: 12 72)",
          "12 + 12 = 24 (left: 6 24)",
          "12 / 12 = 1 (left: 1 6)",
          "12 - 12 = 0 (left: 0 6)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T08:41:21.059241",
      "event_type": "validation",
      "details": {
        "expected_state": "3 + 3 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)",
        "actual_state": "3 + 3 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_1_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T08:41:30.509204",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_1_0",
      "result": "PASS",
      "reason": "node_id 0_0_1_0 matches thought position.",
      "timestamp": "2025-05-30T08:41:30.509287",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_1_0",
        "state": "2 + 12 = 14 (left: 14)",
        "thoughts": [
          "2 + 12 = 14 (left: 14)",
          "12 - 2 = 10 (left: 10)",
          "2 * 12 = 24 (left: 24)",
          "12 / 2 = 6 (left: 6)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_1_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T08:41:37.859507",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_1_1",
      "result": "PASS",
      "reason": "node_id 0_0_1_1 matches thought position.",
      "timestamp": "2025-05-30T08:41:37.859588",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_1_1",
        "state": "12 - 2 = 10 (left: 10)",
        "thoughts": [
          "2 + 12 = 14 (left: 14)",
          "12 - 2 = 10 (left: 10)",
          "2 * 12 = 24 (left: 24)",
          "12 / 2 = 6 (left: 6)"
        ]
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_0_1_2",
      "result": "PASS",
      "reason": "Value 60.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T08:41:46.803817",
      "event_type": "validation",
      "details": {
        "value": 60.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_0_1_2",
      "result": "PASS",
      "reason": "State validation passed: Last thought '2 * 12 = 24 (left: 24)' found in parent's thoughts; Previous thought '3 + 3 = 6 (left: 6 12 12)' found in parent's state; Previous thought '12 / 6 = 2 (left: 2 12)' found in parent's state",
      "timestamp": "2025-05-30T08:41:46.803880",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '2 * 12 = 24 (left: 24)' found in parent's thoughts",
          "Previous thought '3 + 3 = 6 (left: 6 12 12)' found in parent's state",
          "Previous thought '12 / 6 = 2 (left: 2 12)' found in parent's state"
        ],
        "parent_thoughts": [
          "2 + 12 = 14 (left: 14)",
          "12 - 2 = 10 (left: 10)",
          "2 * 12 = 24 (left: 24)",
          "12 / 2 = 6 (left: 6)"
        ],
        "parent_state": [
          "3 + 3 = 6 (left: 6 12 12)",
          "12 / 6 = 2 (left: 2 12)"
        ]
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_1_2",
      "result": "PASS",
      "reason": "node_id 0_0_1_2 matches thought position.",
      "timestamp": "2025-05-30T08:41:46.803920",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_1_2",
        "state": "2 * 12 = 24 (left: 24)",
        "thoughts": [
          "2 + 12 = 14 (left: 14)",
          "12 - 2 = 10 (left: 10)",
          "2 * 12 = 24 (left: 24)",
          "12 / 2 = 6 (left: 6)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_0_1_2",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T08:41:52.774278",
      "event_type": "validation",
      "details": {
        "expected_state": "3 + 3 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
        "actual_state": "3 + 3 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_1_2_0",
      "result": "PASS",
      "reason": "node_id 0_0_1_2_0 matches thought position.",
      "timestamp": "2025-05-30T08:41:59.663241",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_1_2_0",
        "state": "Answer: (12 / (3 + 3)) * 12 = 24",
        "thoughts": [
          "Answer: (12 / (3 + 3)) * 12 = 24"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_0_1_2",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_0_1_2; Correctly backtracking to parent '0_0_1'",
      "timestamp": "2025-05-30T08:42:05.305467",
      "event_type": "validation",
      "details": {
        "popped_node": "0_0_1_2",
        "expected_popped": "0_0_1_2",
        "backtrack_to": "0_0_1",
        "expected_parent": "0_0_1",
        "validation_details": [
          "Correctly popped expected node 0_0_1_2",
          "Correctly backtracking to parent '0_0_1'"
        ]
      }
    },
    {
      "check_name": "base_case",
      "node_id": "0_0_1_2",
      "result": "PASS",
      "reason": "Level limit 3 exceeded - valid backtrack",
      "timestamp": "2025-05-30T08:42:05.305495",
      "event_type": "validation",
      "details": {
        "stack_size": 3,
        "level_limit": 3
      }
    },
    {
      "check_name": "backtracking_II",
      "node_id": "0_0_1_2",
      "result": "PASS",
      "reason": "Correct True flag used in True backtrack mode",
      "timestamp": "2025-05-30T08:42:05.305502",
      "event_type": "validation",
      "details": {
        "flag": "True",
        "true_backtrack_mode": true
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_0_1; Correctly backtracking to parent '0_0'",
      "timestamp": "2025-05-30T08:42:08.087527",
      "event_type": "validation",
      "details": {
        "popped_node": "0_0_1",
        "expected_popped": "0_0_1",
        "backtrack_to": "0_0",
        "expected_parent": "0_0",
        "validation_details": [
          "Correctly popped expected node 0_0_1",
          "Correctly backtracking to parent '0_0'"
        ]
      }
    },
    {
      "check_name": "backtracking_II",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "Correct True flag used in True backtrack mode",
      "timestamp": "2025-05-30T08:42:08.087558",
      "event_type": "validation",
      "details": {
        "flag": "True",
        "true_backtrack_mode": true
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_0",
      "result": "FAIL",
      "reason": "Complete backtracking validation failed: Expected to pop 0, but popped 0_0; Expected to backtrack to '0', but got 'None'",
      "timestamp": "2025-05-30T08:42:10.363900",
      "event_type": "validation",
      "details": {
        "popped_node": "0_0",
        "expected_popped": "0",
        "backtrack_to": "None",
        "expected_parent": "0",
        "validation_errors": [
          "Expected to pop 0, but popped 0_0",
          "Expected to backtrack to '0', but got 'None'"
        ]
      }
    },
    {
      "check_name": "backtracking_II",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "Correct True flag used in True backtrack mode",
      "timestamp": "2025-05-30T08:42:10.363935",
      "event_type": "validation",
      "details": {
        "flag": "True",
        "true_backtrack_mode": true
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T08:42:11.743382",
      "event_type": "validation",
      "details": {
        "state": "3 + 3 = 6 (left: 6 12 12)",
        "thought": "3 + 3 = 6 (left: 6 12 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T08:42:11.743445",
      "event_type": "validation",
      "details": {
        "state": "6 + 12 = 18 (left: 12 18)",
        "thought": "6 + 12 = 18 (left: 12 18)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T08:42:11.743458",
      "event_type": "validation",
      "details": {
        "state": "12 / 6 = 2 (left: 2 12)",
        "thought": "12 / 6 = 2 (left: 2 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_1_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T08:42:11.743517",
      "event_type": "validation",
      "details": {
        "state": "2 + 12 = 14 (left: 14)",
        "thought": "2 + 12 = 14 (left: 14)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_1_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T08:42:11.743529",
      "event_type": "validation",
      "details": {
        "state": "12 - 2 = 10 (left: 10)",
        "thought": "12 - 2 = 10 (left: 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_1_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T08:42:11.743539",
      "event_type": "validation",
      "details": {
        "state": "2 * 12 = 24 (left: 24)",
        "thought": "2 * 12 = 24 (left: 24)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_1_2_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T08:42:11.743582",
      "event_type": "validation",
      "details": {
        "state": "Answer: (12 / (3 + 3)) * 12 = 24",
        "thought": "Answer: (12 / (3 + 3)) * 12 = 24"
      }
    },
    {
      "check_name": "final_answer",
      "node_id": "final",
      "result": "PASS",
      "reason": "Result 24.0 matches expected answer 24.0",
      "timestamp": "2025-05-30T08:42:11.743732",
      "event_type": "validation",
      "details": {
        "result": 24.0,
        "expected": 24.0,
        "difference": 0.0
      }
    }
  ],
  "legacy_log": [
    {
      "event": "push",
      "node_id": "0",
      "issues": [],
      "log": []
    },
    {
      "event": "push",
      "node_id": "0_0",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_0 with value 40.001 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '3 + 3 = 6 (left: 6 12 12)' found in parent's thoughts",
        "\u2705 Node 0_0 matches thought position.",
        "\u2705 State consistency check passed for node 0_0"
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_1",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_0_1 with value 60.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '12 / 6 = 2 (left: 2 12)' found in parent's thoughts; Previous thought '3 + 3 = 6 (left: 6 12 12)' found in parent's state",
        "\u2705 Node 0_0_1 matches thought position.",
        "\u2705 State consistency check passed for node 0_0_1"
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_1_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_1_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_1_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_1_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_1_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_1_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_1_2",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_0_1_2 with value 60.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '2 * 12 = 24 (left: 24)' found in parent's thoughts; Previous thought '3 + 3 = 6 (left: 6 12 12)' found in parent's state; Previous thought '12 / 6 = 2 (left: 2 12)' found in parent's state",
        "\u2705 Node 0_0_1_2 matches thought position.",
        "\u2705 State consistency check passed for node 0_0_1_2"
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_1_2_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_1_2_0 matches thought position."
      ]
    },
    {
      "event": "pop",
      "node_id": "",
      "issues": [
        "Pop error: Expected to pop 0, but popped 0_0.",
        "Backtrack parent error: Expected to backtrack to '0', but got 'None'.",
        "Complete backtracking validation failed: Expected to pop 0, but popped 0_0; Expected to backtrack to '0', but got 'None'"
      ],
      "log": [
        "\u2705 Popped 0_0_1_2 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0_0_1'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_0_1_2; Correctly backtracking to parent '0_0_1'",
        "\u2705 Level limit exceeded \u2014 valid reason for backtracking.",
        "\u2705 Subsequent backtrack validation: correctly using True flag in Subsequent mode for 0_0_1_2.",
        "\u2705 Popped 0_0_1 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0_0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_0_1; Correctly backtracking to parent '0_0'",
        "\u2705 Subsequent backtrack validation: correctly using True flag in Subsequent mode for 0_0_1.",
        "\u2705 Subsequent backtrack validation: correctly using True flag in Subsequent mode for 0_0."
      ]
    }
  ],
  "tree_trace": {
    "0": {
      "state": null,
      "thought": "3 + 3 = 6 (left: 6 12 12)\n12 / 3 = 4 (left: 3 4 12)\n12 - 3 = 9 (left: 3 9 12)\n3 * 3 = 9 (left: 9 12 12)\n12 + 3 = 15 (left: 3 12 15)\n12 * 3 = 36 (left: 3 12 36)\n12 - 12 = 0 (left: 0 3 3)\n12 / 12 = 1 (left: 1 3 3)",
      "value": null,
      "opening_remark": null,
      "children": {
        "0_0": {
          "state": "3 + 3 = 6 (left: 6 12 12)",
          "thought": "6 + 12 = 18 (left: 12 18)\n12 / 6 = 2 (left: 2 12)\n12 - 6 = 6 (left: 6 12)\n6 * 12 = 72 (left: 12 72)\n12 + 12 = 24 (left: 6 24)\n12 / 12 = 1 (left: 1 6)\n12 - 12 = 0 (left: 0 6)",
          "value": 40.001,
          "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
          "children": {
            "0_0_0": {
              "state": "3 + 3 = 6 (left: 6 12 12)\n6 + 12 = 18 (left: 12 18)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_1": {
              "state": "3 + 3 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)",
              "thought": "2 + 12 = 14 (left: 14)\n12 - 2 = 10 (left: 10)\n2 * 12 = 24 (left: 24)\n12 / 2 = 6 (left: 6)",
              "value": 60.0,
              "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
              "children": {
                "0_0_1_0": {
                  "state": "3 + 3 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                  "thought": null,
                  "value": 0.003,
                  "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                  "children": {},
                  "closing_remark": null,
                  "backtracked": false
                },
                "0_0_1_1": {
                  "state": "3 + 3 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                  "thought": null,
                  "value": 0.003,
                  "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                  "children": {},
                  "closing_remark": null,
                  "backtracked": false
                },
                "0_0_1_2": {
                  "state": "3 + 3 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                  "thought": "Answer: (12 / (3 + 3)) * 12 = 24",
                  "value": 60.0,
                  "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
                  "children": {
                    "0_0_1_2_0": {
                      "state": "3 + 3 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (12 / (3 + 3)) * 12 = 24",
                      "thought": null,
                      "value": 60.0,
                      "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
                      "children": {},
                      "closing_remark": null,
                      "backtracked": false
                    }
                  },
                  "closing_remark": null,
                  "backtracked": true,
                  "backtracked_to": "0_0_1"
                }
              },
              "closing_remark": null,
              "backtracked": true,
              "backtracked_to": "0_0"
            }
          },
          "closing_remark": null,
          "backtracked": false
        }
      },
      "closing_remark": null,
      "backtracked": false
    }
  }
}