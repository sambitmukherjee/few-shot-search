{
  "summary": {
    "total_checks": 174,
    "passed": 134,
    "failed": 40
  },
  "checks_by_type": {
    "pseudo_recursive_call": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-31T18:03:35.947700",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-31T18:06:28.456022",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-31T18:08:20.108585",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-31T18:11:42.244981",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_6",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-31T18:17:53.913536",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        }
      ]
    },
    "child_state": {
      "FAIL": 2,
      "details": [
        {
          "check_name": "child_state",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State validation passed: Last thought '2 + 4 = 6 (left: 5 6 7)' found in parent's thoughts",
          "timestamp": "2025-05-31T18:03:35.947787",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '2 + 4 = 6 (left: 5 6 7)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 / 2 = 2 (left: 2 5 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "5 - 2 = 3 (left: 3 4 7)",
              "7 - 4 = 3 (left: 2 3 5)",
              "5 * 2 = 10 (left: 4 7 10)",
              "7 + 2 = 9 (left: 4 5 9)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 * 2 = 14 (left: 4 5 14)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "4 + 2 = 6 (left: 5 6 7)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State validation passed: Last thought '2 * 4 = 8 (left: 5 7 8)' found in parent's thoughts",
          "timestamp": "2025-05-31T18:06:28.456072",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '2 * 4 = 8 (left: 5 7 8)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 / 2 = 2 (left: 2 5 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "5 - 2 = 3 (left: 3 4 7)",
              "7 - 4 = 3 (left: 2 3 5)",
              "5 * 2 = 10 (left: 4 7 10)",
              "7 + 2 = 9 (left: 4 5 9)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 * 2 = 14 (left: 4 5 14)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "4 + 2 = 6 (left: 5 6 7)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "State validation passed: Last thought '4 / 2 = 2 (left: 2 5 7)' found in parent's thoughts",
          "timestamp": "2025-05-31T18:08:20.108636",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '4 / 2 = 2 (left: 2 5 7)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 / 2 = 2 (left: 2 5 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "5 - 2 = 3 (left: 3 4 7)",
              "7 - 4 = 3 (left: 2 3 5)",
              "5 * 2 = 10 (left: 4 7 10)",
              "7 + 2 = 9 (left: 4 5 9)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 * 2 = 14 (left: 4 5 14)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "4 + 2 = 6 (left: 5 6 7)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_3",
          "result": "FAIL",
          "reason": "State validation failed: Last thought '7 - 2 = 5 (left: 2 5 7)' not found in parent's thoughts",
          "timestamp": "2025-05-31T18:11:42.245028",
          "event_type": "validation",
          "details": {
            "validation_errors": [
              "Last thought '7 - 2 = 5 (left: 2 5 7)' not found in parent's thoughts"
            ],
            "parent_thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 / 2 = 2 (left: 2 5 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "5 - 2 = 3 (left: 3 4 7)",
              "7 - 4 = 3 (left: 2 3 5)",
              "5 * 2 = 10 (left: 4 7 10)",
              "7 + 2 = 9 (left: 4 5 9)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 * 2 = 14 (left: 4 5 14)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "4 + 2 = 6 (left: 5 6 7)"
            ],
            "parent_state": null,
            "current_state": [
              "7 - 2 = 5 (left: 2 5 7)"
            ]
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_6",
          "result": "FAIL",
          "reason": "State validation failed: Last thought '7 - 4 = 3 (left: 3 5 7)' not found in parent's thoughts",
          "timestamp": "2025-05-31T18:17:53.913685",
          "event_type": "validation",
          "details": {
            "validation_errors": [
              "Last thought '7 - 4 = 3 (left: 3 5 7)' not found in parent's thoughts"
            ],
            "parent_thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 / 2 = 2 (left: 2 5 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "5 - 2 = 3 (left: 3 4 7)",
              "7 - 4 = 3 (left: 2 3 5)",
              "5 * 2 = 10 (left: 4 7 10)",
              "7 + 2 = 9 (left: 4 5 9)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 * 2 = 14 (left: 4 5 14)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "4 + 2 = 6 (left: 5 6 7)"
            ],
            "parent_state": null,
            "current_state": [
              "7 - 4 = 3 (left: 3 5 7)"
            ]
          }
        }
      ]
    },
    "child_id_assignment": {
      "FAIL": 16,
      "details": [
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "node_id 0_0 matches thought position.",
          "timestamp": "2025-05-31T18:03:35.947855",
          "event_type": "validation",
          "details": {
            "node_id": "0_0",
            "state": "2 + 4 = 6 (left: 5 6 7)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 / 2 = 2 (left: 2 5 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "5 - 2 = 3 (left: 3 4 7)",
              "7 - 4 = 3 (left: 2 3 5)",
              "5 * 2 = 10 (left: 4 7 10)",
              "7 + 2 = 9 (left: 4 5 9)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "5 / 2 = 2.5 (left: 2.5 4 7) ",
              "7 * 2 = 14 (left: 4 5 14)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "4 + 2 = 6 (left: 5 6 7)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_0",
          "result": "PASS",
          "reason": "node_id 0_0_0 matches thought position.",
          "timestamp": "2025-05-31T18:03:55.315501",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_0",
            "state": "5 + 6 = 11 (left: 7 11)",
            "thoughts": [
              "5 + 6 = 11 (left: 7 11)",
              "6 - 5 = 1 (left: 1 7)",
              "7 - 5 = 2 (left: 2 6)",
              "5 * 6 = 30 (left: 7 30)",
              "7 + 5 = 12 (left: 6 12)",
              "7 - 6 = 1 (left: 1 5)",
              "6 * 7 = 42 (left: 5 42)",
              "7 * 5 = 35 (left: 6 35)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "node_id 0_0_1 matches thought position.",
          "timestamp": "2025-05-31T18:04:04.424327",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_1",
            "state": "6 - 5 = 1 (left: 1 7)",
            "thoughts": [
              "5 + 6 = 11 (left: 7 11)",
              "6 - 5 = 1 (left: 1 7)",
              "7 - 5 = 2 (left: 2 6)",
              "5 * 6 = 30 (left: 7 30)",
              "7 + 5 = 12 (left: 6 12)",
              "7 - 6 = 1 (left: 1 5)",
              "6 * 7 = 42 (left: 5 42)",
              "7 * 5 = 35 (left: 6 35)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_2",
          "result": "PASS",
          "reason": "node_id 0_0_2 matches thought position.",
          "timestamp": "2025-05-31T18:04:13.357645",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_2",
            "state": "7 - 5 = 2 (left: 2 6)",
            "thoughts": [
              "5 + 6 = 11 (left: 7 11)",
              "6 - 5 = 1 (left: 1 7)",
              "7 - 5 = 2 (left: 2 6)",
              "5 * 6 = 30 (left: 7 30)",
              "7 + 5 = 12 (left: 6 12)",
              "7 - 6 = 1 (left: 1 5)",
              "6 * 7 = 42 (left: 5 42)",
              "7 * 5 = 35 (left: 6 35)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_3",
          "result": "PASS",
          "reason": "node_id 0_0_3 matches thought position.",
          "timestamp": "2025-05-31T18:04:22.840033",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_3",
            "state": "5 * 6 = 30 (left: 7 30)",
            "thoughts": [
              "5 + 6 = 11 (left: 7 11)",
              "6 - 5 = 1 (left: 1 7)",
              "7 - 5 = 2 (left: 2 6)",
              "5 * 6 = 30 (left: 7 30)",
              "7 + 5 = 12 (left: 6 12)",
              "7 - 6 = 1 (left: 1 5)",
              "6 * 7 = 42 (left: 5 42)",
              "7 * 5 = 35 (left: 6 35)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_4",
          "result": "PASS",
          "reason": "node_id 0_0_4 matches thought position.",
          "timestamp": "2025-05-31T18:04:33.636212",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_4",
            "state": "7 + 5 = 12 (left: 6 12)",
            "thoughts": [
              "5 + 6 = 11 (left: 7 11)",
              "6 - 5 = 1 (left: 1 7)",
              "7 - 5 = 2 (left: 2 6)",
              "5 * 6 = 30 (left: 7 30)",
              "7 + 5 = 12 (left: 6 12)",
              "7 - 6 = 1 (left: 1 5)",
              "6 * 7 = 42 (left: 5 42)",
              "7 * 5 = 35 (left: 6 35)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_5",
          "result": "PASS",
          "reason": "node_id 0_0_5 matches thought position.",
          "timestamp": "2025-05-31T18:05:08.819215",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_5",
            "state": "7 - 6 = 1 (left: 1 5)",
            "thoughts": [
              "5 + 6 = 11 (left: 7 11)",
              "6 - 5 = 1 (left: 1 7)",
              "7 - 5 = 2 (left: 2 6)",
              "5 * 6 = 30 (left: 7 30)",
              "7 + 5 = 12 (left: 6 12)",
              "7 - 6 = 1 (left: 1 5)",
              "6 * 7 = 42 (left: 5 42)",
              "7 * 5 = 35 (left: 6 35)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_6",
          "result": "PASS",
          "reason": "node_id 0_0_6 matches thought position.",
          "timestamp": "2025-05-31T18:05:25.888144",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_6",
            "state": "6 * 7 = 42 (left: 5 42)",
            "thoughts": [
              "5 + 6 = 11 (left: 7 11)",
              "6 - 5 = 1 (left: 1 7)",
              "7 - 5 = 2 (left: 2 6)",
              "5 * 6 = 30 (left: 7 30)",
              "7 + 5 = 12 (left: 6 12)",
              "7 - 6 = 1 (left: 1 5)",
              "6 * 7 = 42 (left: 5 42)",
              "7 * 5 = 35 (left: 6 35)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_7",
          "result": "PASS",
          "reason": "node_id 0_0_7 matches thought position.",
          "timestamp": "2025-05-31T18:06:16.406361",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_7",
            "state": "7 * 5 = 35 (left: 6 35)",
            "thoughts": [
              "5 + 6 = 11 (left: 7 11)",
              "6 - 5 = 1 (left: 1 7)",
              "7 - 5 = 2 (left: 2 6)",
              "5 * 6 = 30 (left: 7 30)",
              "7 + 5 = 12 (left: 6 12)",
              "7 - 6 = 1 (left: 1 5)",
              "6 * 7 = 42 (left: 5 42)",
              "7 * 5 = 35 (left: 6 35)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "node_id 0_1 matches thought position.",
          "timestamp": "2025-05-31T18:06:28.456137",
          "event_type": "validation",
          "details": {
            "node_id": "0_1",
            "state": "2 * 4 = 8 (left: 5 7 8)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 / 2 = 2 (left: 2 5 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "5 - 2 = 3 (left: 3 4 7)",
              "7 - 4 = 3 (left: 2 3 5)",
              "5 * 2 = 10 (left: 4 7 10)",
              "7 + 2 = 9 (left: 4 5 9)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "5 / 2 = 2.5 (left: 2.5 4 7) ",
              "7 * 2 = 14 (left: 4 5 14)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "4 + 2 = 6 (left: 5 6 7)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "node_id 0_1_0 matches thought position.",
          "timestamp": "2025-05-31T18:06:48.843021",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_0",
            "state": "5 + 7 = 12 (left: 8 12)",
            "thoughts": [
              "5 + 7 = 12 (left: 8 12)",
              "7 - 5 = 2 (left: 2 8)",
              "8 - 5 = 3 (left: 3 7)",
              "8 - 7 = 1 (left: 1 5)",
              "7 + 5 = 12 (left: 8 12)",
              "8 / 5 = 1.6 (left: 1.6 7)",
              "7 / 5 = 1.4 (left: 1.4 8)",
              "8 * 5 = 40 (left: 7 40)",
              "7 * 5 = 35 (left: 8 35)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_1",
          "result": "PASS",
          "reason": "node_id 0_1_1 matches thought position.",
          "timestamp": "2025-05-31T18:07:10.520317",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_1",
            "state": "7 - 5 = 2 (left: 2 8)",
            "thoughts": [
              "5 + 7 = 12 (left: 8 12)",
              "7 - 5 = 2 (left: 2 8)",
              "8 - 5 = 3 (left: 3 7)",
              "8 - 7 = 1 (left: 1 5)",
              "7 + 5 = 12 (left: 8 12)",
              "8 / 5 = 1.6 (left: 1.6 7)",
              "7 / 5 = 1.4 (left: 1.4 8)",
              "8 * 5 = 40 (left: 7 40)",
              "7 * 5 = 35 (left: 8 35)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_2",
          "result": "PASS",
          "reason": "node_id 0_1_2 matches thought position.",
          "timestamp": "2025-05-31T18:07:19.752432",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_2",
            "state": "8 - 5 = 3 (left: 3 7)",
            "thoughts": [
              "5 + 7 = 12 (left: 8 12)",
              "7 - 5 = 2 (left: 2 8)",
              "8 - 5 = 3 (left: 3 7)",
              "8 - 7 = 1 (left: 1 5)",
              "7 + 5 = 12 (left: 8 12)",
              "8 / 5 = 1.6 (left: 1.6 7)",
              "7 / 5 = 1.4 (left: 1.4 8)",
              "8 * 5 = 40 (left: 7 40)",
              "7 * 5 = 35 (left: 8 35)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_3",
          "result": "PASS",
          "reason": "node_id 0_1_3 matches thought position.",
          "timestamp": "2025-05-31T18:07:29.410600",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_3",
            "state": "8 - 7 = 1 (left: 1 5)",
            "thoughts": [
              "5 + 7 = 12 (left: 8 12)",
              "7 - 5 = 2 (left: 2 8)",
              "8 - 5 = 3 (left: 3 7)",
              "8 - 7 = 1 (left: 1 5)",
              "7 + 5 = 12 (left: 8 12)",
              "8 / 5 = 1.6 (left: 1.6 7)",
              "7 / 5 = 1.4 (left: 1.4 8)",
              "8 * 5 = 40 (left: 7 40)",
              "7 * 5 = 35 (left: 8 35)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_4",
          "result": "FAIL",
          "reason": "node_id 0_1_4 does not match thought position.",
          "timestamp": "2025-05-31T18:07:39.259261",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_4",
            "state": "7 + 5 = 12 (left: 6 12)",
            "thoughts": [
              "5 + 7 = 12 (left: 8 12)",
              "7 - 5 = 2 (left: 2 8)",
              "8 - 5 = 3 (left: 3 7)",
              "8 - 7 = 1 (left: 1 5)",
              "7 + 5 = 12 (left: 8 12)",
              "8 / 5 = 1.6 (left: 1.6 7)",
              "7 / 5 = 1.4 (left: 1.4 8)",
              "8 * 5 = 40 (left: 7 40)",
              "7 * 5 = 35 (left: 8 35)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_5",
          "result": "FAIL",
          "reason": "node_id 0_1_5 does not match thought position.",
          "timestamp": "2025-05-31T18:07:47.651846",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_5",
            "state": "7 - 6 = 1 (left: 1 5)",
            "thoughts": [
              "5 + 7 = 12 (left: 8 12)",
              "7 - 5 = 2 (left: 2 8)",
              "8 - 5 = 3 (left: 3 7)",
              "8 - 7 = 1 (left: 1 5)",
              "7 + 5 = 12 (left: 8 12)",
              "8 / 5 = 1.6 (left: 1.6 7)",
              "7 / 5 = 1.4 (left: 1.4 8)",
              "8 * 5 = 40 (left: 7 40)",
              "7 * 5 = 35 (left: 8 35)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_6",
          "result": "FAIL",
          "reason": "node_id 0_1_6 does not match thought position.",
          "timestamp": "2025-05-31T18:07:56.793386",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_6",
            "state": "6 * 7 = 42 (left: 5 42)",
            "thoughts": [
              "5 + 7 = 12 (left: 8 12)",
              "7 - 5 = 2 (left: 2 8)",
              "8 - 5 = 3 (left: 3 7)",
              "8 - 7 = 1 (left: 1 5)",
              "7 + 5 = 12 (left: 8 12)",
              "8 / 5 = 1.6 (left: 1.6 7)",
              "7 / 5 = 1.4 (left: 1.4 8)",
              "8 * 5 = 40 (left: 7 40)",
              "7 * 5 = 35 (left: 8 35)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_7",
          "result": "FAIL",
          "reason": "node_id 0_1_7 does not match thought position.",
          "timestamp": "2025-05-31T18:08:06.678648",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_7",
            "state": "7 * 5 = 35 (left: 6 35)",
            "thoughts": [
              "5 + 7 = 12 (left: 8 12)",
              "7 - 5 = 2 (left: 2 8)",
              "8 - 5 = 3 (left: 3 7)",
              "8 - 7 = 1 (left: 1 5)",
              "7 + 5 = 12 (left: 8 12)",
              "8 / 5 = 1.6 (left: 1.6 7)",
              "7 / 5 = 1.4 (left: 1.4 8)",
              "8 * 5 = 40 (left: 7 40)",
              "7 * 5 = 35 (left: 8 35)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "node_id 0_2 matches thought position.",
          "timestamp": "2025-05-31T18:08:20.108696",
          "event_type": "validation",
          "details": {
            "node_id": "0_2",
            "state": "4 / 2 = 2 (left: 2 5 7)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 / 2 = 2 (left: 2 5 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "5 - 2 = 3 (left: 3 4 7)",
              "7 - 4 = 3 (left: 2 3 5)",
              "5 * 2 = 10 (left: 4 7 10)",
              "7 + 2 = 9 (left: 4 5 9)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "5 / 2 = 2.5 (left: 2.5 4 7) ",
              "7 * 2 = 14 (left: 4 5 14)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "4 + 2 = 6 (left: 5 6 7)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_0",
          "result": "PASS",
          "reason": "node_id 0_2_0 matches thought position.",
          "timestamp": "2025-05-31T18:08:40.362076",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_0",
            "state": "2 + 5 = 7 (left: 7 7)",
            "thoughts": [
              "2 + 5 = 7 (left: 7 7)",
              "5 - 2 = 3 (left: 3 7)",
              "7 - 2 = 5 (left: 5 5)",
              "7 - 5 = 2 (left: 2 2)",
              "2 * 5 = 10 (left: 7 10)",
              "7 / 2 = 3.5 (left: 3.5 5)",
              "5 / 2 = 2.5 (left: 2.5 7)",
              "7 / 5 = 1.4 (left: 1.4 2)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_1",
          "result": "PASS",
          "reason": "node_id 0_2_1 matches thought position.",
          "timestamp": "2025-05-31T18:10:28.386291",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_1",
            "state": "5 - 2 = 3 (left: 3 7)",
            "thoughts": [
              "2 + 5 = 7 (left: 7 7)",
              "5 - 2 = 3 (left: 3 7)",
              "7 - 2 = 5 (left: 5 5)",
              "7 - 5 = 2 (left: 2 2)",
              "2 * 5 = 10 (left: 7 10)",
              "7 / 2 = 3.5 (left: 3.5 5)",
              "5 / 2 = 2.5 (left: 2.5 7)",
              "7 / 5 = 1.4 (left: 1.4 2)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_2",
          "result": "PASS",
          "reason": "node_id 0_2_2 matches thought position.",
          "timestamp": "2025-05-31T18:10:37.205055",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_2",
            "state": "7 - 2 = 5 (left: 5 5)",
            "thoughts": [
              "2 + 5 = 7 (left: 7 7)",
              "5 - 2 = 3 (left: 3 7)",
              "7 - 2 = 5 (left: 5 5)",
              "7 - 5 = 2 (left: 2 2)",
              "2 * 5 = 10 (left: 7 10)",
              "7 / 2 = 3.5 (left: 3.5 5)",
              "5 / 2 = 2.5 (left: 2.5 7)",
              "7 / 5 = 1.4 (left: 1.4 2)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_3",
          "result": "PASS",
          "reason": "node_id 0_2_3 matches thought position.",
          "timestamp": "2025-05-31T18:10:45.577589",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_3",
            "state": "7 - 5 = 2 (left: 2 2)",
            "thoughts": [
              "2 + 5 = 7 (left: 7 7)",
              "5 - 2 = 3 (left: 3 7)",
              "7 - 2 = 5 (left: 5 5)",
              "7 - 5 = 2 (left: 2 2)",
              "2 * 5 = 10 (left: 7 10)",
              "7 / 2 = 3.5 (left: 3.5 5)",
              "5 / 2 = 2.5 (left: 2.5 7)",
              "7 / 5 = 1.4 (left: 1.4 2)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_4",
          "result": "PASS",
          "reason": "node_id 0_2_4 matches thought position.",
          "timestamp": "2025-05-31T18:10:55.408779",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_4",
            "state": "2 * 5 = 10 (left: 7 10)",
            "thoughts": [
              "2 + 5 = 7 (left: 7 7)",
              "5 - 2 = 3 (left: 3 7)",
              "7 - 2 = 5 (left: 5 5)",
              "7 - 5 = 2 (left: 2 2)",
              "2 * 5 = 10 (left: 7 10)",
              "7 / 2 = 3.5 (left: 3.5 5)",
              "5 / 2 = 2.5 (left: 2.5 7)",
              "7 / 5 = 1.4 (left: 1.4 2)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_5",
          "result": "PASS",
          "reason": "node_id 0_2_5 matches thought position.",
          "timestamp": "2025-05-31T18:11:05.611161",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_5",
            "state": "7 / 2 = 3.5 (left: 3.5 5)",
            "thoughts": [
              "2 + 5 = 7 (left: 7 7)",
              "5 - 2 = 3 (left: 3 7)",
              "7 - 2 = 5 (left: 5 5)",
              "7 - 5 = 2 (left: 2 2)",
              "2 * 5 = 10 (left: 7 10)",
              "7 / 2 = 3.5 (left: 3.5 5)",
              "5 / 2 = 2.5 (left: 2.5 7)",
              "7 / 5 = 1.4 (left: 1.4 2)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_6",
          "result": "PASS",
          "reason": "node_id 0_2_6 matches thought position.",
          "timestamp": "2025-05-31T18:11:17.198650",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_6",
            "state": "5 / 2 = 2.5 (left: 2.5 7)",
            "thoughts": [
              "2 + 5 = 7 (left: 7 7)",
              "5 - 2 = 3 (left: 3 7)",
              "7 - 2 = 5 (left: 5 5)",
              "7 - 5 = 2 (left: 2 2)",
              "2 * 5 = 10 (left: 7 10)",
              "7 / 2 = 3.5 (left: 3.5 5)",
              "5 / 2 = 2.5 (left: 2.5 7)",
              "7 / 5 = 1.4 (left: 1.4 2)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_7",
          "result": "PASS",
          "reason": "node_id 0_2_7 matches thought position.",
          "timestamp": "2025-05-31T18:11:28.125835",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_7",
            "state": "7 / 5 = 1.4 (left: 1.4 2)",
            "thoughts": [
              "2 + 5 = 7 (left: 7 7)",
              "5 - 2 = 3 (left: 3 7)",
              "7 - 2 = 5 (left: 5 5)",
              "7 - 5 = 2 (left: 2 2)",
              "2 * 5 = 10 (left: 7 10)",
              "7 / 2 = 3.5 (left: 3.5 5)",
              "5 / 2 = 2.5 (left: 2.5 7)",
              "7 / 5 = 1.4 (left: 1.4 2)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3",
          "result": "FAIL",
          "reason": "node_id 0_3 does not match thought position.",
          "timestamp": "2025-05-31T18:11:42.245082",
          "event_type": "validation",
          "details": {
            "node_id": "0_3",
            "state": "7 - 2 = 5 (left: 2 5 7)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 / 2 = 2 (left: 2 5 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "5 - 2 = 3 (left: 3 4 7)",
              "7 - 4 = 3 (left: 2 3 5)",
              "5 * 2 = 10 (left: 4 7 10)",
              "7 + 2 = 9 (left: 4 5 9)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "5 / 2 = 2.5 (left: 2.5 4 7) ",
              "7 * 2 = 14 (left: 4 5 14)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "4 + 2 = 6 (left: 5 6 7)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_0",
          "result": "PASS",
          "reason": "node_id 0_3_0 matches thought position.",
          "timestamp": "2025-05-31T18:12:52.048029",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_0",
            "state": "2 + 5 = 7 (left: 7 7)",
            "thoughts": [
              "2 + 5 = 7 (left: 7 7)",
              "5 + 2 = 7 (left: 7 7)",
              "7 - 2 = 5 (left: 5 5)",
              "7 - 5 = 2 (left: 2 2)",
              "7 / 2 = 3.5 (left: 3.5 5)",
              "2 * 5 = 10 (left: 7 10)",
              "5 * 2 = 10 (left: 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_1",
          "result": "PASS",
          "reason": "node_id 0_3_1 matches thought position.",
          "timestamp": "2025-05-31T18:13:00.912450",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_1",
            "state": "5 + 2 = 7 (left: 7 7)",
            "thoughts": [
              "2 + 5 = 7 (left: 7 7)",
              "5 + 2 = 7 (left: 7 7)",
              "7 - 2 = 5 (left: 5 5)",
              "7 - 5 = 2 (left: 2 2)",
              "7 / 2 = 3.5 (left: 3.5 5)",
              "2 * 5 = 10 (left: 7 10)",
              "5 * 2 = 10 (left: 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_2",
          "result": "FAIL",
          "reason": "node_id 0_3_2 does not match thought position.",
          "timestamp": "2025-05-31T18:13:10.912720",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_2",
            "state": "7 - 5 = 2 (left: 2 2)",
            "thoughts": [
              "2 + 5 = 7 (left: 7 7)",
              "5 + 2 = 7 (left: 7 7)",
              "7 - 2 = 5 (left: 5 5)",
              "7 - 5 = 2 (left: 2 2)",
              "7 / 2 = 3.5 (left: 3.5 5)",
              "2 * 5 = 10 (left: 7 10)",
              "5 * 2 = 10 (left: 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_3",
          "result": "PASS",
          "reason": "node_id 0_3_3 matches thought position.",
          "timestamp": "2025-05-31T18:15:31.951723",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_3",
            "state": "7 - 5 = 2 (left: 2 2)",
            "thoughts": [
              "2 + 5 = 7 (left: 7 7)",
              "5 + 2 = 7 (left: 7 7)",
              "7 - 2 = 5 (left: 5 5)",
              "7 - 5 = 2 (left: 2 2)",
              "7 / 2 = 3.5 (left: 3.5 5)",
              "2 * 5 = 10 (left: 7 10)",
              "5 * 2 = 10 (left: 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_4",
          "result": "PASS",
          "reason": "node_id 0_3_4 matches thought position.",
          "timestamp": "2025-05-31T18:15:45.818254",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_4",
            "state": "7 / 2 = 3.5 (left: 3.5 5)",
            "thoughts": [
              "2 + 5 = 7 (left: 7 7)",
              "5 + 2 = 7 (left: 7 7)",
              "7 - 2 = 5 (left: 5 5)",
              "7 - 5 = 2 (left: 2 2)",
              "7 / 2 = 3.5 (left: 3.5 5)",
              "2 * 5 = 10 (left: 7 10)",
              "5 * 2 = 10 (left: 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_5",
          "result": "PASS",
          "reason": "node_id 0_3_5 matches thought position.",
          "timestamp": "2025-05-31T18:15:54.862235",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_5",
            "state": "2 * 5 = 10 (left: 7 10)",
            "thoughts": [
              "2 + 5 = 7 (left: 7 7)",
              "5 + 2 = 7 (left: 7 7)",
              "7 - 2 = 5 (left: 5 5)",
              "7 - 5 = 2 (left: 2 2)",
              "7 / 2 = 3.5 (left: 3.5 5)",
              "2 * 5 = 10 (left: 7 10)",
              "5 * 2 = 10 (left: 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_6",
          "result": "FAIL",
          "reason": "node_id 0_3_6 does not match thought position.",
          "timestamp": "2025-05-31T18:17:14.380104",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_6",
            "state": "7 * 5 = 35 (left: 6 35)",
            "thoughts": [
              "2 + 5 = 7 (left: 7 7)",
              "5 + 2 = 7 (left: 7 7)",
              "7 - 2 = 5 (left: 5 5)",
              "7 - 5 = 2 (left: 2 2)",
              "7 / 2 = 3.5 (left: 3.5 5)",
              "2 * 5 = 10 (left: 7 10)",
              "5 * 2 = 10 (left: 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4",
          "result": "FAIL",
          "reason": "node_id 0_4 does not match thought position.",
          "timestamp": "2025-05-31T18:17:35.130245",
          "event_type": "validation",
          "details": {
            "node_id": "0_4",
            "state": "5 - 2 = 3 (left: 2 3 7)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 / 2 = 2 (left: 2 5 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "5 - 2 = 3 (left: 3 4 7)",
              "7 - 4 = 3 (left: 2 3 5)",
              "5 * 2 = 10 (left: 4 7 10)",
              "7 + 2 = 9 (left: 4 5 9)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "5 / 2 = 2.5 (left: 2.5 4 7) ",
              "7 * 2 = 14 (left: 4 5 14)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "4 + 2 = 6 (left: 5 6 7)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5",
          "result": "FAIL",
          "reason": "node_id 0_5 does not match thought position.",
          "timestamp": "2025-05-31T18:17:44.857000",
          "event_type": "validation",
          "details": {
            "node_id": "0_5",
            "state": "7 - 2 = 5 (left: 2 5 7)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 / 2 = 2 (left: 2 5 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "5 - 2 = 3 (left: 3 4 7)",
              "7 - 4 = 3 (left: 2 3 5)",
              "5 * 2 = 10 (left: 4 7 10)",
              "7 + 2 = 9 (left: 4 5 9)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "5 / 2 = 2.5 (left: 2.5 4 7) ",
              "7 * 2 = 14 (left: 4 5 14)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "4 + 2 = 6 (left: 5 6 7)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_6",
          "result": "FAIL",
          "reason": "node_id 0_6 does not match thought position.",
          "timestamp": "2025-05-31T18:17:53.913735",
          "event_type": "validation",
          "details": {
            "node_id": "0_6",
            "state": "7 - 4 = 3 (left: 3 5 7)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 / 2 = 2 (left: 2 5 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "5 - 2 = 3 (left: 3 4 7)",
              "7 - 4 = 3 (left: 2 3 5)",
              "5 * 2 = 10 (left: 4 7 10)",
              "7 + 2 = 9 (left: 4 5 9)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "5 / 2 = 2.5 (left: 2.5 4 7) ",
              "7 * 2 = 14 (left: 4 5 14)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "4 + 2 = 6 (left: 5 6 7)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_6_0",
          "result": "PASS",
          "reason": "node_id 0_6_0 matches thought position.",
          "timestamp": "2025-05-31T18:18:16.347548",
          "event_type": "validation",
          "details": {
            "node_id": "0_6_0",
            "state": "3 + 5 = 8 (left: 7 8)",
            "thoughts": [
              "3 + 5 = 8 (left: 7 8)",
              "5 - 3 = 2 (left: 2 7)",
              "7 - 3 = 4 (left: 4 5)",
              "7 - 5 = 2 (left: 2 3)",
              "3 * 5 = 15 (left: 7 15)",
              "5 * 7 = 35 (left: 3 35)",
              "7 / 3 = 2.33 (left: 2.33 5)",
              "5 / 3 = 1.67 (left: 1.67 7)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_6_1",
          "result": "PASS",
          "reason": "node_id 0_6_1 matches thought position.",
          "timestamp": "2025-05-31T18:18:25.179672",
          "event_type": "validation",
          "details": {
            "node_id": "0_6_1",
            "state": "5 - 3 = 2 (left: 2 7)",
            "thoughts": [
              "3 + 5 = 8 (left: 7 8)",
              "5 - 3 = 2 (left: 2 7)",
              "7 - 3 = 4 (left: 4 5)",
              "7 - 5 = 2 (left: 2 3)",
              "3 * 5 = 15 (left: 7 15)",
              "5 * 7 = 35 (left: 3 35)",
              "7 / 3 = 2.33 (left: 2.33 5)",
              "5 / 3 = 1.67 (left: 1.67 7)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_6_2",
          "result": "PASS",
          "reason": "node_id 0_6_2 matches thought position.",
          "timestamp": "2025-05-31T18:19:20.507760",
          "event_type": "validation",
          "details": {
            "node_id": "0_6_2",
            "state": "7 - 3 = 4 (left: 4 5)",
            "thoughts": [
              "3 + 5 = 8 (left: 7 8)",
              "5 - 3 = 2 (left: 2 7)",
              "7 - 3 = 4 (left: 4 5)",
              "7 - 5 = 2 (left: 2 3)",
              "3 * 5 = 15 (left: 7 15)",
              "5 * 7 = 35 (left: 3 35)",
              "7 / 3 = 2.33 (left: 2.33 5)",
              "5 / 3 = 1.67 (left: 1.67 7)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_6_3",
          "result": "PASS",
          "reason": "node_id 0_6_3 matches thought position.",
          "timestamp": "2025-05-31T18:19:30.364853",
          "event_type": "validation",
          "details": {
            "node_id": "0_6_3",
            "state": "7 - 5 = 2 (left: 2 3)",
            "thoughts": [
              "3 + 5 = 8 (left: 7 8)",
              "5 - 3 = 2 (left: 2 7)",
              "7 - 3 = 4 (left: 4 5)",
              "7 - 5 = 2 (left: 2 3)",
              "3 * 5 = 15 (left: 7 15)",
              "5 * 7 = 35 (left: 3 35)",
              "7 / 3 = 2.33 (left: 2.33 5)",
              "5 / 3 = 1.67 (left: 1.67 7)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_6_4",
          "result": "PASS",
          "reason": "node_id 0_6_4 matches thought position.",
          "timestamp": "2025-05-31T18:20:17.303612",
          "event_type": "validation",
          "details": {
            "node_id": "0_6_4",
            "state": "3 * 5 = 15 (left: 7 15)",
            "thoughts": [
              "3 + 5 = 8 (left: 7 8)",
              "5 - 3 = 2 (left: 2 7)",
              "7 - 3 = 4 (left: 4 5)",
              "7 - 5 = 2 (left: 2 3)",
              "3 * 5 = 15 (left: 7 15)",
              "5 * 7 = 35 (left: 3 35)",
              "7 / 3 = 2.33 (left: 2.33 5)",
              "5 / 3 = 1.67 (left: 1.67 7)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_6_5",
          "result": "FAIL",
          "reason": "node_id 0_6_5 does not match thought position.",
          "timestamp": "2025-05-31T18:20:27.036043",
          "event_type": "validation",
          "details": {
            "node_id": "0_6_5",
            "state": "5 * 7 = 35 (left: 6 35)",
            "thoughts": [
              "3 + 5 = 8 (left: 7 8)",
              "5 - 3 = 2 (left: 2 7)",
              "7 - 3 = 4 (left: 4 5)",
              "7 - 5 = 2 (left: 2 3)",
              "3 * 5 = 15 (left: 7 15)",
              "5 * 7 = 35 (left: 3 35)",
              "7 / 3 = 2.33 (left: 2.33 5)",
              "5 / 3 = 1.67 (left: 1.67 7)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_7",
          "result": "FAIL",
          "reason": "node_id 0_7 does not match thought position.",
          "timestamp": "2025-05-31T18:20:41.740242",
          "event_type": "validation",
          "details": {
            "node_id": "0_7",
            "state": "5 * 2 = 10 (left: 2 7 10)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 / 2 = 2 (left: 2 5 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "5 - 2 = 3 (left: 3 4 7)",
              "7 - 4 = 3 (left: 2 3 5)",
              "5 * 2 = 10 (left: 4 7 10)",
              "7 + 2 = 9 (left: 4 5 9)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "5 / 2 = 2.5 (left: 2.5 4 7) ",
              "7 * 2 = 14 (left: 4 5 14)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "4 + 2 = 6 (left: 5 6 7)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_8",
          "result": "FAIL",
          "reason": "node_id 0_8 does not match thought position.",
          "timestamp": "2025-05-31T18:20:51.213020",
          "event_type": "validation",
          "details": {
            "node_id": "0_8",
            "state": "7 * 2 = 14 (left: 2 7 14)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 / 2 = 2 (left: 2 5 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "5 - 2 = 3 (left: 3 4 7)",
              "7 - 4 = 3 (left: 2 3 5)",
              "5 * 2 = 10 (left: 4 7 10)",
              "7 + 2 = 9 (left: 4 5 9)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "5 / 2 = 2.5 (left: 2.5 4 7) ",
              "7 * 2 = 14 (left: 4 5 14)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "4 + 2 = 6 (left: 5 6 7)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_9",
          "result": "FAIL",
          "reason": "node_id 0_9 does not match thought position.",
          "timestamp": "2025-05-31T18:21:03.455005",
          "event_type": "validation",
          "details": {
            "node_id": "0_9",
            "state": "2 + 7 = 9 (left: 5 9)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 / 2 = 2 (left: 2 5 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "5 - 2 = 3 (left: 3 4 7)",
              "7 - 4 = 3 (left: 2 3 5)",
              "5 * 2 = 10 (left: 4 7 10)",
              "7 + 2 = 9 (left: 4 5 9)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "5 / 2 = 2.5 (left: 2.5 4 7) ",
              "7 * 2 = 14 (left: 4 5 14)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "4 + 2 = 6 (left: 5 6 7)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_10",
          "result": "FAIL",
          "reason": "node_id 0_10 does not match thought position.",
          "timestamp": "2025-05-31T18:21:16.184853",
          "event_type": "validation",
          "details": {
            "node_id": "0_10",
            "state": "7 + 5 = 12 (left: 7 12)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 / 2 = 2 (left: 2 5 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "5 - 2 = 3 (left: 3 4 7)",
              "7 - 4 = 3 (left: 2 3 5)",
              "5 * 2 = 10 (left: 4 7 10)",
              "7 + 2 = 9 (left: 4 5 9)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "5 / 2 = 2.5 (left: 2.5 4 7) ",
              "7 * 2 = 14 (left: 4 5 14)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "4 + 2 = 6 (left: 5 6 7)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_11",
          "result": "FAIL",
          "reason": "node_id 0_11 does not match thought position.",
          "timestamp": "2025-05-31T18:21:25.156815",
          "event_type": "validation",
          "details": {
            "node_id": "0_11",
            "state": "5 + 2 = 7 (left: 2 7)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 / 2 = 2 (left: 2 5 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "5 - 2 = 3 (left: 3 4 7)",
              "7 - 4 = 3 (left: 2 3 5)",
              "5 * 2 = 10 (left: 4 7 10)",
              "7 + 2 = 9 (left: 4 5 9)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "5 / 2 = 2.5 (left: 2.5 4 7) ",
              "7 * 2 = 14 (left: 4 5 14)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "4 + 2 = 6 (left: 5 6 7)"
            ]
          }
        }
      ]
    },
    "node_state": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "node_state",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-31T18:03:43.135908",
          "event_type": "validation",
          "details": {
            "expected_state": "2 + 4 = 6 (left: 5 6 7)",
            "actual_state": "2 + 4 = 6 (left: 5 6 7)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-31T18:06:37.548980",
          "event_type": "validation",
          "details": {
            "expected_state": "2 * 4 = 8 (left: 5 7 8)",
            "actual_state": "2 * 4 = 8 (left: 5 7 8)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-31T18:08:28.050406",
          "event_type": "validation",
          "details": {
            "expected_state": "4 / 2 = 2 (left: 2 5 7)",
            "actual_state": "4 / 2 = 2 (left: 2 5 7)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-31T18:11:49.046720",
          "event_type": "validation",
          "details": {
            "expected_state": "7 - 2 = 5 (left: 2 5 7)",
            "actual_state": "7 - 2 = 5 (left: 2 5 7)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_6",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-31T18:18:04.281590",
          "event_type": "validation",
          "details": {
            "expected_state": "7 - 4 = 3 (left: 3 5 7)",
            "actual_state": "7 - 4 = 3 (left: 3 5 7)"
          }
        }
      ]
    },
    "pruning": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pruning",
          "node_id": "0_0_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:03:55.315428",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:04:04.424262",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:04:13.357569",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:04:22.839959",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_4",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-31T18:04:33.636142",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:05:08.819141",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:05:25.888078",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_7",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:06:16.406278",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:06:48.842955",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:07:10.520236",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:07:19.752344",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:07:29.410530",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:07:39.259184",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:07:47.651779",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:07:56.793301",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_7",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:08:06.678585",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:08:40.362009",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:10:28.386220",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:10:37.204973",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:10:45.577527",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:10:55.408717",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:11:05.611099",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:11:17.198582",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_7",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:11:28.125771",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:12:52.047963",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:13:00.912391",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:13:10.912651",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:15:31.951640",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:15:45.818182",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:15:54.862161",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:17:14.380035",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "Value 2.001 meets threshold 3.0",
          "timestamp": "2025-05-31T18:17:35.130203",
          "event_type": "validation",
          "details": {
            "value": 2.001,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "Value 2.001 meets threshold 3.0",
          "timestamp": "2025-05-31T18:17:44.856936",
          "event_type": "validation",
          "details": {
            "value": 2.001,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_6_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:18:16.347478",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_6_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:18:25.179605",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_6_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:19:20.507682",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_6_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:19:30.364770",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_6_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:20:17.303521",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_6_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:20:27.035962",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_7",
          "result": "PASS",
          "reason": "Value 2.001 meets threshold 3.0",
          "timestamp": "2025-05-31T18:20:41.740201",
          "event_type": "validation",
          "details": {
            "value": 2.001,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_8",
          "result": "PASS",
          "reason": "Value 2.001 meets threshold 3.0",
          "timestamp": "2025-05-31T18:20:51.212940",
          "event_type": "validation",
          "details": {
            "value": 2.001,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_9",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:21:03.454925",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_10",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:21:16.184774",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_11",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T18:21:25.156737",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        }
      ]
    },
    "backtracking_I": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_I",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_0; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-31T18:06:19.204875",
          "event_type": "validation",
          "details": {
            "popped_node": "0_0",
            "expected_popped": "0_0",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_0",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_1; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-31T18:08:10.145802",
          "event_type": "validation",
          "details": {
            "popped_node": "0_1",
            "expected_popped": "0_1",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_1",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_2; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-31T18:11:31.912003",
          "event_type": "validation",
          "details": {
            "popped_node": "0_2",
            "expected_popped": "0_2",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_2",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_3; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-31T18:17:17.378387",
          "event_type": "validation",
          "details": {
            "popped_node": "0_3",
            "expected_popped": "0_3",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_3",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_6",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_6; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-31T18:20:31.562872",
          "event_type": "validation",
          "details": {
            "popped_node": "0_6",
            "expected_popped": "0_6",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_6",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
          "timestamp": "2025-05-31T18:21:28.378799",
          "event_type": "validation",
          "details": {
            "popped_node": "0",
            "expected_popped": "0",
            "backtrack_to": "None",
            "expected_parent": "None",
            "validation_details": [
              "Correctly popped expected node 0",
              "Correctly backtracking to parent 'None'"
            ]
          }
        }
      ]
    },
    "backtracking_III": {
      "FAIL": 3,
      "details": [
        {
          "check_name": "backtracking_III",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "All 8 children explored - valid backtrack",
          "timestamp": "2025-05-31T18:06:19.204899",
          "event_type": "validation",
          "details": {
            "total_thoughts": 8,
            "evaluated_children": 8
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_1",
          "result": "FAIL",
          "reason": "Only 8 of 9 children explored",
          "timestamp": "2025-05-31T18:08:10.145835",
          "event_type": "validation",
          "details": {
            "total_thoughts": 9,
            "evaluated_children": 8
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "All 8 children explored - valid backtrack",
          "timestamp": "2025-05-31T18:11:31.912025",
          "event_type": "validation",
          "details": {
            "total_thoughts": 8,
            "evaluated_children": 8
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "All 7 children explored - valid backtrack",
          "timestamp": "2025-05-31T18:17:17.378416",
          "event_type": "validation",
          "details": {
            "total_thoughts": 7,
            "evaluated_children": 7
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_6",
          "result": "FAIL",
          "reason": "Only 6 of 8 children explored",
          "timestamp": "2025-05-31T18:20:31.562897",
          "event_type": "validation",
          "details": {
            "total_thoughts": 8,
            "evaluated_children": 6
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0",
          "result": "FAIL",
          "reason": "Only 12 of 14 children explored",
          "timestamp": "2025-05-31T18:21:28.378832",
          "event_type": "validation",
          "details": {
            "total_thoughts": 14,
            "evaluated_children": 12
          }
        }
      ]
    },
    "backtracking_IV": {
      "FAIL": 3,
      "details": [
        {
          "check_name": "backtracking_IV",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_1 follows 0_0",
          "timestamp": "2025-05-31T18:06:28.456101",
          "event_type": "validation",
          "details": {
            "popped_node": "0_0",
            "current_node": "0_1",
            "expected_index": 1,
            "actual_index": 1
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_2 follows 0_1",
          "timestamp": "2025-05-31T18:08:20.108664",
          "event_type": "validation",
          "details": {
            "popped_node": "0_1",
            "current_node": "0_2",
            "expected_index": 2,
            "actual_index": 2
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_3",
          "result": "FAIL",
          "reason": "State not present within the thoughts: for 0_3 got '7 - 2 = 5 (left: 2 5 7)'",
          "timestamp": "2025-05-31T18:11:42.245046",
          "event_type": "validation",
          "details": {
            "node_id": "0_3",
            "state": "7 - 2 = 5 (left: 2 5 7)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 / 2 = 2 (left: 2 5 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "5 - 2 = 3 (left: 3 4 7)",
              "7 - 4 = 3 (left: 2 3 5)",
              "5 * 2 = 10 (left: 4 7 10)",
              "7 + 2 = 9 (left: 4 5 9)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 * 2 = 14 (left: 4 5 14)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "4 + 2 = 6 (left: 5 6 7)"
            ]
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_4",
          "result": "FAIL",
          "reason": "State not present within the thoughts: for 0_4 got '5 - 2 = 3 (left: 2 3 7)'",
          "timestamp": "2025-05-31T18:17:35.130153",
          "event_type": "validation",
          "details": {
            "node_id": "0_4",
            "state": "5 - 2 = 3 (left: 2 3 7)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 / 2 = 2 (left: 2 5 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "5 - 2 = 3 (left: 3 4 7)",
              "7 - 4 = 3 (left: 2 3 5)",
              "5 * 2 = 10 (left: 4 7 10)",
              "7 + 2 = 9 (left: 4 5 9)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 * 2 = 14 (left: 4 5 14)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "4 + 2 = 6 (left: 5 6 7)"
            ]
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_7",
          "result": "FAIL",
          "reason": "State not present within the thoughts: for 0_7 got '5 * 2 = 10 (left: 2 7 10)'",
          "timestamp": "2025-05-31T18:20:41.740152",
          "event_type": "validation",
          "details": {
            "node_id": "0_7",
            "state": "5 * 2 = 10 (left: 2 7 10)",
            "thoughts": [
              "2 + 4 = 6 (left: 5 6 7)",
              "2 * 4 = 8 (left: 5 7 8)",
              "4 / 2 = 2 (left: 2 5 7)",
              "7 - 2 = 5 (left: 4 5 5)",
              "5 - 2 = 3 (left: 3 4 7)",
              "7 - 4 = 3 (left: 2 3 5)",
              "5 * 2 = 10 (left: 4 7 10)",
              "7 + 2 = 9 (left: 4 5 9)",
              "7 / 2 = 3.5 (left: 3.5 4 5)",
              "5 / 2 = 2.5 (left: 2.5 4 7)",
              "7 * 2 = 14 (left: 4 5 14)",
              "4 - 2 = 2 (left: 2 5 7)",
              "5 + 2 = 7 (left: 4 7 7)",
              "4 + 2 = 6 (left: 5 6 7)"
            ]
          }
        }
      ]
    },
    "looping_order": {
      "FAIL": 16,
      "details": [
        {
          "check_name": "looping_order",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.982761",
          "event_type": "validation",
          "details": {
            "state": "2 + 4 = 6 (left: 5 6 7)",
            "thought": "2 + 4 = 6 (left: 5 6 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.982783",
          "event_type": "validation",
          "details": {
            "state": "2 * 4 = 8 (left: 5 7 8)",
            "thought": "2 * 4 = 8 (left: 5 7 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.982789",
          "event_type": "validation",
          "details": {
            "state": "4 / 2 = 2 (left: 2 5 7)",
            "thought": "4 / 2 = 2 (left: 2 5 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T18:21:29.982798",
          "event_type": "validation",
          "details": {
            "state": "7 - 2 = 5 (left: 2 5 7)",
            "expected_thought": "7 - 2 = 5 (left: 4 5 5)",
            "child_index": 3
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T18:21:29.982808",
          "event_type": "validation",
          "details": {
            "state": "5 - 2 = 3 (left: 2 3 7)",
            "expected_thought": "5 - 2 = 3 (left: 3 4 7)",
            "child_index": 4
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T18:21:29.982813",
          "event_type": "validation",
          "details": {
            "state": "7 - 2 = 5 (left: 2 5 7)",
            "expected_thought": "7 - 4 = 3 (left: 2 3 5)",
            "child_index": 5
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_6",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T18:21:29.982818",
          "event_type": "validation",
          "details": {
            "state": "7 - 4 = 3 (left: 3 5 7)",
            "expected_thought": "5 * 2 = 10 (left: 4 7 10)",
            "child_index": 6
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_7",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T18:21:29.982823",
          "event_type": "validation",
          "details": {
            "state": "5 * 2 = 10 (left: 2 7 10)",
            "expected_thought": "7 + 2 = 9 (left: 4 5 9)",
            "child_index": 7
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_8",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T18:21:29.982828",
          "event_type": "validation",
          "details": {
            "state": "7 * 2 = 14 (left: 2 7 14)",
            "expected_thought": "7 / 2 = 3.5 (left: 3.5 4 5)",
            "child_index": 8
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_9",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T18:21:29.982833",
          "event_type": "validation",
          "details": {
            "state": "2 + 7 = 9 (left: 5 9)",
            "expected_thought": "5 / 2 = 2.5 (left: 2.5 4 7)",
            "child_index": 9
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_10",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T18:21:29.982838",
          "event_type": "validation",
          "details": {
            "state": "7 + 5 = 12 (left: 7 12)",
            "expected_thought": "7 * 2 = 14 (left: 4 5 14)",
            "child_index": 10
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_11",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T18:21:29.982843",
          "event_type": "validation",
          "details": {
            "state": "5 + 2 = 7 (left: 2 7)",
            "expected_thought": "4 - 2 = 2 (left: 2 5 7)",
            "child_index": 11
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.982873",
          "event_type": "validation",
          "details": {
            "state": "5 + 6 = 11 (left: 7 11)",
            "thought": "5 + 6 = 11 (left: 7 11)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.982879",
          "event_type": "validation",
          "details": {
            "state": "6 - 5 = 1 (left: 1 7)",
            "thought": "6 - 5 = 1 (left: 1 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.982884",
          "event_type": "validation",
          "details": {
            "state": "7 - 5 = 2 (left: 2 6)",
            "thought": "7 - 5 = 2 (left: 2 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.982889",
          "event_type": "validation",
          "details": {
            "state": "5 * 6 = 30 (left: 7 30)",
            "thought": "5 * 6 = 30 (left: 7 30)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.982895",
          "event_type": "validation",
          "details": {
            "state": "7 + 5 = 12 (left: 6 12)",
            "thought": "7 + 5 = 12 (left: 6 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.982900",
          "event_type": "validation",
          "details": {
            "state": "7 - 6 = 1 (left: 1 5)",
            "thought": "7 - 6 = 1 (left: 1 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.982905",
          "event_type": "validation",
          "details": {
            "state": "6 * 7 = 42 (left: 5 42)",
            "thought": "6 * 7 = 42 (left: 5 42)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_7",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.982910",
          "event_type": "validation",
          "details": {
            "state": "7 * 5 = 35 (left: 6 35)",
            "thought": "7 * 5 = 35 (left: 6 35)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.982959",
          "event_type": "validation",
          "details": {
            "state": "5 + 7 = 12 (left: 8 12)",
            "thought": "5 + 7 = 12 (left: 8 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.982965",
          "event_type": "validation",
          "details": {
            "state": "7 - 5 = 2 (left: 2 8)",
            "thought": "7 - 5 = 2 (left: 2 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.982970",
          "event_type": "validation",
          "details": {
            "state": "8 - 5 = 3 (left: 3 7)",
            "thought": "8 - 5 = 3 (left: 3 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.982975",
          "event_type": "validation",
          "details": {
            "state": "8 - 7 = 1 (left: 1 5)",
            "thought": "8 - 7 = 1 (left: 1 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_4",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T18:21:29.982982",
          "event_type": "validation",
          "details": {
            "state": "7 + 5 = 12 (left: 6 12)",
            "expected_thought": "7 + 5 = 12 (left: 8 12)",
            "child_index": 4
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_5",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T18:21:29.982988",
          "event_type": "validation",
          "details": {
            "state": "7 - 6 = 1 (left: 1 5)",
            "expected_thought": "8 / 5 = 1.6 (left: 1.6 7)",
            "child_index": 5
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_6",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T18:21:29.982993",
          "event_type": "validation",
          "details": {
            "state": "6 * 7 = 42 (left: 5 42)",
            "expected_thought": "7 / 5 = 1.4 (left: 1.4 8)",
            "child_index": 6
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_7",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T18:21:29.982998",
          "event_type": "validation",
          "details": {
            "state": "7 * 5 = 35 (left: 6 35)",
            "expected_thought": "8 * 5 = 40 (left: 7 40)",
            "child_index": 7
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.983045",
          "event_type": "validation",
          "details": {
            "state": "2 + 5 = 7 (left: 7 7)",
            "thought": "2 + 5 = 7 (left: 7 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.983050",
          "event_type": "validation",
          "details": {
            "state": "5 - 2 = 3 (left: 3 7)",
            "thought": "5 - 2 = 3 (left: 3 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.983055",
          "event_type": "validation",
          "details": {
            "state": "7 - 2 = 5 (left: 5 5)",
            "thought": "7 - 2 = 5 (left: 5 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.983060",
          "event_type": "validation",
          "details": {
            "state": "7 - 5 = 2 (left: 2 2)",
            "thought": "7 - 5 = 2 (left: 2 2)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.983064",
          "event_type": "validation",
          "details": {
            "state": "2 * 5 = 10 (left: 7 10)",
            "thought": "2 * 5 = 10 (left: 7 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.983069",
          "event_type": "validation",
          "details": {
            "state": "7 / 2 = 3.5 (left: 3.5 5)",
            "thought": "7 / 2 = 3.5 (left: 3.5 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.983074",
          "event_type": "validation",
          "details": {
            "state": "5 / 2 = 2.5 (left: 2.5 7)",
            "thought": "5 / 2 = 2.5 (left: 2.5 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_7",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.983079",
          "event_type": "validation",
          "details": {
            "state": "7 / 5 = 1.4 (left: 1.4 2)",
            "thought": "7 / 5 = 1.4 (left: 1.4 2)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.983118",
          "event_type": "validation",
          "details": {
            "state": "2 + 5 = 7 (left: 7 7)",
            "thought": "2 + 5 = 7 (left: 7 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.983123",
          "event_type": "validation",
          "details": {
            "state": "5 + 2 = 7 (left: 7 7)",
            "thought": "5 + 2 = 7 (left: 7 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_2",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T18:21:29.983129",
          "event_type": "validation",
          "details": {
            "state": "7 - 5 = 2 (left: 2 2)",
            "expected_thought": "7 - 2 = 5 (left: 5 5)",
            "child_index": 2
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.983134",
          "event_type": "validation",
          "details": {
            "state": "7 - 5 = 2 (left: 2 2)",
            "thought": "7 - 5 = 2 (left: 2 2)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.983139",
          "event_type": "validation",
          "details": {
            "state": "7 / 2 = 3.5 (left: 3.5 5)",
            "thought": "7 / 2 = 3.5 (left: 3.5 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.983143",
          "event_type": "validation",
          "details": {
            "state": "2 * 5 = 10 (left: 7 10)",
            "thought": "2 * 5 = 10 (left: 7 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_6",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T18:21:29.983149",
          "event_type": "validation",
          "details": {
            "state": "7 * 5 = 35 (left: 6 35)",
            "expected_thought": "5 * 2 = 10 (left: 7 10)",
            "child_index": 6
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_6_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.983187",
          "event_type": "validation",
          "details": {
            "state": "3 + 5 = 8 (left: 7 8)",
            "thought": "3 + 5 = 8 (left: 7 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_6_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.983192",
          "event_type": "validation",
          "details": {
            "state": "5 - 3 = 2 (left: 2 7)",
            "thought": "5 - 3 = 2 (left: 2 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_6_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.983197",
          "event_type": "validation",
          "details": {
            "state": "7 - 3 = 4 (left: 4 5)",
            "thought": "7 - 3 = 4 (left: 4 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_6_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.983202",
          "event_type": "validation",
          "details": {
            "state": "7 - 5 = 2 (left: 2 3)",
            "thought": "7 - 5 = 2 (left: 2 3)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_6_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T18:21:29.983207",
          "event_type": "validation",
          "details": {
            "state": "3 * 5 = 15 (left: 7 15)",
            "thought": "3 * 5 = 15 (left: 7 15)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_6_5",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T18:21:29.983213",
          "event_type": "validation",
          "details": {
            "state": "5 * 7 = 35 (left: 6 35)",
            "expected_thought": "5 * 7 = 35 (left: 3 35)",
            "child_index": 5
          }
        }
      ]
    },
    "valid_search_trace": {
      "success_trace": false
    }
  },
  "detailed_results": [
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-31T18:03:35.947700",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State validation passed: Last thought '2 + 4 = 6 (left: 5 6 7)' found in parent's thoughts",
      "timestamp": "2025-05-31T18:03:35.947787",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '2 + 4 = 6 (left: 5 6 7)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 / 2 = 2 (left: 2 5 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "5 - 2 = 3 (left: 3 4 7)",
          "7 - 4 = 3 (left: 2 3 5)",
          "5 * 2 = 10 (left: 4 7 10)",
          "7 + 2 = 9 (left: 4 5 9)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 * 2 = 14 (left: 4 5 14)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "4 + 2 = 6 (left: 5 6 7)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "node_id 0_0 matches thought position.",
      "timestamp": "2025-05-31T18:03:35.947855",
      "event_type": "validation",
      "details": {
        "node_id": "0_0",
        "state": "2 + 4 = 6 (left: 5 6 7)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 / 2 = 2 (left: 2 5 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "5 - 2 = 3 (left: 3 4 7)",
          "7 - 4 = 3 (left: 2 3 5)",
          "5 * 2 = 10 (left: 4 7 10)",
          "7 + 2 = 9 (left: 4 5 9)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "5 / 2 = 2.5 (left: 2.5 4 7) ",
          "7 * 2 = 14 (left: 4 5 14)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "4 + 2 = 6 (left: 5 6 7)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-31T18:03:43.135908",
      "event_type": "validation",
      "details": {
        "expected_state": "2 + 4 = 6 (left: 5 6 7)",
        "actual_state": "2 + 4 = 6 (left: 5 6 7)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:03:55.315428",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_0",
      "result": "PASS",
      "reason": "node_id 0_0_0 matches thought position.",
      "timestamp": "2025-05-31T18:03:55.315501",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_0",
        "state": "5 + 6 = 11 (left: 7 11)",
        "thoughts": [
          "5 + 6 = 11 (left: 7 11)",
          "6 - 5 = 1 (left: 1 7)",
          "7 - 5 = 2 (left: 2 6)",
          "5 * 6 = 30 (left: 7 30)",
          "7 + 5 = 12 (left: 6 12)",
          "7 - 6 = 1 (left: 1 5)",
          "6 * 7 = 42 (left: 5 42)",
          "7 * 5 = 35 (left: 6 35)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:04:04.424262",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "node_id 0_0_1 matches thought position.",
      "timestamp": "2025-05-31T18:04:04.424327",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_1",
        "state": "6 - 5 = 1 (left: 1 7)",
        "thoughts": [
          "5 + 6 = 11 (left: 7 11)",
          "6 - 5 = 1 (left: 1 7)",
          "7 - 5 = 2 (left: 2 6)",
          "5 * 6 = 30 (left: 7 30)",
          "7 + 5 = 12 (left: 6 12)",
          "7 - 6 = 1 (left: 1 5)",
          "6 * 7 = 42 (left: 5 42)",
          "7 * 5 = 35 (left: 6 35)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:04:13.357569",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_2",
      "result": "PASS",
      "reason": "node_id 0_0_2 matches thought position.",
      "timestamp": "2025-05-31T18:04:13.357645",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_2",
        "state": "7 - 5 = 2 (left: 2 6)",
        "thoughts": [
          "5 + 6 = 11 (left: 7 11)",
          "6 - 5 = 1 (left: 1 7)",
          "7 - 5 = 2 (left: 2 6)",
          "5 * 6 = 30 (left: 7 30)",
          "7 + 5 = 12 (left: 6 12)",
          "7 - 6 = 1 (left: 1 5)",
          "6 * 7 = 42 (left: 5 42)",
          "7 * 5 = 35 (left: 6 35)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:04:22.839959",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_3",
      "result": "PASS",
      "reason": "node_id 0_0_3 matches thought position.",
      "timestamp": "2025-05-31T18:04:22.840033",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_3",
        "state": "5 * 6 = 30 (left: 7 30)",
        "thoughts": [
          "5 + 6 = 11 (left: 7 11)",
          "6 - 5 = 1 (left: 1 7)",
          "7 - 5 = 2 (left: 2 6)",
          "5 * 6 = 30 (left: 7 30)",
          "7 + 5 = 12 (left: 6 12)",
          "7 - 6 = 1 (left: 1 5)",
          "6 * 7 = 42 (left: 5 42)",
          "7 * 5 = 35 (left: 6 35)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_4",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-31T18:04:33.636142",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_4",
      "result": "PASS",
      "reason": "node_id 0_0_4 matches thought position.",
      "timestamp": "2025-05-31T18:04:33.636212",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_4",
        "state": "7 + 5 = 12 (left: 6 12)",
        "thoughts": [
          "5 + 6 = 11 (left: 7 11)",
          "6 - 5 = 1 (left: 1 7)",
          "7 - 5 = 2 (left: 2 6)",
          "5 * 6 = 30 (left: 7 30)",
          "7 + 5 = 12 (left: 6 12)",
          "7 - 6 = 1 (left: 1 5)",
          "6 * 7 = 42 (left: 5 42)",
          "7 * 5 = 35 (left: 6 35)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:05:08.819141",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_5",
      "result": "PASS",
      "reason": "node_id 0_0_5 matches thought position.",
      "timestamp": "2025-05-31T18:05:08.819215",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_5",
        "state": "7 - 6 = 1 (left: 1 5)",
        "thoughts": [
          "5 + 6 = 11 (left: 7 11)",
          "6 - 5 = 1 (left: 1 7)",
          "7 - 5 = 2 (left: 2 6)",
          "5 * 6 = 30 (left: 7 30)",
          "7 + 5 = 12 (left: 6 12)",
          "7 - 6 = 1 (left: 1 5)",
          "6 * 7 = 42 (left: 5 42)",
          "7 * 5 = 35 (left: 6 35)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:05:25.888078",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_6",
      "result": "PASS",
      "reason": "node_id 0_0_6 matches thought position.",
      "timestamp": "2025-05-31T18:05:25.888144",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_6",
        "state": "6 * 7 = 42 (left: 5 42)",
        "thoughts": [
          "5 + 6 = 11 (left: 7 11)",
          "6 - 5 = 1 (left: 1 7)",
          "7 - 5 = 2 (left: 2 6)",
          "5 * 6 = 30 (left: 7 30)",
          "7 + 5 = 12 (left: 6 12)",
          "7 - 6 = 1 (left: 1 5)",
          "6 * 7 = 42 (left: 5 42)",
          "7 * 5 = 35 (left: 6 35)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_7",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:06:16.406278",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_7",
      "result": "PASS",
      "reason": "node_id 0_0_7 matches thought position.",
      "timestamp": "2025-05-31T18:06:16.406361",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_7",
        "state": "7 * 5 = 35 (left: 6 35)",
        "thoughts": [
          "5 + 6 = 11 (left: 7 11)",
          "6 - 5 = 1 (left: 1 7)",
          "7 - 5 = 2 (left: 2 6)",
          "5 * 6 = 30 (left: 7 30)",
          "7 + 5 = 12 (left: 6 12)",
          "7 - 6 = 1 (left: 1 5)",
          "6 * 7 = 42 (left: 5 42)",
          "7 * 5 = 35 (left: 6 35)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_0; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-31T18:06:19.204875",
      "event_type": "validation",
      "details": {
        "popped_node": "0_0",
        "expected_popped": "0_0",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_0",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "All 8 children explored - valid backtrack",
      "timestamp": "2025-05-31T18:06:19.204899",
      "event_type": "validation",
      "details": {
        "total_thoughts": 8,
        "evaluated_children": 8
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-31T18:06:28.456022",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State validation passed: Last thought '2 * 4 = 8 (left: 5 7 8)' found in parent's thoughts",
      "timestamp": "2025-05-31T18:06:28.456072",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '2 * 4 = 8 (left: 5 7 8)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 / 2 = 2 (left: 2 5 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "5 - 2 = 3 (left: 3 4 7)",
          "7 - 4 = 3 (left: 2 3 5)",
          "5 * 2 = 10 (left: 4 7 10)",
          "7 + 2 = 9 (left: 4 5 9)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 * 2 = 14 (left: 4 5 14)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "4 + 2 = 6 (left: 5 6 7)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_1 follows 0_0",
      "timestamp": "2025-05-31T18:06:28.456101",
      "event_type": "validation",
      "details": {
        "popped_node": "0_0",
        "current_node": "0_1",
        "expected_index": 1,
        "actual_index": 1
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "node_id 0_1 matches thought position.",
      "timestamp": "2025-05-31T18:06:28.456137",
      "event_type": "validation",
      "details": {
        "node_id": "0_1",
        "state": "2 * 4 = 8 (left: 5 7 8)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 / 2 = 2 (left: 2 5 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "5 - 2 = 3 (left: 3 4 7)",
          "7 - 4 = 3 (left: 2 3 5)",
          "5 * 2 = 10 (left: 4 7 10)",
          "7 + 2 = 9 (left: 4 5 9)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "5 / 2 = 2.5 (left: 2.5 4 7) ",
          "7 * 2 = 14 (left: 4 5 14)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "4 + 2 = 6 (left: 5 6 7)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-31T18:06:37.548980",
      "event_type": "validation",
      "details": {
        "expected_state": "2 * 4 = 8 (left: 5 7 8)",
        "actual_state": "2 * 4 = 8 (left: 5 7 8)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:06:48.842955",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "node_id 0_1_0 matches thought position.",
      "timestamp": "2025-05-31T18:06:48.843021",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_0",
        "state": "5 + 7 = 12 (left: 8 12)",
        "thoughts": [
          "5 + 7 = 12 (left: 8 12)",
          "7 - 5 = 2 (left: 2 8)",
          "8 - 5 = 3 (left: 3 7)",
          "8 - 7 = 1 (left: 1 5)",
          "7 + 5 = 12 (left: 8 12)",
          "8 / 5 = 1.6 (left: 1.6 7)",
          "7 / 5 = 1.4 (left: 1.4 8)",
          "8 * 5 = 40 (left: 7 40)",
          "7 * 5 = 35 (left: 8 35)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:07:10.520236",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_1",
      "result": "PASS",
      "reason": "node_id 0_1_1 matches thought position.",
      "timestamp": "2025-05-31T18:07:10.520317",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_1",
        "state": "7 - 5 = 2 (left: 2 8)",
        "thoughts": [
          "5 + 7 = 12 (left: 8 12)",
          "7 - 5 = 2 (left: 2 8)",
          "8 - 5 = 3 (left: 3 7)",
          "8 - 7 = 1 (left: 1 5)",
          "7 + 5 = 12 (left: 8 12)",
          "8 / 5 = 1.6 (left: 1.6 7)",
          "7 / 5 = 1.4 (left: 1.4 8)",
          "8 * 5 = 40 (left: 7 40)",
          "7 * 5 = 35 (left: 8 35)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:07:19.752344",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_2",
      "result": "PASS",
      "reason": "node_id 0_1_2 matches thought position.",
      "timestamp": "2025-05-31T18:07:19.752432",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_2",
        "state": "8 - 5 = 3 (left: 3 7)",
        "thoughts": [
          "5 + 7 = 12 (left: 8 12)",
          "7 - 5 = 2 (left: 2 8)",
          "8 - 5 = 3 (left: 3 7)",
          "8 - 7 = 1 (left: 1 5)",
          "7 + 5 = 12 (left: 8 12)",
          "8 / 5 = 1.6 (left: 1.6 7)",
          "7 / 5 = 1.4 (left: 1.4 8)",
          "8 * 5 = 40 (left: 7 40)",
          "7 * 5 = 35 (left: 8 35)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:07:29.410530",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_3",
      "result": "PASS",
      "reason": "node_id 0_1_3 matches thought position.",
      "timestamp": "2025-05-31T18:07:29.410600",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_3",
        "state": "8 - 7 = 1 (left: 1 5)",
        "thoughts": [
          "5 + 7 = 12 (left: 8 12)",
          "7 - 5 = 2 (left: 2 8)",
          "8 - 5 = 3 (left: 3 7)",
          "8 - 7 = 1 (left: 1 5)",
          "7 + 5 = 12 (left: 8 12)",
          "8 / 5 = 1.6 (left: 1.6 7)",
          "7 / 5 = 1.4 (left: 1.4 8)",
          "8 * 5 = 40 (left: 7 40)",
          "7 * 5 = 35 (left: 8 35)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:07:39.259184",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_4",
      "result": "FAIL",
      "reason": "node_id 0_1_4 does not match thought position.",
      "timestamp": "2025-05-31T18:07:39.259261",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_4",
        "state": "7 + 5 = 12 (left: 6 12)",
        "thoughts": [
          "5 + 7 = 12 (left: 8 12)",
          "7 - 5 = 2 (left: 2 8)",
          "8 - 5 = 3 (left: 3 7)",
          "8 - 7 = 1 (left: 1 5)",
          "7 + 5 = 12 (left: 8 12)",
          "8 / 5 = 1.6 (left: 1.6 7)",
          "7 / 5 = 1.4 (left: 1.4 8)",
          "8 * 5 = 40 (left: 7 40)",
          "7 * 5 = 35 (left: 8 35)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:07:47.651779",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_5",
      "result": "FAIL",
      "reason": "node_id 0_1_5 does not match thought position.",
      "timestamp": "2025-05-31T18:07:47.651846",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_5",
        "state": "7 - 6 = 1 (left: 1 5)",
        "thoughts": [
          "5 + 7 = 12 (left: 8 12)",
          "7 - 5 = 2 (left: 2 8)",
          "8 - 5 = 3 (left: 3 7)",
          "8 - 7 = 1 (left: 1 5)",
          "7 + 5 = 12 (left: 8 12)",
          "8 / 5 = 1.6 (left: 1.6 7)",
          "7 / 5 = 1.4 (left: 1.4 8)",
          "8 * 5 = 40 (left: 7 40)",
          "7 * 5 = 35 (left: 8 35)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:07:56.793301",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_6",
      "result": "FAIL",
      "reason": "node_id 0_1_6 does not match thought position.",
      "timestamp": "2025-05-31T18:07:56.793386",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_6",
        "state": "6 * 7 = 42 (left: 5 42)",
        "thoughts": [
          "5 + 7 = 12 (left: 8 12)",
          "7 - 5 = 2 (left: 2 8)",
          "8 - 5 = 3 (left: 3 7)",
          "8 - 7 = 1 (left: 1 5)",
          "7 + 5 = 12 (left: 8 12)",
          "8 / 5 = 1.6 (left: 1.6 7)",
          "7 / 5 = 1.4 (left: 1.4 8)",
          "8 * 5 = 40 (left: 7 40)",
          "7 * 5 = 35 (left: 8 35)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_7",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:08:06.678585",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_7",
      "result": "FAIL",
      "reason": "node_id 0_1_7 does not match thought position.",
      "timestamp": "2025-05-31T18:08:06.678648",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_7",
        "state": "7 * 5 = 35 (left: 6 35)",
        "thoughts": [
          "5 + 7 = 12 (left: 8 12)",
          "7 - 5 = 2 (left: 2 8)",
          "8 - 5 = 3 (left: 3 7)",
          "8 - 7 = 1 (left: 1 5)",
          "7 + 5 = 12 (left: 8 12)",
          "8 / 5 = 1.6 (left: 1.6 7)",
          "7 / 5 = 1.4 (left: 1.4 8)",
          "8 * 5 = 40 (left: 7 40)",
          "7 * 5 = 35 (left: 8 35)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_1; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-31T18:08:10.145802",
      "event_type": "validation",
      "details": {
        "popped_node": "0_1",
        "expected_popped": "0_1",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_1",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_1",
      "result": "FAIL",
      "reason": "Only 8 of 9 children explored",
      "timestamp": "2025-05-31T18:08:10.145835",
      "event_type": "validation",
      "details": {
        "total_thoughts": 9,
        "evaluated_children": 8
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-31T18:08:20.108585",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "State validation passed: Last thought '4 / 2 = 2 (left: 2 5 7)' found in parent's thoughts",
      "timestamp": "2025-05-31T18:08:20.108636",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '4 / 2 = 2 (left: 2 5 7)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 / 2 = 2 (left: 2 5 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "5 - 2 = 3 (left: 3 4 7)",
          "7 - 4 = 3 (left: 2 3 5)",
          "5 * 2 = 10 (left: 4 7 10)",
          "7 + 2 = 9 (left: 4 5 9)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 * 2 = 14 (left: 4 5 14)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "4 + 2 = 6 (left: 5 6 7)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_2 follows 0_1",
      "timestamp": "2025-05-31T18:08:20.108664",
      "event_type": "validation",
      "details": {
        "popped_node": "0_1",
        "current_node": "0_2",
        "expected_index": 2,
        "actual_index": 2
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "node_id 0_2 matches thought position.",
      "timestamp": "2025-05-31T18:08:20.108696",
      "event_type": "validation",
      "details": {
        "node_id": "0_2",
        "state": "4 / 2 = 2 (left: 2 5 7)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 / 2 = 2 (left: 2 5 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "5 - 2 = 3 (left: 3 4 7)",
          "7 - 4 = 3 (left: 2 3 5)",
          "5 * 2 = 10 (left: 4 7 10)",
          "7 + 2 = 9 (left: 4 5 9)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "5 / 2 = 2.5 (left: 2.5 4 7) ",
          "7 * 2 = 14 (left: 4 5 14)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "4 + 2 = 6 (left: 5 6 7)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-31T18:08:28.050406",
      "event_type": "validation",
      "details": {
        "expected_state": "4 / 2 = 2 (left: 2 5 7)",
        "actual_state": "4 / 2 = 2 (left: 2 5 7)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:08:40.362009",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_0",
      "result": "PASS",
      "reason": "node_id 0_2_0 matches thought position.",
      "timestamp": "2025-05-31T18:08:40.362076",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_0",
        "state": "2 + 5 = 7 (left: 7 7)",
        "thoughts": [
          "2 + 5 = 7 (left: 7 7)",
          "5 - 2 = 3 (left: 3 7)",
          "7 - 2 = 5 (left: 5 5)",
          "7 - 5 = 2 (left: 2 2)",
          "2 * 5 = 10 (left: 7 10)",
          "7 / 2 = 3.5 (left: 3.5 5)",
          "5 / 2 = 2.5 (left: 2.5 7)",
          "7 / 5 = 1.4 (left: 1.4 2)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:10:28.386220",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_1",
      "result": "PASS",
      "reason": "node_id 0_2_1 matches thought position.",
      "timestamp": "2025-05-31T18:10:28.386291",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_1",
        "state": "5 - 2 = 3 (left: 3 7)",
        "thoughts": [
          "2 + 5 = 7 (left: 7 7)",
          "5 - 2 = 3 (left: 3 7)",
          "7 - 2 = 5 (left: 5 5)",
          "7 - 5 = 2 (left: 2 2)",
          "2 * 5 = 10 (left: 7 10)",
          "7 / 2 = 3.5 (left: 3.5 5)",
          "5 / 2 = 2.5 (left: 2.5 7)",
          "7 / 5 = 1.4 (left: 1.4 2)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:10:37.204973",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_2",
      "result": "PASS",
      "reason": "node_id 0_2_2 matches thought position.",
      "timestamp": "2025-05-31T18:10:37.205055",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_2",
        "state": "7 - 2 = 5 (left: 5 5)",
        "thoughts": [
          "2 + 5 = 7 (left: 7 7)",
          "5 - 2 = 3 (left: 3 7)",
          "7 - 2 = 5 (left: 5 5)",
          "7 - 5 = 2 (left: 2 2)",
          "2 * 5 = 10 (left: 7 10)",
          "7 / 2 = 3.5 (left: 3.5 5)",
          "5 / 2 = 2.5 (left: 2.5 7)",
          "7 / 5 = 1.4 (left: 1.4 2)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:10:45.577527",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_3",
      "result": "PASS",
      "reason": "node_id 0_2_3 matches thought position.",
      "timestamp": "2025-05-31T18:10:45.577589",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_3",
        "state": "7 - 5 = 2 (left: 2 2)",
        "thoughts": [
          "2 + 5 = 7 (left: 7 7)",
          "5 - 2 = 3 (left: 3 7)",
          "7 - 2 = 5 (left: 5 5)",
          "7 - 5 = 2 (left: 2 2)",
          "2 * 5 = 10 (left: 7 10)",
          "7 / 2 = 3.5 (left: 3.5 5)",
          "5 / 2 = 2.5 (left: 2.5 7)",
          "7 / 5 = 1.4 (left: 1.4 2)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:10:55.408717",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_4",
      "result": "PASS",
      "reason": "node_id 0_2_4 matches thought position.",
      "timestamp": "2025-05-31T18:10:55.408779",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_4",
        "state": "2 * 5 = 10 (left: 7 10)",
        "thoughts": [
          "2 + 5 = 7 (left: 7 7)",
          "5 - 2 = 3 (left: 3 7)",
          "7 - 2 = 5 (left: 5 5)",
          "7 - 5 = 2 (left: 2 2)",
          "2 * 5 = 10 (left: 7 10)",
          "7 / 2 = 3.5 (left: 3.5 5)",
          "5 / 2 = 2.5 (left: 2.5 7)",
          "7 / 5 = 1.4 (left: 1.4 2)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:11:05.611099",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_5",
      "result": "PASS",
      "reason": "node_id 0_2_5 matches thought position.",
      "timestamp": "2025-05-31T18:11:05.611161",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_5",
        "state": "7 / 2 = 3.5 (left: 3.5 5)",
        "thoughts": [
          "2 + 5 = 7 (left: 7 7)",
          "5 - 2 = 3 (left: 3 7)",
          "7 - 2 = 5 (left: 5 5)",
          "7 - 5 = 2 (left: 2 2)",
          "2 * 5 = 10 (left: 7 10)",
          "7 / 2 = 3.5 (left: 3.5 5)",
          "5 / 2 = 2.5 (left: 2.5 7)",
          "7 / 5 = 1.4 (left: 1.4 2)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:11:17.198582",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_6",
      "result": "PASS",
      "reason": "node_id 0_2_6 matches thought position.",
      "timestamp": "2025-05-31T18:11:17.198650",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_6",
        "state": "5 / 2 = 2.5 (left: 2.5 7)",
        "thoughts": [
          "2 + 5 = 7 (left: 7 7)",
          "5 - 2 = 3 (left: 3 7)",
          "7 - 2 = 5 (left: 5 5)",
          "7 - 5 = 2 (left: 2 2)",
          "2 * 5 = 10 (left: 7 10)",
          "7 / 2 = 3.5 (left: 3.5 5)",
          "5 / 2 = 2.5 (left: 2.5 7)",
          "7 / 5 = 1.4 (left: 1.4 2)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_7",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:11:28.125771",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_7",
      "result": "PASS",
      "reason": "node_id 0_2_7 matches thought position.",
      "timestamp": "2025-05-31T18:11:28.125835",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_7",
        "state": "7 / 5 = 1.4 (left: 1.4 2)",
        "thoughts": [
          "2 + 5 = 7 (left: 7 7)",
          "5 - 2 = 3 (left: 3 7)",
          "7 - 2 = 5 (left: 5 5)",
          "7 - 5 = 2 (left: 2 2)",
          "2 * 5 = 10 (left: 7 10)",
          "7 / 2 = 3.5 (left: 3.5 5)",
          "5 / 2 = 2.5 (left: 2.5 7)",
          "7 / 5 = 1.4 (left: 1.4 2)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_2; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-31T18:11:31.912003",
      "event_type": "validation",
      "details": {
        "popped_node": "0_2",
        "expected_popped": "0_2",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_2",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "All 8 children explored - valid backtrack",
      "timestamp": "2025-05-31T18:11:31.912025",
      "event_type": "validation",
      "details": {
        "total_thoughts": 8,
        "evaluated_children": 8
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-31T18:11:42.244981",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_3",
      "result": "FAIL",
      "reason": "State validation failed: Last thought '7 - 2 = 5 (left: 2 5 7)' not found in parent's thoughts",
      "timestamp": "2025-05-31T18:11:42.245028",
      "event_type": "validation",
      "details": {
        "validation_errors": [
          "Last thought '7 - 2 = 5 (left: 2 5 7)' not found in parent's thoughts"
        ],
        "parent_thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 / 2 = 2 (left: 2 5 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "5 - 2 = 3 (left: 3 4 7)",
          "7 - 4 = 3 (left: 2 3 5)",
          "5 * 2 = 10 (left: 4 7 10)",
          "7 + 2 = 9 (left: 4 5 9)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 * 2 = 14 (left: 4 5 14)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "4 + 2 = 6 (left: 5 6 7)"
        ],
        "parent_state": null,
        "current_state": [
          "7 - 2 = 5 (left: 2 5 7)"
        ]
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_3",
      "result": "FAIL",
      "reason": "State not present within the thoughts: for 0_3 got '7 - 2 = 5 (left: 2 5 7)'",
      "timestamp": "2025-05-31T18:11:42.245046",
      "event_type": "validation",
      "details": {
        "node_id": "0_3",
        "state": "7 - 2 = 5 (left: 2 5 7)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 / 2 = 2 (left: 2 5 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "5 - 2 = 3 (left: 3 4 7)",
          "7 - 4 = 3 (left: 2 3 5)",
          "5 * 2 = 10 (left: 4 7 10)",
          "7 + 2 = 9 (left: 4 5 9)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 * 2 = 14 (left: 4 5 14)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "4 + 2 = 6 (left: 5 6 7)"
        ]
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3",
      "result": "FAIL",
      "reason": "node_id 0_3 does not match thought position.",
      "timestamp": "2025-05-31T18:11:42.245082",
      "event_type": "validation",
      "details": {
        "node_id": "0_3",
        "state": "7 - 2 = 5 (left: 2 5 7)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 / 2 = 2 (left: 2 5 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "5 - 2 = 3 (left: 3 4 7)",
          "7 - 4 = 3 (left: 2 3 5)",
          "5 * 2 = 10 (left: 4 7 10)",
          "7 + 2 = 9 (left: 4 5 9)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "5 / 2 = 2.5 (left: 2.5 4 7) ",
          "7 * 2 = 14 (left: 4 5 14)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "4 + 2 = 6 (left: 5 6 7)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-31T18:11:49.046720",
      "event_type": "validation",
      "details": {
        "expected_state": "7 - 2 = 5 (left: 2 5 7)",
        "actual_state": "7 - 2 = 5 (left: 2 5 7)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:12:52.047963",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_0",
      "result": "PASS",
      "reason": "node_id 0_3_0 matches thought position.",
      "timestamp": "2025-05-31T18:12:52.048029",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_0",
        "state": "2 + 5 = 7 (left: 7 7)",
        "thoughts": [
          "2 + 5 = 7 (left: 7 7)",
          "5 + 2 = 7 (left: 7 7)",
          "7 - 2 = 5 (left: 5 5)",
          "7 - 5 = 2 (left: 2 2)",
          "7 / 2 = 3.5 (left: 3.5 5)",
          "2 * 5 = 10 (left: 7 10)",
          "5 * 2 = 10 (left: 7 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:13:00.912391",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_1",
      "result": "PASS",
      "reason": "node_id 0_3_1 matches thought position.",
      "timestamp": "2025-05-31T18:13:00.912450",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_1",
        "state": "5 + 2 = 7 (left: 7 7)",
        "thoughts": [
          "2 + 5 = 7 (left: 7 7)",
          "5 + 2 = 7 (left: 7 7)",
          "7 - 2 = 5 (left: 5 5)",
          "7 - 5 = 2 (left: 2 2)",
          "7 / 2 = 3.5 (left: 3.5 5)",
          "2 * 5 = 10 (left: 7 10)",
          "5 * 2 = 10 (left: 7 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:13:10.912651",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_2",
      "result": "FAIL",
      "reason": "node_id 0_3_2 does not match thought position.",
      "timestamp": "2025-05-31T18:13:10.912720",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_2",
        "state": "7 - 5 = 2 (left: 2 2)",
        "thoughts": [
          "2 + 5 = 7 (left: 7 7)",
          "5 + 2 = 7 (left: 7 7)",
          "7 - 2 = 5 (left: 5 5)",
          "7 - 5 = 2 (left: 2 2)",
          "7 / 2 = 3.5 (left: 3.5 5)",
          "2 * 5 = 10 (left: 7 10)",
          "5 * 2 = 10 (left: 7 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:15:31.951640",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_3",
      "result": "PASS",
      "reason": "node_id 0_3_3 matches thought position.",
      "timestamp": "2025-05-31T18:15:31.951723",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_3",
        "state": "7 - 5 = 2 (left: 2 2)",
        "thoughts": [
          "2 + 5 = 7 (left: 7 7)",
          "5 + 2 = 7 (left: 7 7)",
          "7 - 2 = 5 (left: 5 5)",
          "7 - 5 = 2 (left: 2 2)",
          "7 / 2 = 3.5 (left: 3.5 5)",
          "2 * 5 = 10 (left: 7 10)",
          "5 * 2 = 10 (left: 7 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:15:45.818182",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_4",
      "result": "PASS",
      "reason": "node_id 0_3_4 matches thought position.",
      "timestamp": "2025-05-31T18:15:45.818254",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_4",
        "state": "7 / 2 = 3.5 (left: 3.5 5)",
        "thoughts": [
          "2 + 5 = 7 (left: 7 7)",
          "5 + 2 = 7 (left: 7 7)",
          "7 - 2 = 5 (left: 5 5)",
          "7 - 5 = 2 (left: 2 2)",
          "7 / 2 = 3.5 (left: 3.5 5)",
          "2 * 5 = 10 (left: 7 10)",
          "5 * 2 = 10 (left: 7 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:15:54.862161",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_5",
      "result": "PASS",
      "reason": "node_id 0_3_5 matches thought position.",
      "timestamp": "2025-05-31T18:15:54.862235",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_5",
        "state": "2 * 5 = 10 (left: 7 10)",
        "thoughts": [
          "2 + 5 = 7 (left: 7 7)",
          "5 + 2 = 7 (left: 7 7)",
          "7 - 2 = 5 (left: 5 5)",
          "7 - 5 = 2 (left: 2 2)",
          "7 / 2 = 3.5 (left: 3.5 5)",
          "2 * 5 = 10 (left: 7 10)",
          "5 * 2 = 10 (left: 7 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:17:14.380035",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_6",
      "result": "FAIL",
      "reason": "node_id 0_3_6 does not match thought position.",
      "timestamp": "2025-05-31T18:17:14.380104",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_6",
        "state": "7 * 5 = 35 (left: 6 35)",
        "thoughts": [
          "2 + 5 = 7 (left: 7 7)",
          "5 + 2 = 7 (left: 7 7)",
          "7 - 2 = 5 (left: 5 5)",
          "7 - 5 = 2 (left: 2 2)",
          "7 / 2 = 3.5 (left: 3.5 5)",
          "2 * 5 = 10 (left: 7 10)",
          "5 * 2 = 10 (left: 7 10)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_3; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-31T18:17:17.378387",
      "event_type": "validation",
      "details": {
        "popped_node": "0_3",
        "expected_popped": "0_3",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_3",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "All 7 children explored - valid backtrack",
      "timestamp": "2025-05-31T18:17:17.378416",
      "event_type": "validation",
      "details": {
        "total_thoughts": 7,
        "evaluated_children": 7
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_4",
      "result": "FAIL",
      "reason": "State not present within the thoughts: for 0_4 got '5 - 2 = 3 (left: 2 3 7)'",
      "timestamp": "2025-05-31T18:17:35.130153",
      "event_type": "validation",
      "details": {
        "node_id": "0_4",
        "state": "5 - 2 = 3 (left: 2 3 7)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 / 2 = 2 (left: 2 5 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "5 - 2 = 3 (left: 3 4 7)",
          "7 - 4 = 3 (left: 2 3 5)",
          "5 * 2 = 10 (left: 4 7 10)",
          "7 + 2 = 9 (left: 4 5 9)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 * 2 = 14 (left: 4 5 14)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "4 + 2 = 6 (left: 5 6 7)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "Value 2.001 meets threshold 3.0",
      "timestamp": "2025-05-31T18:17:35.130203",
      "event_type": "validation",
      "details": {
        "value": 2.001,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4",
      "result": "FAIL",
      "reason": "node_id 0_4 does not match thought position.",
      "timestamp": "2025-05-31T18:17:35.130245",
      "event_type": "validation",
      "details": {
        "node_id": "0_4",
        "state": "5 - 2 = 3 (left: 2 3 7)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 / 2 = 2 (left: 2 5 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "5 - 2 = 3 (left: 3 4 7)",
          "7 - 4 = 3 (left: 2 3 5)",
          "5 * 2 = 10 (left: 4 7 10)",
          "7 + 2 = 9 (left: 4 5 9)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "5 / 2 = 2.5 (left: 2.5 4 7) ",
          "7 * 2 = 14 (left: 4 5 14)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "4 + 2 = 6 (left: 5 6 7)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "Value 2.001 meets threshold 3.0",
      "timestamp": "2025-05-31T18:17:44.856936",
      "event_type": "validation",
      "details": {
        "value": 2.001,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5",
      "result": "FAIL",
      "reason": "node_id 0_5 does not match thought position.",
      "timestamp": "2025-05-31T18:17:44.857000",
      "event_type": "validation",
      "details": {
        "node_id": "0_5",
        "state": "7 - 2 = 5 (left: 2 5 7)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 / 2 = 2 (left: 2 5 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "5 - 2 = 3 (left: 3 4 7)",
          "7 - 4 = 3 (left: 2 3 5)",
          "5 * 2 = 10 (left: 4 7 10)",
          "7 + 2 = 9 (left: 4 5 9)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "5 / 2 = 2.5 (left: 2.5 4 7) ",
          "7 * 2 = 14 (left: 4 5 14)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "4 + 2 = 6 (left: 5 6 7)"
        ]
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_6",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-31T18:17:53.913536",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_6",
      "result": "FAIL",
      "reason": "State validation failed: Last thought '7 - 4 = 3 (left: 3 5 7)' not found in parent's thoughts",
      "timestamp": "2025-05-31T18:17:53.913685",
      "event_type": "validation",
      "details": {
        "validation_errors": [
          "Last thought '7 - 4 = 3 (left: 3 5 7)' not found in parent's thoughts"
        ],
        "parent_thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 / 2 = 2 (left: 2 5 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "5 - 2 = 3 (left: 3 4 7)",
          "7 - 4 = 3 (left: 2 3 5)",
          "5 * 2 = 10 (left: 4 7 10)",
          "7 + 2 = 9 (left: 4 5 9)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 * 2 = 14 (left: 4 5 14)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "4 + 2 = 6 (left: 5 6 7)"
        ],
        "parent_state": null,
        "current_state": [
          "7 - 4 = 3 (left: 3 5 7)"
        ]
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_6",
      "result": "FAIL",
      "reason": "node_id 0_6 does not match thought position.",
      "timestamp": "2025-05-31T18:17:53.913735",
      "event_type": "validation",
      "details": {
        "node_id": "0_6",
        "state": "7 - 4 = 3 (left: 3 5 7)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 / 2 = 2 (left: 2 5 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "5 - 2 = 3 (left: 3 4 7)",
          "7 - 4 = 3 (left: 2 3 5)",
          "5 * 2 = 10 (left: 4 7 10)",
          "7 + 2 = 9 (left: 4 5 9)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "5 / 2 = 2.5 (left: 2.5 4 7) ",
          "7 * 2 = 14 (left: 4 5 14)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "4 + 2 = 6 (left: 5 6 7)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_6",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-31T18:18:04.281590",
      "event_type": "validation",
      "details": {
        "expected_state": "7 - 4 = 3 (left: 3 5 7)",
        "actual_state": "7 - 4 = 3 (left: 3 5 7)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_6_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:18:16.347478",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_6_0",
      "result": "PASS",
      "reason": "node_id 0_6_0 matches thought position.",
      "timestamp": "2025-05-31T18:18:16.347548",
      "event_type": "validation",
      "details": {
        "node_id": "0_6_0",
        "state": "3 + 5 = 8 (left: 7 8)",
        "thoughts": [
          "3 + 5 = 8 (left: 7 8)",
          "5 - 3 = 2 (left: 2 7)",
          "7 - 3 = 4 (left: 4 5)",
          "7 - 5 = 2 (left: 2 3)",
          "3 * 5 = 15 (left: 7 15)",
          "5 * 7 = 35 (left: 3 35)",
          "7 / 3 = 2.33 (left: 2.33 5)",
          "5 / 3 = 1.67 (left: 1.67 7)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_6_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:18:25.179605",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_6_1",
      "result": "PASS",
      "reason": "node_id 0_6_1 matches thought position.",
      "timestamp": "2025-05-31T18:18:25.179672",
      "event_type": "validation",
      "details": {
        "node_id": "0_6_1",
        "state": "5 - 3 = 2 (left: 2 7)",
        "thoughts": [
          "3 + 5 = 8 (left: 7 8)",
          "5 - 3 = 2 (left: 2 7)",
          "7 - 3 = 4 (left: 4 5)",
          "7 - 5 = 2 (left: 2 3)",
          "3 * 5 = 15 (left: 7 15)",
          "5 * 7 = 35 (left: 3 35)",
          "7 / 3 = 2.33 (left: 2.33 5)",
          "5 / 3 = 1.67 (left: 1.67 7)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_6_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:19:20.507682",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_6_2",
      "result": "PASS",
      "reason": "node_id 0_6_2 matches thought position.",
      "timestamp": "2025-05-31T18:19:20.507760",
      "event_type": "validation",
      "details": {
        "node_id": "0_6_2",
        "state": "7 - 3 = 4 (left: 4 5)",
        "thoughts": [
          "3 + 5 = 8 (left: 7 8)",
          "5 - 3 = 2 (left: 2 7)",
          "7 - 3 = 4 (left: 4 5)",
          "7 - 5 = 2 (left: 2 3)",
          "3 * 5 = 15 (left: 7 15)",
          "5 * 7 = 35 (left: 3 35)",
          "7 / 3 = 2.33 (left: 2.33 5)",
          "5 / 3 = 1.67 (left: 1.67 7)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_6_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:19:30.364770",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_6_3",
      "result": "PASS",
      "reason": "node_id 0_6_3 matches thought position.",
      "timestamp": "2025-05-31T18:19:30.364853",
      "event_type": "validation",
      "details": {
        "node_id": "0_6_3",
        "state": "7 - 5 = 2 (left: 2 3)",
        "thoughts": [
          "3 + 5 = 8 (left: 7 8)",
          "5 - 3 = 2 (left: 2 7)",
          "7 - 3 = 4 (left: 4 5)",
          "7 - 5 = 2 (left: 2 3)",
          "3 * 5 = 15 (left: 7 15)",
          "5 * 7 = 35 (left: 3 35)",
          "7 / 3 = 2.33 (left: 2.33 5)",
          "5 / 3 = 1.67 (left: 1.67 7)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_6_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:20:17.303521",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_6_4",
      "result": "PASS",
      "reason": "node_id 0_6_4 matches thought position.",
      "timestamp": "2025-05-31T18:20:17.303612",
      "event_type": "validation",
      "details": {
        "node_id": "0_6_4",
        "state": "3 * 5 = 15 (left: 7 15)",
        "thoughts": [
          "3 + 5 = 8 (left: 7 8)",
          "5 - 3 = 2 (left: 2 7)",
          "7 - 3 = 4 (left: 4 5)",
          "7 - 5 = 2 (left: 2 3)",
          "3 * 5 = 15 (left: 7 15)",
          "5 * 7 = 35 (left: 3 35)",
          "7 / 3 = 2.33 (left: 2.33 5)",
          "5 / 3 = 1.67 (left: 1.67 7)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_6_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:20:27.035962",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_6_5",
      "result": "FAIL",
      "reason": "node_id 0_6_5 does not match thought position.",
      "timestamp": "2025-05-31T18:20:27.036043",
      "event_type": "validation",
      "details": {
        "node_id": "0_6_5",
        "state": "5 * 7 = 35 (left: 6 35)",
        "thoughts": [
          "3 + 5 = 8 (left: 7 8)",
          "5 - 3 = 2 (left: 2 7)",
          "7 - 3 = 4 (left: 4 5)",
          "7 - 5 = 2 (left: 2 3)",
          "3 * 5 = 15 (left: 7 15)",
          "5 * 7 = 35 (left: 3 35)",
          "7 / 3 = 2.33 (left: 2.33 5)",
          "5 / 3 = 1.67 (left: 1.67 7)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_6",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_6; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-31T18:20:31.562872",
      "event_type": "validation",
      "details": {
        "popped_node": "0_6",
        "expected_popped": "0_6",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_6",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_6",
      "result": "FAIL",
      "reason": "Only 6 of 8 children explored",
      "timestamp": "2025-05-31T18:20:31.562897",
      "event_type": "validation",
      "details": {
        "total_thoughts": 8,
        "evaluated_children": 6
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_7",
      "result": "FAIL",
      "reason": "State not present within the thoughts: for 0_7 got '5 * 2 = 10 (left: 2 7 10)'",
      "timestamp": "2025-05-31T18:20:41.740152",
      "event_type": "validation",
      "details": {
        "node_id": "0_7",
        "state": "5 * 2 = 10 (left: 2 7 10)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 / 2 = 2 (left: 2 5 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "5 - 2 = 3 (left: 3 4 7)",
          "7 - 4 = 3 (left: 2 3 5)",
          "5 * 2 = 10 (left: 4 7 10)",
          "7 + 2 = 9 (left: 4 5 9)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "5 / 2 = 2.5 (left: 2.5 4 7)",
          "7 * 2 = 14 (left: 4 5 14)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "4 + 2 = 6 (left: 5 6 7)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_7",
      "result": "PASS",
      "reason": "Value 2.001 meets threshold 3.0",
      "timestamp": "2025-05-31T18:20:41.740201",
      "event_type": "validation",
      "details": {
        "value": 2.001,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_7",
      "result": "FAIL",
      "reason": "node_id 0_7 does not match thought position.",
      "timestamp": "2025-05-31T18:20:41.740242",
      "event_type": "validation",
      "details": {
        "node_id": "0_7",
        "state": "5 * 2 = 10 (left: 2 7 10)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 / 2 = 2 (left: 2 5 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "5 - 2 = 3 (left: 3 4 7)",
          "7 - 4 = 3 (left: 2 3 5)",
          "5 * 2 = 10 (left: 4 7 10)",
          "7 + 2 = 9 (left: 4 5 9)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "5 / 2 = 2.5 (left: 2.5 4 7) ",
          "7 * 2 = 14 (left: 4 5 14)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "4 + 2 = 6 (left: 5 6 7)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_8",
      "result": "PASS",
      "reason": "Value 2.001 meets threshold 3.0",
      "timestamp": "2025-05-31T18:20:51.212940",
      "event_type": "validation",
      "details": {
        "value": 2.001,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_8",
      "result": "FAIL",
      "reason": "node_id 0_8 does not match thought position.",
      "timestamp": "2025-05-31T18:20:51.213020",
      "event_type": "validation",
      "details": {
        "node_id": "0_8",
        "state": "7 * 2 = 14 (left: 2 7 14)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 / 2 = 2 (left: 2 5 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "5 - 2 = 3 (left: 3 4 7)",
          "7 - 4 = 3 (left: 2 3 5)",
          "5 * 2 = 10 (left: 4 7 10)",
          "7 + 2 = 9 (left: 4 5 9)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "5 / 2 = 2.5 (left: 2.5 4 7) ",
          "7 * 2 = 14 (left: 4 5 14)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "4 + 2 = 6 (left: 5 6 7)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_9",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:21:03.454925",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_9",
      "result": "FAIL",
      "reason": "node_id 0_9 does not match thought position.",
      "timestamp": "2025-05-31T18:21:03.455005",
      "event_type": "validation",
      "details": {
        "node_id": "0_9",
        "state": "2 + 7 = 9 (left: 5 9)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 / 2 = 2 (left: 2 5 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "5 - 2 = 3 (left: 3 4 7)",
          "7 - 4 = 3 (left: 2 3 5)",
          "5 * 2 = 10 (left: 4 7 10)",
          "7 + 2 = 9 (left: 4 5 9)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "5 / 2 = 2.5 (left: 2.5 4 7) ",
          "7 * 2 = 14 (left: 4 5 14)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "4 + 2 = 6 (left: 5 6 7)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_10",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:21:16.184774",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_10",
      "result": "FAIL",
      "reason": "node_id 0_10 does not match thought position.",
      "timestamp": "2025-05-31T18:21:16.184853",
      "event_type": "validation",
      "details": {
        "node_id": "0_10",
        "state": "7 + 5 = 12 (left: 7 12)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 / 2 = 2 (left: 2 5 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "5 - 2 = 3 (left: 3 4 7)",
          "7 - 4 = 3 (left: 2 3 5)",
          "5 * 2 = 10 (left: 4 7 10)",
          "7 + 2 = 9 (left: 4 5 9)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "5 / 2 = 2.5 (left: 2.5 4 7) ",
          "7 * 2 = 14 (left: 4 5 14)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "4 + 2 = 6 (left: 5 6 7)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_11",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T18:21:25.156737",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_11",
      "result": "FAIL",
      "reason": "node_id 0_11 does not match thought position.",
      "timestamp": "2025-05-31T18:21:25.156815",
      "event_type": "validation",
      "details": {
        "node_id": "0_11",
        "state": "5 + 2 = 7 (left: 2 7)",
        "thoughts": [
          "2 + 4 = 6 (left: 5 6 7)",
          "2 * 4 = 8 (left: 5 7 8)",
          "4 / 2 = 2 (left: 2 5 7)",
          "7 - 2 = 5 (left: 4 5 5)",
          "5 - 2 = 3 (left: 3 4 7)",
          "7 - 4 = 3 (left: 2 3 5)",
          "5 * 2 = 10 (left: 4 7 10)",
          "7 + 2 = 9 (left: 4 5 9)",
          "7 / 2 = 3.5 (left: 3.5 4 5)",
          "5 / 2 = 2.5 (left: 2.5 4 7) ",
          "7 * 2 = 14 (left: 4 5 14)",
          "4 - 2 = 2 (left: 2 5 7)",
          "5 + 2 = 7 (left: 4 7 7)",
          "4 + 2 = 6 (left: 5 6 7)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
      "timestamp": "2025-05-31T18:21:28.378799",
      "event_type": "validation",
      "details": {
        "popped_node": "0",
        "expected_popped": "0",
        "backtrack_to": "None",
        "expected_parent": "None",
        "validation_details": [
          "Correctly popped expected node 0",
          "Correctly backtracking to parent 'None'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0",
      "result": "FAIL",
      "reason": "Only 12 of 14 children explored",
      "timestamp": "2025-05-31T18:21:28.378832",
      "event_type": "validation",
      "details": {
        "total_thoughts": 14,
        "evaluated_children": 12
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.982761",
      "event_type": "validation",
      "details": {
        "state": "2 + 4 = 6 (left: 5 6 7)",
        "thought": "2 + 4 = 6 (left: 5 6 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.982783",
      "event_type": "validation",
      "details": {
        "state": "2 * 4 = 8 (left: 5 7 8)",
        "thought": "2 * 4 = 8 (left: 5 7 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.982789",
      "event_type": "validation",
      "details": {
        "state": "4 / 2 = 2 (left: 2 5 7)",
        "thought": "4 / 2 = 2 (left: 2 5 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T18:21:29.982798",
      "event_type": "validation",
      "details": {
        "state": "7 - 2 = 5 (left: 2 5 7)",
        "expected_thought": "7 - 2 = 5 (left: 4 5 5)",
        "child_index": 3
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T18:21:29.982808",
      "event_type": "validation",
      "details": {
        "state": "5 - 2 = 3 (left: 2 3 7)",
        "expected_thought": "5 - 2 = 3 (left: 3 4 7)",
        "child_index": 4
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T18:21:29.982813",
      "event_type": "validation",
      "details": {
        "state": "7 - 2 = 5 (left: 2 5 7)",
        "expected_thought": "7 - 4 = 3 (left: 2 3 5)",
        "child_index": 5
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_6",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T18:21:29.982818",
      "event_type": "validation",
      "details": {
        "state": "7 - 4 = 3 (left: 3 5 7)",
        "expected_thought": "5 * 2 = 10 (left: 4 7 10)",
        "child_index": 6
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_7",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T18:21:29.982823",
      "event_type": "validation",
      "details": {
        "state": "5 * 2 = 10 (left: 2 7 10)",
        "expected_thought": "7 + 2 = 9 (left: 4 5 9)",
        "child_index": 7
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_8",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T18:21:29.982828",
      "event_type": "validation",
      "details": {
        "state": "7 * 2 = 14 (left: 2 7 14)",
        "expected_thought": "7 / 2 = 3.5 (left: 3.5 4 5)",
        "child_index": 8
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_9",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T18:21:29.982833",
      "event_type": "validation",
      "details": {
        "state": "2 + 7 = 9 (left: 5 9)",
        "expected_thought": "5 / 2 = 2.5 (left: 2.5 4 7)",
        "child_index": 9
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_10",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T18:21:29.982838",
      "event_type": "validation",
      "details": {
        "state": "7 + 5 = 12 (left: 7 12)",
        "expected_thought": "7 * 2 = 14 (left: 4 5 14)",
        "child_index": 10
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_11",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T18:21:29.982843",
      "event_type": "validation",
      "details": {
        "state": "5 + 2 = 7 (left: 2 7)",
        "expected_thought": "4 - 2 = 2 (left: 2 5 7)",
        "child_index": 11
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.982873",
      "event_type": "validation",
      "details": {
        "state": "5 + 6 = 11 (left: 7 11)",
        "thought": "5 + 6 = 11 (left: 7 11)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.982879",
      "event_type": "validation",
      "details": {
        "state": "6 - 5 = 1 (left: 1 7)",
        "thought": "6 - 5 = 1 (left: 1 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.982884",
      "event_type": "validation",
      "details": {
        "state": "7 - 5 = 2 (left: 2 6)",
        "thought": "7 - 5 = 2 (left: 2 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.982889",
      "event_type": "validation",
      "details": {
        "state": "5 * 6 = 30 (left: 7 30)",
        "thought": "5 * 6 = 30 (left: 7 30)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.982895",
      "event_type": "validation",
      "details": {
        "state": "7 + 5 = 12 (left: 6 12)",
        "thought": "7 + 5 = 12 (left: 6 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.982900",
      "event_type": "validation",
      "details": {
        "state": "7 - 6 = 1 (left: 1 5)",
        "thought": "7 - 6 = 1 (left: 1 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.982905",
      "event_type": "validation",
      "details": {
        "state": "6 * 7 = 42 (left: 5 42)",
        "thought": "6 * 7 = 42 (left: 5 42)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_7",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.982910",
      "event_type": "validation",
      "details": {
        "state": "7 * 5 = 35 (left: 6 35)",
        "thought": "7 * 5 = 35 (left: 6 35)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.982959",
      "event_type": "validation",
      "details": {
        "state": "5 + 7 = 12 (left: 8 12)",
        "thought": "5 + 7 = 12 (left: 8 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.982965",
      "event_type": "validation",
      "details": {
        "state": "7 - 5 = 2 (left: 2 8)",
        "thought": "7 - 5 = 2 (left: 2 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.982970",
      "event_type": "validation",
      "details": {
        "state": "8 - 5 = 3 (left: 3 7)",
        "thought": "8 - 5 = 3 (left: 3 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.982975",
      "event_type": "validation",
      "details": {
        "state": "8 - 7 = 1 (left: 1 5)",
        "thought": "8 - 7 = 1 (left: 1 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_4",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T18:21:29.982982",
      "event_type": "validation",
      "details": {
        "state": "7 + 5 = 12 (left: 6 12)",
        "expected_thought": "7 + 5 = 12 (left: 8 12)",
        "child_index": 4
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_5",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T18:21:29.982988",
      "event_type": "validation",
      "details": {
        "state": "7 - 6 = 1 (left: 1 5)",
        "expected_thought": "8 / 5 = 1.6 (left: 1.6 7)",
        "child_index": 5
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_6",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T18:21:29.982993",
      "event_type": "validation",
      "details": {
        "state": "6 * 7 = 42 (left: 5 42)",
        "expected_thought": "7 / 5 = 1.4 (left: 1.4 8)",
        "child_index": 6
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_7",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T18:21:29.982998",
      "event_type": "validation",
      "details": {
        "state": "7 * 5 = 35 (left: 6 35)",
        "expected_thought": "8 * 5 = 40 (left: 7 40)",
        "child_index": 7
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.983045",
      "event_type": "validation",
      "details": {
        "state": "2 + 5 = 7 (left: 7 7)",
        "thought": "2 + 5 = 7 (left: 7 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.983050",
      "event_type": "validation",
      "details": {
        "state": "5 - 2 = 3 (left: 3 7)",
        "thought": "5 - 2 = 3 (left: 3 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.983055",
      "event_type": "validation",
      "details": {
        "state": "7 - 2 = 5 (left: 5 5)",
        "thought": "7 - 2 = 5 (left: 5 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.983060",
      "event_type": "validation",
      "details": {
        "state": "7 - 5 = 2 (left: 2 2)",
        "thought": "7 - 5 = 2 (left: 2 2)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.983064",
      "event_type": "validation",
      "details": {
        "state": "2 * 5 = 10 (left: 7 10)",
        "thought": "2 * 5 = 10 (left: 7 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.983069",
      "event_type": "validation",
      "details": {
        "state": "7 / 2 = 3.5 (left: 3.5 5)",
        "thought": "7 / 2 = 3.5 (left: 3.5 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.983074",
      "event_type": "validation",
      "details": {
        "state": "5 / 2 = 2.5 (left: 2.5 7)",
        "thought": "5 / 2 = 2.5 (left: 2.5 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_7",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.983079",
      "event_type": "validation",
      "details": {
        "state": "7 / 5 = 1.4 (left: 1.4 2)",
        "thought": "7 / 5 = 1.4 (left: 1.4 2)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.983118",
      "event_type": "validation",
      "details": {
        "state": "2 + 5 = 7 (left: 7 7)",
        "thought": "2 + 5 = 7 (left: 7 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.983123",
      "event_type": "validation",
      "details": {
        "state": "5 + 2 = 7 (left: 7 7)",
        "thought": "5 + 2 = 7 (left: 7 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_2",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T18:21:29.983129",
      "event_type": "validation",
      "details": {
        "state": "7 - 5 = 2 (left: 2 2)",
        "expected_thought": "7 - 2 = 5 (left: 5 5)",
        "child_index": 2
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.983134",
      "event_type": "validation",
      "details": {
        "state": "7 - 5 = 2 (left: 2 2)",
        "thought": "7 - 5 = 2 (left: 2 2)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.983139",
      "event_type": "validation",
      "details": {
        "state": "7 / 2 = 3.5 (left: 3.5 5)",
        "thought": "7 / 2 = 3.5 (left: 3.5 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.983143",
      "event_type": "validation",
      "details": {
        "state": "2 * 5 = 10 (left: 7 10)",
        "thought": "2 * 5 = 10 (left: 7 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_6",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T18:21:29.983149",
      "event_type": "validation",
      "details": {
        "state": "7 * 5 = 35 (left: 6 35)",
        "expected_thought": "5 * 2 = 10 (left: 7 10)",
        "child_index": 6
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_6_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.983187",
      "event_type": "validation",
      "details": {
        "state": "3 + 5 = 8 (left: 7 8)",
        "thought": "3 + 5 = 8 (left: 7 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_6_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.983192",
      "event_type": "validation",
      "details": {
        "state": "5 - 3 = 2 (left: 2 7)",
        "thought": "5 - 3 = 2 (left: 2 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_6_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.983197",
      "event_type": "validation",
      "details": {
        "state": "7 - 3 = 4 (left: 4 5)",
        "thought": "7 - 3 = 4 (left: 4 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_6_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.983202",
      "event_type": "validation",
      "details": {
        "state": "7 - 5 = 2 (left: 2 3)",
        "thought": "7 - 5 = 2 (left: 2 3)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_6_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T18:21:29.983207",
      "event_type": "validation",
      "details": {
        "state": "3 * 5 = 15 (left: 7 15)",
        "thought": "3 * 5 = 15 (left: 7 15)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_6_5",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T18:21:29.983213",
      "event_type": "validation",
      "details": {
        "state": "5 * 7 = 35 (left: 6 35)",
        "expected_thought": "5 * 7 = 35 (left: 3 35)",
        "child_index": 5
      }
    }
  ],
  "legacy_log": [
    {
      "event": "push",
      "node_id": "0",
      "issues": [],
      "log": []
    },
    {
      "event": "push",
      "node_id": "0_0",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_0 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '2 + 4 = 6 (left: 5 6 7)' found in parent's thoughts",
        "\u2705 Node 0_0 matches thought position.",
        "\u2705 State consistency check passed for node 0_0"
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_4 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_7",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_7 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_7 matches thought position."
      ]
    },
    {
      "event": "pop",
      "node_id": "",
      "issues": [
        "\u274c All children of node 0_1 were not explored \u2014 invalid reason for backtracking.",
        "\u274c All children of node 0_6 were not explored \u2014 invalid reason for backtracking.",
        "\u274c All children of node 0 were not explored \u2014 invalid reason for backtracking."
      ],
      "log": [
        "\u2705 Popped 0_0 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_0; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_0 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_1 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_1; Correctly backtracking to parent '0'",
        "\u2705 Popped 0_2 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_2; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_2 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_3 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_3; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_3 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_6 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_6; Correctly backtracking to parent '0'",
        "\u2705 Popped 0 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to 'None'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'"
      ]
    },
    {
      "event": "push",
      "node_id": "0_1",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_1 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '2 * 4 = 8 (left: 5 7 8)' found in parent's thoughts",
        "\u2705 Sequential child node validation: pushing 0_1 after popping 0_0 is correct.",
        "\u2705 Node 0_1 matches thought position.",
        "\u2705 State consistency check passed for node 0_1"
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_4",
      "issues": [
        "Order error: node_id 0_1_4 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_1_4 with value 0.003 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_5",
      "issues": [
        "Order error: node_id 0_1_5 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_1_5 with value 0.003 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_6",
      "issues": [
        "Order error: node_id 0_1_6 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_1_6 with value 0.003 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_7",
      "issues": [
        "Order error: node_id 0_1_7 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_1_7 with value 0.003 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_2 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '4 / 2 = 2 (left: 2 5 7)' found in parent's thoughts",
        "\u2705 Sequential child node validation: pushing 0_2 after popping 0_1 is correct.",
        "\u2705 Node 0_2 matches thought position.",
        "\u2705 State consistency check passed for node 0_2"
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_7",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_7 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_7 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3",
      "issues": [
        "State validation error: Last thought '7 - 2 = 5 (left: 2 5 7)' not found in parent's thoughts",
        "State '7 - 2 = 5 (left: 2 5 7)' is not found in thoughts for node 0_3",
        "Order error: node_id 0_3 does not match thought position."
      ],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_3 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State consistency check passed for node 0_3"
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_2",
      "issues": [
        "Order error: node_id 0_3_2 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_3_2 with value 0.003 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_6",
      "issues": [
        "Order error: node_id 0_3_6 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_3_6 with value 0.003 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4",
      "issues": [
        "State '5 - 2 = 3 (left: 2 3 7)' is not found in thoughts for node 0_4",
        "Order error: node_id 0_4 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_4 with value 2.001 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5",
      "issues": [
        "Order error: node_id 0_5 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_5 with value 2.001 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_6",
      "issues": [
        "State validation error: Last thought '7 - 4 = 3 (left: 3 5 7)' not found in parent's thoughts",
        "Order error: node_id 0_6 does not match thought position."
      ],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_6 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State consistency check passed for node 0_6"
      ]
    },
    {
      "event": "push",
      "node_id": "0_6_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_6_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_6_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_6_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_6_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_6_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_6_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_6_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_6_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_6_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_6_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_6_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_6_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_6_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_6_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_6_5",
      "issues": [
        "Order error: node_id 0_6_5 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_6_5 with value 0.003 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_7",
      "issues": [
        "State '5 * 2 = 10 (left: 2 7 10)' is not found in thoughts for node 0_7",
        "Order error: node_id 0_7 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_7 with value 2.001 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_8",
      "issues": [
        "Order error: node_id 0_8 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_8 with value 2.001 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_9",
      "issues": [
        "Order error: node_id 0_9 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_9 with value 0.003 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_10",
      "issues": [
        "Order error: node_id 0_10 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_10 with value 0.003 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_11",
      "issues": [
        "Order error: node_id 0_11 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_11 with value 0.003 less than 3.0 pruned successfully."
      ]
    }
  ],
  "tree_trace": {
    "0": {
      "state": null,
      "thought": "2 + 4 = 6 (left: 5 6 7)\n2 * 4 = 8 (left: 5 7 8)\n4 / 2 = 2 (left: 2 5 7)\n7 - 2 = 5 (left: 4 5 5)\n5 - 2 = 3 (left: 3 4 7)\n7 - 4 = 3 (left: 2 3 5)\n5 * 2 = 10 (left: 4 7 10)\n7 + 2 = 9 (left: 4 5 9)\n7 / 2 = 3.5 (left: 3.5 4 5)\n5 / 2 = 2.5 (left: 2.5 4 7) \n7 * 2 = 14 (left: 4 5 14)\n4 - 2 = 2 (left: 2 5 7)\n5 + 2 = 7 (left: 4 7 7)\n4 + 2 = 6 (left: 5 6 7)",
      "value": null,
      "opening_remark": null,
      "children": {
        "0_0": {
          "state": "2 + 4 = 6 (left: 5 6 7)",
          "thought": "5 + 6 = 11 (left: 7 11)\n6 - 5 = 1 (left: 1 7)\n7 - 5 = 2 (left: 2 6)\n5 * 6 = 30 (left: 7 30)\n7 + 5 = 12 (left: 6 12)\n7 - 6 = 1 (left: 1 5)\n6 * 7 = 42 (left: 5 42)\n7 * 5 = 35 (left: 6 35)",
          "value": 3.0,
          "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
          "children": {
            "0_0_0": {
              "state": "2 + 4 = 6 (left: 5 6 7)\n5 + 6 = 11 (left: 7 11)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_1": {
              "state": "2 + 4 = 6 (left: 5 6 7)\n6 - 5 = 1 (left: 1 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_2": {
              "state": "2 + 4 = 6 (left: 5 6 7)\n7 - 5 = 2 (left: 2 6)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_3": {
              "state": "2 + 4 = 6 (left: 5 6 7)\n5 * 6 = 30 (left: 7 30)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_4": {
              "state": "2 + 4 = 6 (left: 5 6 7)\n7 + 5 = 12 (left: 6 12)",
              "thought": null,
              "value": 1.002,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_5": {
              "state": "2 + 4 = 6 (left: 5 6 7)\n7 - 6 = 1 (left: 1 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_6": {
              "state": "2 + 4 = 6 (left: 5 6 7)\n6 * 7 = 42 (left: 5 42)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_7": {
              "state": "2 + 4 = 6 (left: 5 6 7)\n7 * 5 = 35 (left: 6 35)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_1": {
          "state": "2 * 4 = 8 (left: 5 7 8)",
          "thought": "5 + 7 = 12 (left: 8 12)\n7 - 5 = 2 (left: 2 8)\n8 - 5 = 3 (left: 3 7)\n8 - 7 = 1 (left: 1 5)\n7 + 5 = 12 (left: 8 12)\n8 / 5 = 1.6 (left: 1.6 7)\n7 / 5 = 1.4 (left: 1.4 8)\n8 * 5 = 40 (left: 7 40)\n7 * 5 = 35 (left: 8 35)",
          "value": 3.0,
          "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
          "children": {
            "0_1_0": {
              "state": "2 * 4 = 8 (left: 5 7 8)\n5 + 7 = 12 (left: 8 12)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_1": {
              "state": "2 * 4 = 8 (left: 5 7 8)\n7 - 5 = 2 (left: 2 8)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_2": {
              "state": "2 * 4 = 8 (left: 5 7 8)\n8 - 5 = 3 (left: 3 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_3": {
              "state": "2 * 4 = 8 (left: 5 7 8)\n8 - 7 = 1 (left: 1 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_4": {
              "state": "2 * 4 = 8 (left: 5 7 8)\n7 + 5 = 12 (left: 6 12)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_5": {
              "state": "2 * 4 = 8 (left: 5 7 8)\n7 - 6 = 1 (left: 1 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_6": {
              "state": "2 * 4 = 8 (left: 5 7 8)\n6 * 7 = 42 (left: 5 42)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_7": {
              "state": "2 * 4 = 8 (left: 5 7 8)\n7 * 5 = 35 (left: 6 35)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_2": {
          "state": "4 / 2 = 2 (left: 2 5 7)",
          "thought": "2 + 5 = 7 (left: 7 7)\n5 - 2 = 3 (left: 3 7)\n7 - 2 = 5 (left: 5 5)\n7 - 5 = 2 (left: 2 2)\n2 * 5 = 10 (left: 7 10)\n7 / 2 = 3.5 (left: 3.5 5)\n5 / 2 = 2.5 (left: 2.5 7)\n7 / 5 = 1.4 (left: 1.4 2)",
          "value": 3.0,
          "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
          "children": {
            "0_2_0": {
              "state": "4 / 2 = 2 (left: 2 5 7)\n2 + 5 = 7 (left: 7 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_1": {
              "state": "4 / 2 = 2 (left: 2 5 7)\n5 - 2 = 3 (left: 3 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_2": {
              "state": "4 / 2 = 2 (left: 2 5 7)\n7 - 2 = 5 (left: 5 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_3": {
              "state": "4 / 2 = 2 (left: 2 5 7)\n7 - 5 = 2 (left: 2 2)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_4": {
              "state": "4 / 2 = 2 (left: 2 5 7)\n2 * 5 = 10 (left: 7 10)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_5": {
              "state": "4 / 2 = 2 (left: 2 5 7)\n7 / 2 = 3.5 (left: 3.5 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_6": {
              "state": "4 / 2 = 2 (left: 2 5 7)\n5 / 2 = 2.5 (left: 2.5 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_7": {
              "state": "4 / 2 = 2 (left: 2 5 7)\n7 / 5 = 1.4 (left: 1.4 2)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_3": {
          "state": "7 - 2 = 5 (left: 2 5 7)",
          "thought": "2 + 5 = 7 (left: 7 7)\n5 + 2 = 7 (left: 7 7)\n7 - 2 = 5 (left: 5 5)\n7 - 5 = 2 (left: 2 2)\n7 / 2 = 3.5 (left: 3.5 5)\n2 * 5 = 10 (left: 7 10)\n5 * 2 = 10 (left: 7 10)",
          "value": 3.0,
          "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
          "children": {
            "0_3_0": {
              "state": "7 - 2 = 5 (left: 2 5 7)\n2 + 5 = 7 (left: 7 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_1": {
              "state": "7 - 2 = 5 (left: 2 5 7)\n5 + 2 = 7 (left: 7 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_2": {
              "state": "7 - 2 = 5 (left: 2 5 7)\n7 - 5 = 2 (left: 2 2)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_3": {
              "state": "7 - 2 = 5 (left: 2 5 7)\n7 - 5 = 2 (left: 2 2)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_4": {
              "state": "7 - 2 = 5 (left: 2 5 7)\n7 / 2 = 3.5 (left: 3.5 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_5": {
              "state": "7 - 2 = 5 (left: 2 5 7)\n2 * 5 = 10 (left: 7 10)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_6": {
              "state": "7 - 2 = 5 (left: 2 5 7)\n7 * 5 = 35 (left: 6 35)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_4": {
          "state": "5 - 2 = 3 (left: 2 3 7)",
          "thought": null,
          "value": 2.001,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_5": {
          "state": "7 - 2 = 5 (left: 2 5 7)",
          "thought": null,
          "value": 2.001,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_6": {
          "state": "7 - 4 = 3 (left: 3 5 7)",
          "thought": "3 + 5 = 8 (left: 7 8)\n5 - 3 = 2 (left: 2 7)\n7 - 3 = 4 (left: 4 5)\n7 - 5 = 2 (left: 2 3)\n3 * 5 = 15 (left: 7 15)\n5 * 7 = 35 (left: 3 35)\n7 / 3 = 2.33 (left: 2.33 5)\n5 / 3 = 1.67 (left: 1.67 7)",
          "value": 3.0,
          "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
          "children": {
            "0_6_0": {
              "state": "7 - 4 = 3 (left: 3 5 7)\n3 + 5 = 8 (left: 7 8)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_6_1": {
              "state": "7 - 4 = 3 (left: 3 5 7)\n5 - 3 = 2 (left: 2 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_6_2": {
              "state": "7 - 4 = 3 (left: 3 5 7)\n7 - 3 = 4 (left: 4 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_6_3": {
              "state": "7 - 4 = 3 (left: 3 5 7)\n7 - 5 = 2 (left: 2 3)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_6_4": {
              "state": "7 - 4 = 3 (left: 3 5 7)\n3 * 5 = 15 (left: 7 15)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_6_5": {
              "state": "7 - 4 = 3 (left: 3 5 7)\n5 * 7 = 35 (left: 6 35)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_7": {
          "state": "5 * 2 = 10 (left: 2 7 10)",
          "thought": null,
          "value": 2.001,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_8": {
          "state": "7 * 2 = 14 (left: 2 7 14)",
          "thought": null,
          "value": 2.001,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_9": {
          "state": "2 + 7 = 9 (left: 5 9)",
          "thought": null,
          "value": 0.003,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_10": {
          "state": "7 + 5 = 12 (left: 7 12)",
          "thought": null,
          "value": 0.003,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_11": {
          "state": "5 + 2 = 7 (left: 2 7)",
          "thought": null,
          "value": 0.003,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        }
      },
      "closing_remark": null,
      "backtracked": false
    }
  }
}