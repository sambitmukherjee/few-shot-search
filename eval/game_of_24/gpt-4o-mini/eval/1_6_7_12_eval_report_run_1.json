{
  "summary": {
    "total_checks": 30,
    "passed": 30,
    "failed": 0
  },
  "checks_by_type": {
    "pruning": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pruning",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-30T11:29:28.468130",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        }
      ]
    },
    "child_id_assignment": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "node_id 0_0 matches thought position.",
          "timestamp": "2025-05-30T11:29:28.468204",
          "event_type": "validation",
          "details": {
            "node_id": "0_0",
            "state": "1 + 6 = 7 (left: 7 7 12)",
            "thoughts": [
              "1 + 6 = 7 (left: 7 7 12)",
              "7 - 1 = 6 (left: 6 6 12)",
              "12 - 1 = 11 (left: 6 7 11)",
              "12 - 6 = 6 (left: 1 6 7)",
              "12 / 6 = 2 (left: 1 2 7)",
              "12 - 7 = 5 (left: 1 5 6)",
              "7 * 6 = 42 (left: 1 12 42)",
              "12 * 7 = 84 (left: 1 6 84)",
              "12 * 6 = 72 (left: 1 7 72)",
              "7 / 1 = 7 (left: 6 7 12)",
              "6 / 1 = 6 (left: 6 7 12)",
              "12 / 1 = 12 (left: 6 7 12)",
              "7 - 6 = 1 (left: 1 1 12)",
              "7 * 1 = 7 (left: 6 7 12)",
              "6 * 1 = 6 (left: 6 7 12)",
              "12 * 1 = 12 (left: 6 7 12)",
              "6 + 1 = 7 (left: 7 7 12)",
              "12 + 1 = 13 (left: 6 7 13)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "node_id 0_1 matches thought position.",
          "timestamp": "2025-05-30T11:29:34.910849",
          "event_type": "validation",
          "details": {
            "node_id": "0_1",
            "state": "7 - 1 = 6 (left: 6 6 12)",
            "thoughts": [
              "1 + 6 = 7 (left: 7 7 12)",
              "7 - 1 = 6 (left: 6 6 12)",
              "12 - 1 = 11 (left: 6 7 11)",
              "12 - 6 = 6 (left: 1 6 7)",
              "12 / 6 = 2 (left: 1 2 7)",
              "12 - 7 = 5 (left: 1 5 6)",
              "7 * 6 = 42 (left: 1 12 42)",
              "12 * 7 = 84 (left: 1 6 84)",
              "12 * 6 = 72 (left: 1 7 72)",
              "7 / 1 = 7 (left: 6 7 12)",
              "6 / 1 = 6 (left: 6 7 12)",
              "12 / 1 = 12 (left: 6 7 12)",
              "7 - 6 = 1 (left: 1 1 12)",
              "7 * 1 = 7 (left: 6 7 12)",
              "6 * 1 = 6 (left: 6 7 12)",
              "12 * 1 = 12 (left: 6 7 12)",
              "6 + 1 = 7 (left: 7 7 12)",
              "12 + 1 = 13 (left: 6 7 13)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "node_id 0_1_0 matches thought position.",
          "timestamp": "2025-05-30T11:29:52.429413",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_0",
            "state": "6 + 6 = 12 (left: 12 12)",
            "thoughts": [
              "6 + 6 = 12 (left: 12 12)",
              "6 * 6 = 36 (left: 12 36)",
              "12 - 6 = 6 (left: 6 6)",
              "12 / 6 = 2 (left: 2 6)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_0_0",
          "result": "PASS",
          "reason": "node_id 0_1_0_0 matches thought position.",
          "timestamp": "2025-05-30T11:30:09.668187",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_0_0",
            "state": "12 + 12 = 24 (left: 24)",
            "thoughts": [
              "12 + 12 = 24 (left: 24)",
              "12 / 12 = 1 (left: 1)",
              "12 - 12 = 0 (left: 0)",
              "12 * 12 = 144 (left: 144)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_0_0_0",
          "result": "PASS",
          "reason": "node_id 0_1_0_0_0 matches thought position.",
          "timestamp": "2025-05-30T11:30:26.427917",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_0_0_0",
            "state": "Answer: ((7 - 1) + 6) + 12 = 24",
            "thoughts": [
              "Answer: ((7 - 1) + 6) + 12 = 24"
            ]
          }
        }
      ]
    },
    "pseudo_recursive_call": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Value 60.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T11:29:34.910753",
          "event_type": "validation",
          "details": {
            "value": 60.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "Value 60.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T11:29:52.429301",
          "event_type": "validation",
          "details": {
            "value": 60.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_1_0_0",
          "result": "PASS",
          "reason": "Value 40.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T11:30:09.668082",
          "event_type": "validation",
          "details": {
            "value": 40.0,
            "threshold": 3.0
          }
        }
      ]
    },
    "child_state": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "child_state",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State validation passed: Last thought '7 - 1 = 6 (left: 6 6 12)' found in parent's thoughts",
          "timestamp": "2025-05-30T11:29:34.910807",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '7 - 1 = 6 (left: 6 6 12)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "1 + 6 = 7 (left: 7 7 12)",
              "7 - 1 = 6 (left: 6 6 12)",
              "12 - 1 = 11 (left: 6 7 11)",
              "12 - 6 = 6 (left: 1 6 7)",
              "12 / 6 = 2 (left: 1 2 7)",
              "12 - 7 = 5 (left: 1 5 6)",
              "7 * 6 = 42 (left: 1 12 42)",
              "12 * 7 = 84 (left: 1 6 84)",
              "12 * 6 = 72 (left: 1 7 72)",
              "7 / 1 = 7 (left: 6 7 12)",
              "6 / 1 = 6 (left: 6 7 12)",
              "12 / 1 = 12 (left: 6 7 12)",
              "7 - 6 = 1 (left: 1 1 12)",
              "7 * 1 = 7 (left: 6 7 12)",
              "6 * 1 = 6 (left: 6 7 12)",
              "12 * 1 = 12 (left: 6 7 12)",
              "6 + 1 = 7 (left: 7 7 12)",
              "12 + 1 = 13 (left: 6 7 13)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "State validation passed: Last thought '6 + 6 = 12 (left: 12 12)' found in parent's thoughts; Previous thought '7 - 1 = 6 (left: 6 6 12)' found in parent's state",
          "timestamp": "2025-05-30T11:29:52.429359",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '6 + 6 = 12 (left: 12 12)' found in parent's thoughts",
              "Previous thought '7 - 1 = 6 (left: 6 6 12)' found in parent's state"
            ],
            "parent_thoughts": [
              "6 + 6 = 12 (left: 12 12)",
              "6 * 6 = 36 (left: 12 36)",
              "12 - 6 = 6 (left: 6 6)",
              "12 / 6 = 2 (left: 2 6)"
            ],
            "parent_state": [
              "7 - 1 = 6 (left: 6 6 12)"
            ]
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_1_0_0",
          "result": "PASS",
          "reason": "State validation passed: Last thought '12 + 12 = 24 (left: 24)' found in parent's thoughts; Previous thought '7 - 1 = 6 (left: 6 6 12)' found in parent's state; Previous thought '6 + 6 = 12 (left: 12 12)' found in parent's state",
          "timestamp": "2025-05-30T11:30:09.668144",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '12 + 12 = 24 (left: 24)' found in parent's thoughts",
              "Previous thought '7 - 1 = 6 (left: 6 6 12)' found in parent's state",
              "Previous thought '6 + 6 = 12 (left: 12 12)' found in parent's state"
            ],
            "parent_thoughts": [
              "12 + 12 = 24 (left: 24)",
              "12 / 12 = 1 (left: 1)",
              "12 - 12 = 0 (left: 0)",
              "12 * 12 = 144 (left: 144)"
            ],
            "parent_state": [
              "7 - 1 = 6 (left: 6 6 12)",
              "6 + 6 = 12 (left: 12 12)"
            ]
          }
        }
      ]
    },
    "node_state": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "node_state",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T11:29:41.408882",
          "event_type": "validation",
          "details": {
            "expected_state": "7 - 1 = 6 (left: 6 6 12)",
            "actual_state": "7 - 1 = 6 (left: 6 6 12)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T11:29:59.819160",
          "event_type": "validation",
          "details": {
            "expected_state": "7 - 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
            "actual_state": "7 - 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_1_0_0",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T11:30:18.388401",
          "event_type": "validation",
          "details": {
            "expected_state": "7 - 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
            "actual_state": "7 - 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)"
          }
        }
      ]
    },
    "backtracking_I": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_I",
          "node_id": "0_1_0_0",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_1_0_0; Correctly backtracking to parent '0_1_0'",
          "timestamp": "2025-05-30T11:30:30.760907",
          "event_type": "validation",
          "details": {
            "popped_node": "0_1_0_0",
            "expected_popped": "0_1_0_0",
            "backtrack_to": "0_1_0",
            "expected_parent": "0_1_0",
            "validation_details": [
              "Correctly popped expected node 0_1_0_0",
              "Correctly backtracking to parent '0_1_0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_1_0; Correctly backtracking to parent '0_1'",
          "timestamp": "2025-05-30T11:30:33.210132",
          "event_type": "validation",
          "details": {
            "popped_node": "0_1_0",
            "expected_popped": "0_1_0",
            "backtrack_to": "0_1",
            "expected_parent": "0_1",
            "validation_details": [
              "Correctly popped expected node 0_1_0",
              "Correctly backtracking to parent '0_1'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_1; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-30T11:30:35.903647",
          "event_type": "validation",
          "details": {
            "popped_node": "0_1",
            "expected_popped": "0_1",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_1",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
          "timestamp": "2025-05-30T11:30:40.107235",
          "event_type": "validation",
          "details": {
            "popped_node": "0",
            "expected_popped": "0",
            "backtrack_to": "None",
            "expected_parent": "None",
            "validation_details": [
              "Correctly popped expected node 0",
              "Correctly backtracking to parent 'None'"
            ]
          }
        }
      ]
    },
    "base_case": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "base_case",
          "node_id": "0_1_0_0",
          "result": "PASS",
          "reason": "Level limit 3 exceeded - valid backtrack",
          "timestamp": "2025-05-30T11:30:30.760985",
          "event_type": "validation",
          "details": {
            "stack_size": 3,
            "level_limit": 3
          }
        }
      ]
    },
    "backtracking_II": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_II",
          "node_id": "0_1_0_0",
          "result": "PASS",
          "reason": "Correct True flag used in True backtrack mode",
          "timestamp": "2025-05-30T11:30:30.761000",
          "event_type": "validation",
          "details": {
            "flag": "True",
            "true_backtrack_mode": true
          }
        },
        {
          "check_name": "backtracking_II",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "Correct True flag used in True backtrack mode",
          "timestamp": "2025-05-30T11:30:33.210165",
          "event_type": "validation",
          "details": {
            "flag": "True",
            "true_backtrack_mode": true
          }
        },
        {
          "check_name": "backtracking_II",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Correct True flag used in True backtrack mode",
          "timestamp": "2025-05-30T11:30:35.903689",
          "event_type": "validation",
          "details": {
            "flag": "True",
            "true_backtrack_mode": true
          }
        },
        {
          "check_name": "backtracking_II",
          "node_id": "0",
          "result": "PASS",
          "reason": "Correct True flag used in True backtrack mode",
          "timestamp": "2025-05-30T11:30:40.107273",
          "event_type": "validation",
          "details": {
            "flag": "True",
            "true_backtrack_mode": true
          }
        }
      ]
    },
    "looping_order": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "looping_order",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:30:41.190703",
          "event_type": "validation",
          "details": {
            "state": "1 + 6 = 7 (left: 7 7 12)",
            "thought": "1 + 6 = 7 (left: 7 7 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:30:41.190740",
          "event_type": "validation",
          "details": {
            "state": "7 - 1 = 6 (left: 6 6 12)",
            "thought": "7 - 1 = 6 (left: 6 6 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:30:41.190782",
          "event_type": "validation",
          "details": {
            "state": "6 + 6 = 12 (left: 12 12)",
            "thought": "6 + 6 = 12 (left: 12 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:30:41.190805",
          "event_type": "validation",
          "details": {
            "state": "12 + 12 = 24 (left: 24)",
            "thought": "12 + 12 = 24 (left: 24)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_0_0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:30:41.190827",
          "event_type": "validation",
          "details": {
            "state": "Answer: ((7 - 1) + 6) + 12 = 24",
            "thought": "Answer: ((7 - 1) + 6) + 12 = 24"
          }
        }
      ]
    },
    "final_answer": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "final_answer",
          "node_id": "final",
          "result": "PASS",
          "reason": "Result 24 matches expected answer 24.0",
          "timestamp": "2025-05-30T11:30:41.191102",
          "event_type": "validation",
          "details": {
            "result": 24,
            "expected": 24.0,
            "difference": 0.0
          }
        }
      ]
    },
    "valid_search_trace": {
      "success_trace": true
    }
  },
  "detailed_results": [
    {
      "check_name": "pruning",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-30T11:29:28.468130",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "node_id 0_0 matches thought position.",
      "timestamp": "2025-05-30T11:29:28.468204",
      "event_type": "validation",
      "details": {
        "node_id": "0_0",
        "state": "1 + 6 = 7 (left: 7 7 12)",
        "thoughts": [
          "1 + 6 = 7 (left: 7 7 12)",
          "7 - 1 = 6 (left: 6 6 12)",
          "12 - 1 = 11 (left: 6 7 11)",
          "12 - 6 = 6 (left: 1 6 7)",
          "12 / 6 = 2 (left: 1 2 7)",
          "12 - 7 = 5 (left: 1 5 6)",
          "7 * 6 = 42 (left: 1 12 42)",
          "12 * 7 = 84 (left: 1 6 84)",
          "12 * 6 = 72 (left: 1 7 72)",
          "7 / 1 = 7 (left: 6 7 12)",
          "6 / 1 = 6 (left: 6 7 12)",
          "12 / 1 = 12 (left: 6 7 12)",
          "7 - 6 = 1 (left: 1 1 12)",
          "7 * 1 = 7 (left: 6 7 12)",
          "6 * 1 = 6 (left: 6 7 12)",
          "12 * 1 = 12 (left: 6 7 12)",
          "6 + 1 = 7 (left: 7 7 12)",
          "12 + 1 = 13 (left: 6 7 13)"
        ]
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Value 60.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T11:29:34.910753",
      "event_type": "validation",
      "details": {
        "value": 60.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State validation passed: Last thought '7 - 1 = 6 (left: 6 6 12)' found in parent's thoughts",
      "timestamp": "2025-05-30T11:29:34.910807",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '7 - 1 = 6 (left: 6 6 12)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "1 + 6 = 7 (left: 7 7 12)",
          "7 - 1 = 6 (left: 6 6 12)",
          "12 - 1 = 11 (left: 6 7 11)",
          "12 - 6 = 6 (left: 1 6 7)",
          "12 / 6 = 2 (left: 1 2 7)",
          "12 - 7 = 5 (left: 1 5 6)",
          "7 * 6 = 42 (left: 1 12 42)",
          "12 * 7 = 84 (left: 1 6 84)",
          "12 * 6 = 72 (left: 1 7 72)",
          "7 / 1 = 7 (left: 6 7 12)",
          "6 / 1 = 6 (left: 6 7 12)",
          "12 / 1 = 12 (left: 6 7 12)",
          "7 - 6 = 1 (left: 1 1 12)",
          "7 * 1 = 7 (left: 6 7 12)",
          "6 * 1 = 6 (left: 6 7 12)",
          "12 * 1 = 12 (left: 6 7 12)",
          "6 + 1 = 7 (left: 7 7 12)",
          "12 + 1 = 13 (left: 6 7 13)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "node_id 0_1 matches thought position.",
      "timestamp": "2025-05-30T11:29:34.910849",
      "event_type": "validation",
      "details": {
        "node_id": "0_1",
        "state": "7 - 1 = 6 (left: 6 6 12)",
        "thoughts": [
          "1 + 6 = 7 (left: 7 7 12)",
          "7 - 1 = 6 (left: 6 6 12)",
          "12 - 1 = 11 (left: 6 7 11)",
          "12 - 6 = 6 (left: 1 6 7)",
          "12 / 6 = 2 (left: 1 2 7)",
          "12 - 7 = 5 (left: 1 5 6)",
          "7 * 6 = 42 (left: 1 12 42)",
          "12 * 7 = 84 (left: 1 6 84)",
          "12 * 6 = 72 (left: 1 7 72)",
          "7 / 1 = 7 (left: 6 7 12)",
          "6 / 1 = 6 (left: 6 7 12)",
          "12 / 1 = 12 (left: 6 7 12)",
          "7 - 6 = 1 (left: 1 1 12)",
          "7 * 1 = 7 (left: 6 7 12)",
          "6 * 1 = 6 (left: 6 7 12)",
          "12 * 1 = 12 (left: 6 7 12)",
          "6 + 1 = 7 (left: 7 7 12)",
          "12 + 1 = 13 (left: 6 7 13)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T11:29:41.408882",
      "event_type": "validation",
      "details": {
        "expected_state": "7 - 1 = 6 (left: 6 6 12)",
        "actual_state": "7 - 1 = 6 (left: 6 6 12)"
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "Value 60.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T11:29:52.429301",
      "event_type": "validation",
      "details": {
        "value": 60.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "State validation passed: Last thought '6 + 6 = 12 (left: 12 12)' found in parent's thoughts; Previous thought '7 - 1 = 6 (left: 6 6 12)' found in parent's state",
      "timestamp": "2025-05-30T11:29:52.429359",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '6 + 6 = 12 (left: 12 12)' found in parent's thoughts",
          "Previous thought '7 - 1 = 6 (left: 6 6 12)' found in parent's state"
        ],
        "parent_thoughts": [
          "6 + 6 = 12 (left: 12 12)",
          "6 * 6 = 36 (left: 12 36)",
          "12 - 6 = 6 (left: 6 6)",
          "12 / 6 = 2 (left: 2 6)"
        ],
        "parent_state": [
          "7 - 1 = 6 (left: 6 6 12)"
        ]
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "node_id 0_1_0 matches thought position.",
      "timestamp": "2025-05-30T11:29:52.429413",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_0",
        "state": "6 + 6 = 12 (left: 12 12)",
        "thoughts": [
          "6 + 6 = 12 (left: 12 12)",
          "6 * 6 = 36 (left: 12 36)",
          "12 - 6 = 6 (left: 6 6)",
          "12 / 6 = 2 (left: 2 6)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T11:29:59.819160",
      "event_type": "validation",
      "details": {
        "expected_state": "7 - 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
        "actual_state": "7 - 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)"
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_1_0_0",
      "result": "PASS",
      "reason": "Value 40.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T11:30:09.668082",
      "event_type": "validation",
      "details": {
        "value": 40.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_1_0_0",
      "result": "PASS",
      "reason": "State validation passed: Last thought '12 + 12 = 24 (left: 24)' found in parent's thoughts; Previous thought '7 - 1 = 6 (left: 6 6 12)' found in parent's state; Previous thought '6 + 6 = 12 (left: 12 12)' found in parent's state",
      "timestamp": "2025-05-30T11:30:09.668144",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '12 + 12 = 24 (left: 24)' found in parent's thoughts",
          "Previous thought '7 - 1 = 6 (left: 6 6 12)' found in parent's state",
          "Previous thought '6 + 6 = 12 (left: 12 12)' found in parent's state"
        ],
        "parent_thoughts": [
          "12 + 12 = 24 (left: 24)",
          "12 / 12 = 1 (left: 1)",
          "12 - 12 = 0 (left: 0)",
          "12 * 12 = 144 (left: 144)"
        ],
        "parent_state": [
          "7 - 1 = 6 (left: 6 6 12)",
          "6 + 6 = 12 (left: 12 12)"
        ]
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_0_0",
      "result": "PASS",
      "reason": "node_id 0_1_0_0 matches thought position.",
      "timestamp": "2025-05-30T11:30:09.668187",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_0_0",
        "state": "12 + 12 = 24 (left: 24)",
        "thoughts": [
          "12 + 12 = 24 (left: 24)",
          "12 / 12 = 1 (left: 1)",
          "12 - 12 = 0 (left: 0)",
          "12 * 12 = 144 (left: 144)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_1_0_0",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T11:30:18.388401",
      "event_type": "validation",
      "details": {
        "expected_state": "7 - 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
        "actual_state": "7 - 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)"
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_0_0_0",
      "result": "PASS",
      "reason": "node_id 0_1_0_0_0 matches thought position.",
      "timestamp": "2025-05-30T11:30:26.427917",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_0_0_0",
        "state": "Answer: ((7 - 1) + 6) + 12 = 24",
        "thoughts": [
          "Answer: ((7 - 1) + 6) + 12 = 24"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_1_0_0",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_1_0_0; Correctly backtracking to parent '0_1_0'",
      "timestamp": "2025-05-30T11:30:30.760907",
      "event_type": "validation",
      "details": {
        "popped_node": "0_1_0_0",
        "expected_popped": "0_1_0_0",
        "backtrack_to": "0_1_0",
        "expected_parent": "0_1_0",
        "validation_details": [
          "Correctly popped expected node 0_1_0_0",
          "Correctly backtracking to parent '0_1_0'"
        ]
      }
    },
    {
      "check_name": "base_case",
      "node_id": "0_1_0_0",
      "result": "PASS",
      "reason": "Level limit 3 exceeded - valid backtrack",
      "timestamp": "2025-05-30T11:30:30.760985",
      "event_type": "validation",
      "details": {
        "stack_size": 3,
        "level_limit": 3
      }
    },
    {
      "check_name": "backtracking_II",
      "node_id": "0_1_0_0",
      "result": "PASS",
      "reason": "Correct True flag used in True backtrack mode",
      "timestamp": "2025-05-30T11:30:30.761000",
      "event_type": "validation",
      "details": {
        "flag": "True",
        "true_backtrack_mode": true
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_1_0; Correctly backtracking to parent '0_1'",
      "timestamp": "2025-05-30T11:30:33.210132",
      "event_type": "validation",
      "details": {
        "popped_node": "0_1_0",
        "expected_popped": "0_1_0",
        "backtrack_to": "0_1",
        "expected_parent": "0_1",
        "validation_details": [
          "Correctly popped expected node 0_1_0",
          "Correctly backtracking to parent '0_1'"
        ]
      }
    },
    {
      "check_name": "backtracking_II",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "Correct True flag used in True backtrack mode",
      "timestamp": "2025-05-30T11:30:33.210165",
      "event_type": "validation",
      "details": {
        "flag": "True",
        "true_backtrack_mode": true
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_1; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-30T11:30:35.903647",
      "event_type": "validation",
      "details": {
        "popped_node": "0_1",
        "expected_popped": "0_1",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_1",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_II",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Correct True flag used in True backtrack mode",
      "timestamp": "2025-05-30T11:30:35.903689",
      "event_type": "validation",
      "details": {
        "flag": "True",
        "true_backtrack_mode": true
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
      "timestamp": "2025-05-30T11:30:40.107235",
      "event_type": "validation",
      "details": {
        "popped_node": "0",
        "expected_popped": "0",
        "backtrack_to": "None",
        "expected_parent": "None",
        "validation_details": [
          "Correctly popped expected node 0",
          "Correctly backtracking to parent 'None'"
        ]
      }
    },
    {
      "check_name": "backtracking_II",
      "node_id": "0",
      "result": "PASS",
      "reason": "Correct True flag used in True backtrack mode",
      "timestamp": "2025-05-30T11:30:40.107273",
      "event_type": "validation",
      "details": {
        "flag": "True",
        "true_backtrack_mode": true
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:30:41.190703",
      "event_type": "validation",
      "details": {
        "state": "1 + 6 = 7 (left: 7 7 12)",
        "thought": "1 + 6 = 7 (left: 7 7 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:30:41.190740",
      "event_type": "validation",
      "details": {
        "state": "7 - 1 = 6 (left: 6 6 12)",
        "thought": "7 - 1 = 6 (left: 6 6 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:30:41.190782",
      "event_type": "validation",
      "details": {
        "state": "6 + 6 = 12 (left: 12 12)",
        "thought": "6 + 6 = 12 (left: 12 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:30:41.190805",
      "event_type": "validation",
      "details": {
        "state": "12 + 12 = 24 (left: 24)",
        "thought": "12 + 12 = 24 (left: 24)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_0_0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:30:41.190827",
      "event_type": "validation",
      "details": {
        "state": "Answer: ((7 - 1) + 6) + 12 = 24",
        "thought": "Answer: ((7 - 1) + 6) + 12 = 24"
      }
    },
    {
      "check_name": "final_answer",
      "node_id": "final",
      "result": "PASS",
      "reason": "Result 24 matches expected answer 24.0",
      "timestamp": "2025-05-30T11:30:41.191102",
      "event_type": "validation",
      "details": {
        "result": 24,
        "expected": 24.0,
        "difference": 0.0
      }
    }
  ],
  "legacy_log": [
    {
      "event": "push",
      "node_id": "0",
      "issues": [],
      "log": []
    },
    {
      "event": "push",
      "node_id": "0_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_0 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_1 with value 60.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '7 - 1 = 6 (left: 6 6 12)' found in parent's thoughts",
        "\u2705 Node 0_1 matches thought position.",
        "\u2705 State consistency check passed for node 0_1"
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_0",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_1_0 with value 60.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '6 + 6 = 12 (left: 12 12)' found in parent's thoughts; Previous thought '7 - 1 = 6 (left: 6 6 12)' found in parent's state",
        "\u2705 Node 0_1_0 matches thought position.",
        "\u2705 State consistency check passed for node 0_1_0"
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_0_0",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_1_0_0 with value 40.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '12 + 12 = 24 (left: 24)' found in parent's thoughts; Previous thought '7 - 1 = 6 (left: 6 6 12)' found in parent's state; Previous thought '6 + 6 = 12 (left: 12 12)' found in parent's state",
        "\u2705 Node 0_1_0_0 matches thought position.",
        "\u2705 State consistency check passed for node 0_1_0_0"
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_0_0_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_0_0_0 matches thought position."
      ]
    },
    {
      "event": "pop",
      "node_id": "",
      "issues": [],
      "log": [
        "\u2705 Popped 0_1_0_0 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0_1_0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_1_0_0; Correctly backtracking to parent '0_1_0'",
        "\u2705 Level limit exceeded \u2014 valid reason for backtracking.",
        "\u2705 Subsequent backtrack validation: correctly using True flag in Subsequent mode for 0_1_0_0.",
        "\u2705 Popped 0_1_0 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0_1'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_1_0; Correctly backtracking to parent '0_1'",
        "\u2705 Subsequent backtrack validation: correctly using True flag in Subsequent mode for 0_1_0.",
        "\u2705 Popped 0_1 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_1; Correctly backtracking to parent '0'",
        "\u2705 Subsequent backtrack validation: correctly using True flag in Subsequent mode for 0_1.",
        "\u2705 Popped 0 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to 'None'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
        "\u2705 Subsequent backtrack validation: correctly using True flag in Subsequent mode for 0."
      ]
    }
  ],
  "tree_trace": {
    "0": {
      "state": null,
      "thought": "1 + 6 = 7 (left: 7 7 12)\n7 - 1 = 6 (left: 6 6 12)\n12 - 1 = 11 (left: 6 7 11)\n12 - 6 = 6 (left: 1 6 7)\n12 / 6 = 2 (left: 1 2 7)\n12 - 7 = 5 (left: 1 5 6)\n7 * 6 = 42 (left: 1 12 42)\n12 * 7 = 84 (left: 1 6 84)\n12 * 6 = 72 (left: 1 7 72)\n7 / 1 = 7 (left: 6 7 12)\n6 / 1 = 6 (left: 6 7 12)\n12 / 1 = 12 (left: 6 7 12)\n7 - 6 = 1 (left: 1 1 12)\n7 * 1 = 7 (left: 6 7 12)\n6 * 1 = 6 (left: 6 7 12)\n12 * 1 = 12 (left: 6 7 12)\n6 + 1 = 7 (left: 7 7 12)\n12 + 1 = 13 (left: 6 7 13)",
      "value": null,
      "opening_remark": null,
      "children": {
        "0_0": {
          "state": "1 + 6 = 7 (left: 7 7 12)",
          "thought": null,
          "value": 1.002,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_1": {
          "state": "7 - 1 = 6 (left: 6 6 12)",
          "thought": "6 + 6 = 12 (left: 12 12)\n6 * 6 = 36 (left: 12 36)\n12 - 6 = 6 (left: 6 6)\n12 / 6 = 2 (left: 2 6)",
          "value": 60.0,
          "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
          "children": {
            "0_1_0": {
              "state": "7 - 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
              "thought": "12 + 12 = 24 (left: 24)\n12 / 12 = 1 (left: 1)\n12 - 12 = 0 (left: 0)\n12 * 12 = 144 (left: 144)",
              "value": 60.0,
              "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
              "children": {
                "0_1_0_0": {
                  "state": "7 - 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                  "thought": "Answer: ((7 - 1) + 6) + 12 = 24",
                  "value": 40.0,
                  "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
                  "children": {
                    "0_1_0_0_0": {
                      "state": "7 - 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((7 - 1) + 6) + 12 = 24",
                      "thought": null,
                      "value": 60.0,
                      "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
                      "children": {},
                      "closing_remark": null,
                      "backtracked": false
                    }
                  },
                  "closing_remark": null,
                  "backtracked": true,
                  "backtracked_to": "0_1_0"
                }
              },
              "closing_remark": null,
              "backtracked": true,
              "backtracked_to": "0_1"
            }
          },
          "closing_remark": null,
          "backtracked": true,
          "backtracked_to": "0"
        }
      },
      "closing_remark": null,
      "backtracked": false
    }
  }
}