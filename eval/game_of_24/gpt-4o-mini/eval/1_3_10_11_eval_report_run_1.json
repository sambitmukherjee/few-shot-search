{
  "summary": {
    "total_checks": 30,
    "passed": 30,
    "failed": 0
  },
  "checks_by_type": {
    "pruning": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pruning",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "Value 2.001 meets threshold 3.0",
          "timestamp": "2025-05-30T11:27:33.339172",
          "event_type": "validation",
          "details": {
            "value": 2.001,
            "threshold": 3.0
          }
        }
      ]
    },
    "child_id_assignment": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "node_id 0_0 matches thought position.",
          "timestamp": "2025-05-30T11:27:33.339255",
          "event_type": "validation",
          "details": {
            "node_id": "0_0",
            "state": "1 + 3 = 4 (left: 4 10 11)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 10 11)",
              "3 * 1 = 3 (left: 3 10 11)",
              "10 - 1 = 9 (left: 3 9 11)",
              "11 - 1 = 10 (left: 3 10 10)",
              "10 / 1 = 10 (left: 3 10 10)",
              "11 - 3 = 8 (left: 1 8 10)",
              "11 / 1 = 11 (left: 3 10 11)",
              "10 - 3 = 7 (left: 1 7 11)",
              "11 + 1 = 12 (left: 3 10 12)",
              "10 * 1 = 10 (left: 3 10 10)",
              "11 / 3 = ~3.67 (left: 1 10 ~3.67)",
              "10 + 1 = 11 (left: 3 11 11)",
              "11 * 1 = 11 (left: 3 10 11)",
              "11 / 10 = 1.1 (left: 1 3 1.1)",
              "10 + 3 = 13 (left: 1 11 13)",
              "11 * 3 = 33 (left: 1 10 33)",
              "10 * 3 = 30 (left: 1 11 30)",
              "11 - 10 = 1 (left: 1 3 1)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "node_id 0_1 matches thought position.",
          "timestamp": "2025-05-30T11:27:39.673457",
          "event_type": "validation",
          "details": {
            "node_id": "0_1",
            "state": "3 * 1 = 3 (left: 3 10 11)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 10 11)",
              "3 * 1 = 3 (left: 3 10 11)",
              "10 - 1 = 9 (left: 3 9 11)",
              "11 - 1 = 10 (left: 3 10 10)",
              "10 / 1 = 10 (left: 3 10 10)",
              "11 - 3 = 8 (left: 1 8 10)",
              "11 / 1 = 11 (left: 3 10 11)",
              "10 - 3 = 7 (left: 1 7 11)",
              "11 + 1 = 12 (left: 3 10 12)",
              "10 * 1 = 10 (left: 3 10 10)",
              "11 / 3 = ~3.67 (left: 1 10 ~3.67)",
              "10 + 1 = 11 (left: 3 11 11)",
              "11 * 1 = 11 (left: 3 10 11)",
              "11 / 10 = 1.1 (left: 1 3 1.1)",
              "10 + 3 = 13 (left: 1 11 13)",
              "11 * 3 = 33 (left: 1 10 33)",
              "10 * 3 = 30 (left: 1 11 30)",
              "11 - 10 = 1 (left: 1 3 1)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "node_id 0_1_0 matches thought position.",
          "timestamp": "2025-05-30T11:27:59.752958",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_0",
            "state": "3 + 10 = 13 (left: 11 13)",
            "thoughts": [
              "3 + 10 = 13 (left: 11 13)",
              "10 - 3 = 7 (left: 7 11)",
              "11 - 3 = 8 (left: 10 8)",
              "11 - 10 = 1 (left: 1 3)",
              "3 * 10 = 30 (left: 11 30)",
              "10 / 3 = 3.33 (left: 3.33 11)",
              "11 / 3 = 3.67 (left: 10 3.67)",
              "11 + 3 = 14 (left: 10 14)",
              "11 * 3 = 33 (left: 10 33)",
              "10 + 3 = 13 (left: 11 13)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_0_0",
          "result": "PASS",
          "reason": "node_id 0_1_0_0 matches thought position.",
          "timestamp": "2025-05-30T11:28:28.349663",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_0_0",
            "state": "11 + 13 = 24 (left: 24)",
            "thoughts": [
              "11 + 13 = 24 (left: 24)",
              "13 - 11 = 2 (left: 2)",
              "13 / 11 = 1.18 (approx) (left: 1.18)",
              "11 * 13 = 143 (left: 143)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_0_0_0",
          "result": "PASS",
          "reason": "node_id 0_1_0_0_0 matches thought position.",
          "timestamp": "2025-05-30T11:28:43.730656",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_0_0_0",
            "state": "Answer: (3 * 1 + 10) + 11 = 24",
            "thoughts": [
              "Answer: (3 * 1 + 10) + 11 = 24"
            ]
          }
        }
      ]
    },
    "pseudo_recursive_call": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Value 60.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T11:27:39.673337",
          "event_type": "validation",
          "details": {
            "value": 60.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "Value 60.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T11:27:59.752822",
          "event_type": "validation",
          "details": {
            "value": 60.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_1_0_0",
          "result": "PASS",
          "reason": "Value 60.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T11:28:28.349551",
          "event_type": "validation",
          "details": {
            "value": 60.0,
            "threshold": 3.0
          }
        }
      ]
    },
    "child_state": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "child_state",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State validation passed: Last thought '3 * 1 = 3 (left: 3 10 11)' found in parent's thoughts",
          "timestamp": "2025-05-30T11:27:39.673403",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '3 * 1 = 3 (left: 3 10 11)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "1 + 3 = 4 (left: 4 10 11)",
              "3 * 1 = 3 (left: 3 10 11)",
              "10 - 1 = 9 (left: 3 9 11)",
              "11 - 1 = 10 (left: 3 10 10)",
              "10 / 1 = 10 (left: 3 10 10)",
              "11 - 3 = 8 (left: 1 8 10)",
              "11 / 1 = 11 (left: 3 10 11)",
              "10 - 3 = 7 (left: 1 7 11)",
              "11 + 1 = 12 (left: 3 10 12)",
              "10 * 1 = 10 (left: 3 10 10)",
              "11 / 3 = ~3.67 (left: 1 10 ~3.67)",
              "10 + 1 = 11 (left: 3 11 11)",
              "11 * 1 = 11 (left: 3 10 11)",
              "11 / 10 = 1.1 (left: 1 3 1.1)",
              "10 + 3 = 13 (left: 1 11 13)",
              "11 * 3 = 33 (left: 1 10 33)",
              "10 * 3 = 30 (left: 1 11 30)",
              "11 - 10 = 1 (left: 1 3 1)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "State validation passed: Last thought '3 + 10 = 13 (left: 11 13)' found in parent's thoughts; Previous thought '3 * 1 = 3 (left: 3 10 11)' found in parent's state",
          "timestamp": "2025-05-30T11:27:59.752891",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '3 + 10 = 13 (left: 11 13)' found in parent's thoughts",
              "Previous thought '3 * 1 = 3 (left: 3 10 11)' found in parent's state"
            ],
            "parent_thoughts": [
              "3 + 10 = 13 (left: 11 13)",
              "10 - 3 = 7 (left: 7 11)",
              "11 - 3 = 8 (left: 10 8)",
              "11 - 10 = 1 (left: 1 3)",
              "3 * 10 = 30 (left: 11 30)",
              "10 / 3 = 3.33 (left: 3.33 11)",
              "11 / 3 = 3.67 (left: 10 3.67)",
              "11 + 3 = 14 (left: 10 14)",
              "11 * 3 = 33 (left: 10 33)",
              "10 + 3 = 13 (left: 11 13)"
            ],
            "parent_state": [
              "3 * 1 = 3 (left: 3 10 11)"
            ]
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_1_0_0",
          "result": "PASS",
          "reason": "State validation passed: Last thought '11 + 13 = 24 (left: 24)' found in parent's thoughts; Previous thought '3 * 1 = 3 (left: 3 10 11)' found in parent's state; Previous thought '3 + 10 = 13 (left: 11 13)' found in parent's state",
          "timestamp": "2025-05-30T11:28:28.349616",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '11 + 13 = 24 (left: 24)' found in parent's thoughts",
              "Previous thought '3 * 1 = 3 (left: 3 10 11)' found in parent's state",
              "Previous thought '3 + 10 = 13 (left: 11 13)' found in parent's state"
            ],
            "parent_thoughts": [
              "11 + 13 = 24 (left: 24)",
              "13 - 11 = 2 (left: 2)",
              "13 / 11 = 1.18 (approx) (left: 1.18)",
              "11 * 13 = 143 (left: 143)"
            ],
            "parent_state": [
              "3 * 1 = 3 (left: 3 10 11)",
              "3 + 10 = 13 (left: 11 13)"
            ]
          }
        }
      ]
    },
    "node_state": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "node_state",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T11:27:50.402591",
          "event_type": "validation",
          "details": {
            "expected_state": "3 * 1 = 3 (left: 3 10 11)",
            "actual_state": "3 * 1 = 3 (left: 3 10 11)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T11:28:05.890800",
          "event_type": "validation",
          "details": {
            "expected_state": "3 * 1 = 3 (left: 3 10 11)\n3 + 10 = 13 (left: 11 13)",
            "actual_state": "3 * 1 = 3 (left: 3 10 11)\n3 + 10 = 13 (left: 11 13)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_1_0_0",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T11:28:34.785173",
          "event_type": "validation",
          "details": {
            "expected_state": "3 * 1 = 3 (left: 3 10 11)\n3 + 10 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)",
            "actual_state": "3 * 1 = 3 (left: 3 10 11)\n3 + 10 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)"
          }
        }
      ]
    },
    "backtracking_I": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_I",
          "node_id": "0_1_0_0",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_1_0_0; Correctly backtracking to parent '0_1_0'",
          "timestamp": "2025-05-30T11:28:48.802673",
          "event_type": "validation",
          "details": {
            "popped_node": "0_1_0_0",
            "expected_popped": "0_1_0_0",
            "backtrack_to": "0_1_0",
            "expected_parent": "0_1_0",
            "validation_details": [
              "Correctly popped expected node 0_1_0_0",
              "Correctly backtracking to parent '0_1_0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_1_0; Correctly backtracking to parent '0_1'",
          "timestamp": "2025-05-30T11:28:51.032584",
          "event_type": "validation",
          "details": {
            "popped_node": "0_1_0",
            "expected_popped": "0_1_0",
            "backtrack_to": "0_1",
            "expected_parent": "0_1",
            "validation_details": [
              "Correctly popped expected node 0_1_0",
              "Correctly backtracking to parent '0_1'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_1; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-30T11:28:54.028163",
          "event_type": "validation",
          "details": {
            "popped_node": "0_1",
            "expected_popped": "0_1",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_1",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
          "timestamp": "2025-05-30T11:28:55.825524",
          "event_type": "validation",
          "details": {
            "popped_node": "0",
            "expected_popped": "0",
            "backtrack_to": "None",
            "expected_parent": "None",
            "validation_details": [
              "Correctly popped expected node 0",
              "Correctly backtracking to parent 'None'"
            ]
          }
        }
      ]
    },
    "base_case": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "base_case",
          "node_id": "0_1_0_0",
          "result": "PASS",
          "reason": "Level limit 3 exceeded - valid backtrack",
          "timestamp": "2025-05-30T11:28:48.802717",
          "event_type": "validation",
          "details": {
            "stack_size": 3,
            "level_limit": 3
          }
        }
      ]
    },
    "backtracking_II": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_II",
          "node_id": "0_1_0_0",
          "result": "PASS",
          "reason": "Correct True flag used in True backtrack mode",
          "timestamp": "2025-05-30T11:28:48.802729",
          "event_type": "validation",
          "details": {
            "flag": "True",
            "true_backtrack_mode": true
          }
        },
        {
          "check_name": "backtracking_II",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "Correct True flag used in True backtrack mode",
          "timestamp": "2025-05-30T11:28:51.032626",
          "event_type": "validation",
          "details": {
            "flag": "True",
            "true_backtrack_mode": true
          }
        },
        {
          "check_name": "backtracking_II",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Correct True flag used in True backtrack mode",
          "timestamp": "2025-05-30T11:28:54.028196",
          "event_type": "validation",
          "details": {
            "flag": "True",
            "true_backtrack_mode": true
          }
        },
        {
          "check_name": "backtracking_II",
          "node_id": "0",
          "result": "PASS",
          "reason": "Correct True flag used in True backtrack mode",
          "timestamp": "2025-05-30T11:28:55.825552",
          "event_type": "validation",
          "details": {
            "flag": "True",
            "true_backtrack_mode": true
          }
        }
      ]
    },
    "looping_order": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "looping_order",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:28:57.005715",
          "event_type": "validation",
          "details": {
            "state": "1 + 3 = 4 (left: 4 10 11)",
            "thought": "1 + 3 = 4 (left: 4 10 11)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:28:57.005753",
          "event_type": "validation",
          "details": {
            "state": "3 * 1 = 3 (left: 3 10 11)",
            "thought": "3 * 1 = 3 (left: 3 10 11)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:28:57.005794",
          "event_type": "validation",
          "details": {
            "state": "3 + 10 = 13 (left: 11 13)",
            "thought": "3 + 10 = 13 (left: 11 13)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:28:57.005819",
          "event_type": "validation",
          "details": {
            "state": "11 + 13 = 24 (left: 24)",
            "thought": "11 + 13 = 24 (left: 24)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_0_0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:28:57.005843",
          "event_type": "validation",
          "details": {
            "state": "Answer: (3 * 1 + 10) + 11 = 24",
            "thought": "Answer: (3 * 1 + 10) + 11 = 24"
          }
        }
      ]
    },
    "final_answer": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "final_answer",
          "node_id": "final",
          "result": "PASS",
          "reason": "Result 24 matches expected answer 24.0",
          "timestamp": "2025-05-30T11:28:57.005976",
          "event_type": "validation",
          "details": {
            "result": 24,
            "expected": 24.0,
            "difference": 0.0
          }
        }
      ]
    },
    "valid_search_trace": {
      "success_trace": true
    }
  },
  "detailed_results": [
    {
      "check_name": "pruning",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "Value 2.001 meets threshold 3.0",
      "timestamp": "2025-05-30T11:27:33.339172",
      "event_type": "validation",
      "details": {
        "value": 2.001,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "node_id 0_0 matches thought position.",
      "timestamp": "2025-05-30T11:27:33.339255",
      "event_type": "validation",
      "details": {
        "node_id": "0_0",
        "state": "1 + 3 = 4 (left: 4 10 11)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 10 11)",
          "3 * 1 = 3 (left: 3 10 11)",
          "10 - 1 = 9 (left: 3 9 11)",
          "11 - 1 = 10 (left: 3 10 10)",
          "10 / 1 = 10 (left: 3 10 10)",
          "11 - 3 = 8 (left: 1 8 10)",
          "11 / 1 = 11 (left: 3 10 11)",
          "10 - 3 = 7 (left: 1 7 11)",
          "11 + 1 = 12 (left: 3 10 12)",
          "10 * 1 = 10 (left: 3 10 10)",
          "11 / 3 = ~3.67 (left: 1 10 ~3.67)",
          "10 + 1 = 11 (left: 3 11 11)",
          "11 * 1 = 11 (left: 3 10 11)",
          "11 / 10 = 1.1 (left: 1 3 1.1)",
          "10 + 3 = 13 (left: 1 11 13)",
          "11 * 3 = 33 (left: 1 10 33)",
          "10 * 3 = 30 (left: 1 11 30)",
          "11 - 10 = 1 (left: 1 3 1)"
        ]
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Value 60.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T11:27:39.673337",
      "event_type": "validation",
      "details": {
        "value": 60.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State validation passed: Last thought '3 * 1 = 3 (left: 3 10 11)' found in parent's thoughts",
      "timestamp": "2025-05-30T11:27:39.673403",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '3 * 1 = 3 (left: 3 10 11)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "1 + 3 = 4 (left: 4 10 11)",
          "3 * 1 = 3 (left: 3 10 11)",
          "10 - 1 = 9 (left: 3 9 11)",
          "11 - 1 = 10 (left: 3 10 10)",
          "10 / 1 = 10 (left: 3 10 10)",
          "11 - 3 = 8 (left: 1 8 10)",
          "11 / 1 = 11 (left: 3 10 11)",
          "10 - 3 = 7 (left: 1 7 11)",
          "11 + 1 = 12 (left: 3 10 12)",
          "10 * 1 = 10 (left: 3 10 10)",
          "11 / 3 = ~3.67 (left: 1 10 ~3.67)",
          "10 + 1 = 11 (left: 3 11 11)",
          "11 * 1 = 11 (left: 3 10 11)",
          "11 / 10 = 1.1 (left: 1 3 1.1)",
          "10 + 3 = 13 (left: 1 11 13)",
          "11 * 3 = 33 (left: 1 10 33)",
          "10 * 3 = 30 (left: 1 11 30)",
          "11 - 10 = 1 (left: 1 3 1)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "node_id 0_1 matches thought position.",
      "timestamp": "2025-05-30T11:27:39.673457",
      "event_type": "validation",
      "details": {
        "node_id": "0_1",
        "state": "3 * 1 = 3 (left: 3 10 11)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 10 11)",
          "3 * 1 = 3 (left: 3 10 11)",
          "10 - 1 = 9 (left: 3 9 11)",
          "11 - 1 = 10 (left: 3 10 10)",
          "10 / 1 = 10 (left: 3 10 10)",
          "11 - 3 = 8 (left: 1 8 10)",
          "11 / 1 = 11 (left: 3 10 11)",
          "10 - 3 = 7 (left: 1 7 11)",
          "11 + 1 = 12 (left: 3 10 12)",
          "10 * 1 = 10 (left: 3 10 10)",
          "11 / 3 = ~3.67 (left: 1 10 ~3.67)",
          "10 + 1 = 11 (left: 3 11 11)",
          "11 * 1 = 11 (left: 3 10 11)",
          "11 / 10 = 1.1 (left: 1 3 1.1)",
          "10 + 3 = 13 (left: 1 11 13)",
          "11 * 3 = 33 (left: 1 10 33)",
          "10 * 3 = 30 (left: 1 11 30)",
          "11 - 10 = 1 (left: 1 3 1)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T11:27:50.402591",
      "event_type": "validation",
      "details": {
        "expected_state": "3 * 1 = 3 (left: 3 10 11)",
        "actual_state": "3 * 1 = 3 (left: 3 10 11)"
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "Value 60.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T11:27:59.752822",
      "event_type": "validation",
      "details": {
        "value": 60.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "State validation passed: Last thought '3 + 10 = 13 (left: 11 13)' found in parent's thoughts; Previous thought '3 * 1 = 3 (left: 3 10 11)' found in parent's state",
      "timestamp": "2025-05-30T11:27:59.752891",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '3 + 10 = 13 (left: 11 13)' found in parent's thoughts",
          "Previous thought '3 * 1 = 3 (left: 3 10 11)' found in parent's state"
        ],
        "parent_thoughts": [
          "3 + 10 = 13 (left: 11 13)",
          "10 - 3 = 7 (left: 7 11)",
          "11 - 3 = 8 (left: 10 8)",
          "11 - 10 = 1 (left: 1 3)",
          "3 * 10 = 30 (left: 11 30)",
          "10 / 3 = 3.33 (left: 3.33 11)",
          "11 / 3 = 3.67 (left: 10 3.67)",
          "11 + 3 = 14 (left: 10 14)",
          "11 * 3 = 33 (left: 10 33)",
          "10 + 3 = 13 (left: 11 13)"
        ],
        "parent_state": [
          "3 * 1 = 3 (left: 3 10 11)"
        ]
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "node_id 0_1_0 matches thought position.",
      "timestamp": "2025-05-30T11:27:59.752958",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_0",
        "state": "3 + 10 = 13 (left: 11 13)",
        "thoughts": [
          "3 + 10 = 13 (left: 11 13)",
          "10 - 3 = 7 (left: 7 11)",
          "11 - 3 = 8 (left: 10 8)",
          "11 - 10 = 1 (left: 1 3)",
          "3 * 10 = 30 (left: 11 30)",
          "10 / 3 = 3.33 (left: 3.33 11)",
          "11 / 3 = 3.67 (left: 10 3.67)",
          "11 + 3 = 14 (left: 10 14)",
          "11 * 3 = 33 (left: 10 33)",
          "10 + 3 = 13 (left: 11 13)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T11:28:05.890800",
      "event_type": "validation",
      "details": {
        "expected_state": "3 * 1 = 3 (left: 3 10 11)\n3 + 10 = 13 (left: 11 13)",
        "actual_state": "3 * 1 = 3 (left: 3 10 11)\n3 + 10 = 13 (left: 11 13)"
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_1_0_0",
      "result": "PASS",
      "reason": "Value 60.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T11:28:28.349551",
      "event_type": "validation",
      "details": {
        "value": 60.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_1_0_0",
      "result": "PASS",
      "reason": "State validation passed: Last thought '11 + 13 = 24 (left: 24)' found in parent's thoughts; Previous thought '3 * 1 = 3 (left: 3 10 11)' found in parent's state; Previous thought '3 + 10 = 13 (left: 11 13)' found in parent's state",
      "timestamp": "2025-05-30T11:28:28.349616",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '11 + 13 = 24 (left: 24)' found in parent's thoughts",
          "Previous thought '3 * 1 = 3 (left: 3 10 11)' found in parent's state",
          "Previous thought '3 + 10 = 13 (left: 11 13)' found in parent's state"
        ],
        "parent_thoughts": [
          "11 + 13 = 24 (left: 24)",
          "13 - 11 = 2 (left: 2)",
          "13 / 11 = 1.18 (approx) (left: 1.18)",
          "11 * 13 = 143 (left: 143)"
        ],
        "parent_state": [
          "3 * 1 = 3 (left: 3 10 11)",
          "3 + 10 = 13 (left: 11 13)"
        ]
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_0_0",
      "result": "PASS",
      "reason": "node_id 0_1_0_0 matches thought position.",
      "timestamp": "2025-05-30T11:28:28.349663",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_0_0",
        "state": "11 + 13 = 24 (left: 24)",
        "thoughts": [
          "11 + 13 = 24 (left: 24)",
          "13 - 11 = 2 (left: 2)",
          "13 / 11 = 1.18 (approx) (left: 1.18)",
          "11 * 13 = 143 (left: 143)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_1_0_0",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T11:28:34.785173",
      "event_type": "validation",
      "details": {
        "expected_state": "3 * 1 = 3 (left: 3 10 11)\n3 + 10 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)",
        "actual_state": "3 * 1 = 3 (left: 3 10 11)\n3 + 10 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)"
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_0_0_0",
      "result": "PASS",
      "reason": "node_id 0_1_0_0_0 matches thought position.",
      "timestamp": "2025-05-30T11:28:43.730656",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_0_0_0",
        "state": "Answer: (3 * 1 + 10) + 11 = 24",
        "thoughts": [
          "Answer: (3 * 1 + 10) + 11 = 24"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_1_0_0",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_1_0_0; Correctly backtracking to parent '0_1_0'",
      "timestamp": "2025-05-30T11:28:48.802673",
      "event_type": "validation",
      "details": {
        "popped_node": "0_1_0_0",
        "expected_popped": "0_1_0_0",
        "backtrack_to": "0_1_0",
        "expected_parent": "0_1_0",
        "validation_details": [
          "Correctly popped expected node 0_1_0_0",
          "Correctly backtracking to parent '0_1_0'"
        ]
      }
    },
    {
      "check_name": "base_case",
      "node_id": "0_1_0_0",
      "result": "PASS",
      "reason": "Level limit 3 exceeded - valid backtrack",
      "timestamp": "2025-05-30T11:28:48.802717",
      "event_type": "validation",
      "details": {
        "stack_size": 3,
        "level_limit": 3
      }
    },
    {
      "check_name": "backtracking_II",
      "node_id": "0_1_0_0",
      "result": "PASS",
      "reason": "Correct True flag used in True backtrack mode",
      "timestamp": "2025-05-30T11:28:48.802729",
      "event_type": "validation",
      "details": {
        "flag": "True",
        "true_backtrack_mode": true
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_1_0; Correctly backtracking to parent '0_1'",
      "timestamp": "2025-05-30T11:28:51.032584",
      "event_type": "validation",
      "details": {
        "popped_node": "0_1_0",
        "expected_popped": "0_1_0",
        "backtrack_to": "0_1",
        "expected_parent": "0_1",
        "validation_details": [
          "Correctly popped expected node 0_1_0",
          "Correctly backtracking to parent '0_1'"
        ]
      }
    },
    {
      "check_name": "backtracking_II",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "Correct True flag used in True backtrack mode",
      "timestamp": "2025-05-30T11:28:51.032626",
      "event_type": "validation",
      "details": {
        "flag": "True",
        "true_backtrack_mode": true
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_1; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-30T11:28:54.028163",
      "event_type": "validation",
      "details": {
        "popped_node": "0_1",
        "expected_popped": "0_1",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_1",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_II",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Correct True flag used in True backtrack mode",
      "timestamp": "2025-05-30T11:28:54.028196",
      "event_type": "validation",
      "details": {
        "flag": "True",
        "true_backtrack_mode": true
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
      "timestamp": "2025-05-30T11:28:55.825524",
      "event_type": "validation",
      "details": {
        "popped_node": "0",
        "expected_popped": "0",
        "backtrack_to": "None",
        "expected_parent": "None",
        "validation_details": [
          "Correctly popped expected node 0",
          "Correctly backtracking to parent 'None'"
        ]
      }
    },
    {
      "check_name": "backtracking_II",
      "node_id": "0",
      "result": "PASS",
      "reason": "Correct True flag used in True backtrack mode",
      "timestamp": "2025-05-30T11:28:55.825552",
      "event_type": "validation",
      "details": {
        "flag": "True",
        "true_backtrack_mode": true
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:28:57.005715",
      "event_type": "validation",
      "details": {
        "state": "1 + 3 = 4 (left: 4 10 11)",
        "thought": "1 + 3 = 4 (left: 4 10 11)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:28:57.005753",
      "event_type": "validation",
      "details": {
        "state": "3 * 1 = 3 (left: 3 10 11)",
        "thought": "3 * 1 = 3 (left: 3 10 11)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:28:57.005794",
      "event_type": "validation",
      "details": {
        "state": "3 + 10 = 13 (left: 11 13)",
        "thought": "3 + 10 = 13 (left: 11 13)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:28:57.005819",
      "event_type": "validation",
      "details": {
        "state": "11 + 13 = 24 (left: 24)",
        "thought": "11 + 13 = 24 (left: 24)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_0_0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:28:57.005843",
      "event_type": "validation",
      "details": {
        "state": "Answer: (3 * 1 + 10) + 11 = 24",
        "thought": "Answer: (3 * 1 + 10) + 11 = 24"
      }
    },
    {
      "check_name": "final_answer",
      "node_id": "final",
      "result": "PASS",
      "reason": "Result 24 matches expected answer 24.0",
      "timestamp": "2025-05-30T11:28:57.005976",
      "event_type": "validation",
      "details": {
        "result": 24,
        "expected": 24.0,
        "difference": 0.0
      }
    }
  ],
  "legacy_log": [
    {
      "event": "push",
      "node_id": "0",
      "issues": [],
      "log": []
    },
    {
      "event": "push",
      "node_id": "0_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_0 with value 2.001 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_1 with value 60.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '3 * 1 = 3 (left: 3 10 11)' found in parent's thoughts",
        "\u2705 Node 0_1 matches thought position.",
        "\u2705 State consistency check passed for node 0_1"
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_0",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_1_0 with value 60.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '3 + 10 = 13 (left: 11 13)' found in parent's thoughts; Previous thought '3 * 1 = 3 (left: 3 10 11)' found in parent's state",
        "\u2705 Node 0_1_0 matches thought position.",
        "\u2705 State consistency check passed for node 0_1_0"
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_0_0",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_1_0_0 with value 60.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '11 + 13 = 24 (left: 24)' found in parent's thoughts; Previous thought '3 * 1 = 3 (left: 3 10 11)' found in parent's state; Previous thought '3 + 10 = 13 (left: 11 13)' found in parent's state",
        "\u2705 Node 0_1_0_0 matches thought position.",
        "\u2705 State consistency check passed for node 0_1_0_0"
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_0_0_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_0_0_0 matches thought position."
      ]
    },
    {
      "event": "pop",
      "node_id": "",
      "issues": [],
      "log": [
        "\u2705 Popped 0_1_0_0 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0_1_0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_1_0_0; Correctly backtracking to parent '0_1_0'",
        "\u2705 Level limit exceeded \u2014 valid reason for backtracking.",
        "\u2705 Subsequent backtrack validation: correctly using True flag in Subsequent mode for 0_1_0_0.",
        "\u2705 Popped 0_1_0 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0_1'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_1_0; Correctly backtracking to parent '0_1'",
        "\u2705 Subsequent backtrack validation: correctly using True flag in Subsequent mode for 0_1_0.",
        "\u2705 Popped 0_1 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_1; Correctly backtracking to parent '0'",
        "\u2705 Subsequent backtrack validation: correctly using True flag in Subsequent mode for 0_1.",
        "\u2705 Popped 0 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to 'None'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
        "\u2705 Subsequent backtrack validation: correctly using True flag in Subsequent mode for 0."
      ]
    }
  ],
  "tree_trace": {
    "0": {
      "state": null,
      "thought": "1 + 3 = 4 (left: 4 10 11)\n3 * 1 = 3 (left: 3 10 11)\n10 - 1 = 9 (left: 3 9 11)\n11 - 1 = 10 (left: 3 10 10)\n10 / 1 = 10 (left: 3 10 10)\n11 - 3 = 8 (left: 1 8 10)\n11 / 1 = 11 (left: 3 10 11)\n10 - 3 = 7 (left: 1 7 11)\n11 + 1 = 12 (left: 3 10 12)\n10 * 1 = 10 (left: 3 10 10)\n11 / 3 = ~3.67 (left: 1 10 ~3.67)\n10 + 1 = 11 (left: 3 11 11)\n11 * 1 = 11 (left: 3 10 11)\n11 / 10 = 1.1 (left: 1 3 1.1)\n10 + 3 = 13 (left: 1 11 13)\n11 * 3 = 33 (left: 1 10 33)\n10 * 3 = 30 (left: 1 11 30)\n11 - 10 = 1 (left: 1 3 1)",
      "value": null,
      "opening_remark": null,
      "children": {
        "0_0": {
          "state": "1 + 3 = 4 (left: 4 10 11)",
          "thought": null,
          "value": 2.001,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_1": {
          "state": "3 * 1 = 3 (left: 3 10 11)",
          "thought": "3 + 10 = 13 (left: 11 13)\n10 - 3 = 7 (left: 7 11)\n11 - 3 = 8 (left: 10 8)\n11 - 10 = 1 (left: 1 3)\n3 * 10 = 30 (left: 11 30)\n10 / 3 = 3.33 (left: 3.33 11)\n11 / 3 = 3.67 (left: 10 3.67)\n11 + 3 = 14 (left: 10 14)\n11 * 3 = 33 (left: 10 33)\n10 + 3 = 13 (left: 11 13)",
          "value": 60.0,
          "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
          "children": {
            "0_1_0": {
              "state": "3 * 1 = 3 (left: 3 10 11)\n3 + 10 = 13 (left: 11 13)",
              "thought": "11 + 13 = 24 (left: 24)\n13 - 11 = 2 (left: 2)\n13 / 11 = 1.18 (approx) (left: 1.18)\n11 * 13 = 143 (left: 143)",
              "value": 60.0,
              "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
              "children": {
                "0_1_0_0": {
                  "state": "3 * 1 = 3 (left: 3 10 11)\n3 + 10 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                  "thought": "Answer: (3 * 1 + 10) + 11 = 24",
                  "value": 60.0,
                  "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
                  "children": {
                    "0_1_0_0_0": {
                      "state": "3 * 1 = 3 (left: 3 10 11)\n3 + 10 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: (3 * 1 + 10) + 11 = 24",
                      "thought": null,
                      "value": 60.0,
                      "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
                      "children": {},
                      "closing_remark": null,
                      "backtracked": false
                    }
                  },
                  "closing_remark": null,
                  "backtracked": true,
                  "backtracked_to": "0_1_0"
                }
              },
              "closing_remark": null,
              "backtracked": true,
              "backtracked_to": "0_1"
            }
          },
          "closing_remark": null,
          "backtracked": true,
          "backtracked_to": "0"
        }
      },
      "closing_remark": null,
      "backtracked": false
    }
  }
}