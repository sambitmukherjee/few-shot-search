{
  "summary": {
    "total_checks": 86,
    "passed": 58,
    "failed": 28
  },
  "checks_by_type": {
    "pseudo_recursive_call": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-31T16:53:26.926435",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-31T16:56:03.646298",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        }
      ]
    },
    "child_state": {
      "FAIL": 1,
      "details": [
        {
          "check_name": "child_state",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State validation passed: Last thought '1 + 3 = 4 (left: 4 7 10)' found in parent's thoughts",
          "timestamp": "2025-05-31T16:53:26.926485",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '1 + 3 = 4 (left: 4 7 10)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "1 + 3 = 4 (left: 4 7 10)",
              "7 - 1 = 6 (left: 3 6 10)",
              "10 - 1 = 9 (left: 3 7 9)",
              "10 - 3 = 7 (left: 1 7 7)",
              "7 + 1 = 8 (left: 3 8 10)",
              "3 * 1 = 3 (left: 3 7 10)",
              "10 / 1 = 10 (left: 3 7 10)",
              "7 / 1 = 7 (left: 3 7 10)",
              "3 / 1 = 3 (left: 3 7 10)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_3",
          "result": "FAIL",
          "reason": "State validation failed: Last thought '10 - 3 = 7 (left: 1 7 10)' not found in parent's thoughts",
          "timestamp": "2025-05-31T16:56:03.646369",
          "event_type": "validation",
          "details": {
            "validation_errors": [
              "Last thought '10 - 3 = 7 (left: 1 7 10)' not found in parent's thoughts"
            ],
            "parent_thoughts": [
              "1 + 3 = 4 (left: 4 7 10)",
              "7 - 1 = 6 (left: 3 6 10)",
              "10 - 1 = 9 (left: 3 7 9)",
              "10 - 3 = 7 (left: 1 7 7)",
              "7 + 1 = 8 (left: 3 8 10)",
              "3 * 1 = 3 (left: 3 7 10)",
              "10 / 1 = 10 (left: 3 7 10)",
              "7 / 1 = 7 (left: 3 7 10)",
              "3 / 1 = 3 (left: 3 7 10)"
            ],
            "parent_state": null,
            "current_state": [
              "10 - 3 = 7 (left: 1 7 10)"
            ]
          }
        }
      ]
    },
    "child_id_assignment": {
      "FAIL": 13,
      "details": [
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "node_id 0_0 matches thought position.",
          "timestamp": "2025-05-31T16:53:26.926527",
          "event_type": "validation",
          "details": {
            "node_id": "0_0",
            "state": "1 + 3 = 4 (left: 4 7 10)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 7 10)",
              "7 - 1 = 6 (left: 3 6 10)",
              "10 - 1 = 9 (left: 3 7 9)",
              "10 - 3 = 7 (left: 1 7 7)",
              "7 + 1 = 8 (left: 3 8 10)",
              "3 * 1 = 3 (left: 3 7 10)",
              "10 / 1 = 10 (left: 3 7 10)",
              "7 / 1 = 7 (left: 3 7 10)",
              "3 / 1 = 3 (left: 3 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_0",
          "result": "PASS",
          "reason": "node_id 0_0_0 matches thought position.",
          "timestamp": "2025-05-31T16:53:54.337971",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_0",
            "state": "4 + 7 = 11 (left: 10 11)",
            "thoughts": [
              "4 + 7 = 11 (left: 10 11)",
              "7 - 4 = 3 (left: 3 10)",
              "10 - 4 = 6 (left: 6 7)",
              "10 - 7 = 3 (left: 3 4)",
              "10 / 4 = 2.5 (left: 2.5 7)",
              "7 * 4 = 28 (left: 10 28)",
              "10 * 4 = 40 (left: 7 40)",
              "10 * 7 = 70 (left: 4 70)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "node_id 0_0_1 matches thought position.",
          "timestamp": "2025-05-31T16:54:03.702508",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_1",
            "state": "7 - 4 = 3 (left: 3 10)",
            "thoughts": [
              "4 + 7 = 11 (left: 10 11)",
              "7 - 4 = 3 (left: 3 10)",
              "10 - 4 = 6 (left: 6 7)",
              "10 - 7 = 3 (left: 3 4)",
              "10 / 4 = 2.5 (left: 2.5 7)",
              "7 * 4 = 28 (left: 10 28)",
              "10 * 4 = 40 (left: 7 40)",
              "10 * 7 = 70 (left: 4 70)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_2",
          "result": "PASS",
          "reason": "node_id 0_0_2 matches thought position.",
          "timestamp": "2025-05-31T16:54:22.256640",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_2",
            "state": "10 - 4 = 6 (left: 6 7)",
            "thoughts": [
              "4 + 7 = 11 (left: 10 11)",
              "7 - 4 = 3 (left: 3 10)",
              "10 - 4 = 6 (left: 6 7)",
              "10 - 7 = 3 (left: 3 4)",
              "10 / 4 = 2.5 (left: 2.5 7)",
              "7 * 4 = 28 (left: 10 28)",
              "10 * 4 = 40 (left: 7 40)",
              "10 * 7 = 70 (left: 4 70)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_3",
          "result": "PASS",
          "reason": "node_id 0_0_3 matches thought position.",
          "timestamp": "2025-05-31T16:54:32.156524",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_3",
            "state": "10 - 7 = 3 (left: 3 4)",
            "thoughts": [
              "4 + 7 = 11 (left: 10 11)",
              "7 - 4 = 3 (left: 3 10)",
              "10 - 4 = 6 (left: 6 7)",
              "10 - 7 = 3 (left: 3 4)",
              "10 / 4 = 2.5 (left: 2.5 7)",
              "7 * 4 = 28 (left: 10 28)",
              "10 * 4 = 40 (left: 7 40)",
              "10 * 7 = 70 (left: 4 70)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_4",
          "result": "PASS",
          "reason": "node_id 0_0_4 matches thought position.",
          "timestamp": "2025-05-31T16:54:44.005705",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_4",
            "state": "10 / 4 = 2.5 (left: 2.5 7)",
            "thoughts": [
              "4 + 7 = 11 (left: 10 11)",
              "7 - 4 = 3 (left: 3 10)",
              "10 - 4 = 6 (left: 6 7)",
              "10 - 7 = 3 (left: 3 4)",
              "10 / 4 = 2.5 (left: 2.5 7)",
              "7 * 4 = 28 (left: 10 28)",
              "10 * 4 = 40 (left: 7 40)",
              "10 * 7 = 70 (left: 4 70)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_5",
          "result": "FAIL",
          "reason": "node_id 0_0_5 does not match thought position.",
          "timestamp": "2025-05-31T16:55:08.085803",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_5",
            "state": "7 * 1 = 7 (left: 7 10)",
            "thoughts": [
              "4 + 7 = 11 (left: 10 11)",
              "7 - 4 = 3 (left: 3 10)",
              "10 - 4 = 6 (left: 6 7)",
              "10 - 7 = 3 (left: 3 4)",
              "10 / 4 = 2.5 (left: 2.5 7)",
              "7 * 4 = 28 (left: 10 28)",
              "10 * 4 = 40 (left: 7 40)",
              "10 * 7 = 70 (left: 4 70)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_6",
          "result": "FAIL",
          "reason": "node_id 0_0_6 does not match thought position.",
          "timestamp": "2025-05-31T16:55:18.974490",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_6",
            "state": "10 * 1 = 10 (left: 10 7)",
            "thoughts": [
              "4 + 7 = 11 (left: 10 11)",
              "7 - 4 = 3 (left: 3 10)",
              "10 - 4 = 6 (left: 6 7)",
              "10 - 7 = 3 (left: 3 4)",
              "10 / 4 = 2.5 (left: 2.5 7)",
              "7 * 4 = 28 (left: 10 28)",
              "10 * 4 = 40 (left: 7 40)",
              "10 * 7 = 70 (left: 4 70)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_7",
          "result": "FAIL",
          "reason": "node_id 0_0_7 does not match thought position.",
          "timestamp": "2025-05-31T16:55:30.554547",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_7",
            "state": "10 / 1 = 10 (left: 10 7)",
            "thoughts": [
              "4 + 7 = 11 (left: 10 11)",
              "7 - 4 = 3 (left: 3 10)",
              "10 - 4 = 6 (left: 6 7)",
              "10 - 7 = 3 (left: 3 4)",
              "10 / 4 = 2.5 (left: 2.5 7)",
              "7 * 4 = 28 (left: 10 28)",
              "10 * 4 = 40 (left: 7 40)",
              "10 * 7 = 70 (left: 4 70)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "node_id 0_1 matches thought position.",
          "timestamp": "2025-05-31T16:55:43.306311",
          "event_type": "validation",
          "details": {
            "node_id": "0_1",
            "state": "7 - 1 = 6 (left: 3 6 10)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 7 10)",
              "7 - 1 = 6 (left: 3 6 10)",
              "10 - 1 = 9 (left: 3 7 9)",
              "10 - 3 = 7 (left: 1 7 7)",
              "7 + 1 = 8 (left: 3 8 10)",
              "3 * 1 = 3 (left: 3 7 10)",
              "10 / 1 = 10 (left: 3 7 10)",
              "7 / 1 = 7 (left: 3 7 10)",
              "3 / 1 = 3 (left: 3 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "node_id 0_2 matches thought position.",
          "timestamp": "2025-05-31T16:55:54.027236",
          "event_type": "validation",
          "details": {
            "node_id": "0_2",
            "state": "10 - 1 = 9 (left: 3 7 9)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 7 10)",
              "7 - 1 = 6 (left: 3 6 10)",
              "10 - 1 = 9 (left: 3 7 9)",
              "10 - 3 = 7 (left: 1 7 7)",
              "7 + 1 = 8 (left: 3 8 10)",
              "3 * 1 = 3 (left: 3 7 10)",
              "10 / 1 = 10 (left: 3 7 10)",
              "7 / 1 = 7 (left: 3 7 10)",
              "3 / 1 = 3 (left: 3 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3",
          "result": "FAIL",
          "reason": "node_id 0_3 does not match thought position.",
          "timestamp": "2025-05-31T16:56:03.646408",
          "event_type": "validation",
          "details": {
            "node_id": "0_3",
            "state": "10 - 3 = 7 (left: 1 7 10)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 7 10)",
              "7 - 1 = 6 (left: 3 6 10)",
              "10 - 1 = 9 (left: 3 7 9)",
              "10 - 3 = 7 (left: 1 7 7)",
              "7 + 1 = 8 (left: 3 8 10)",
              "3 * 1 = 3 (left: 3 7 10)",
              "10 / 1 = 10 (left: 3 7 10)",
              "7 / 1 = 7 (left: 3 7 10)",
              "3 / 1 = 3 (left: 3 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_0",
          "result": "PASS",
          "reason": "node_id 0_3_0 matches thought position.",
          "timestamp": "2025-05-31T16:56:27.567478",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_0",
            "state": "1 + 7 = 8 (left: 8 10)",
            "thoughts": [
              "1 + 7 = 8 (left: 8 10)",
              "7 - 1 = 6 (left: 6 10)",
              "10 - 1 = 9 (left: 7 9)",
              "10 - 7 = 3 (left: 1 3)",
              "7 + 1 = 8 (left: 8 10)",
              "10 / 1 = 10 (left: 7 10)",
              "10 / 7 = 1.43 (left: 1 1.43)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_1",
          "result": "PASS",
          "reason": "node_id 0_3_1 matches thought position.",
          "timestamp": "2025-05-31T16:56:36.570826",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_1",
            "state": "7 - 1 = 6 (left: 6 10)",
            "thoughts": [
              "1 + 7 = 8 (left: 8 10)",
              "7 - 1 = 6 (left: 6 10)",
              "10 - 1 = 9 (left: 7 9)",
              "10 - 7 = 3 (left: 1 3)",
              "7 + 1 = 8 (left: 8 10)",
              "10 / 1 = 10 (left: 7 10)",
              "10 / 7 = 1.43 (left: 1 1.43)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_2",
          "result": "PASS",
          "reason": "node_id 0_3_2 matches thought position.",
          "timestamp": "2025-05-31T16:56:44.716770",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_2",
            "state": "10 - 1 = 9 (left: 7 9)",
            "thoughts": [
              "1 + 7 = 8 (left: 8 10)",
              "7 - 1 = 6 (left: 6 10)",
              "10 - 1 = 9 (left: 7 9)",
              "10 - 7 = 3 (left: 1 3)",
              "7 + 1 = 8 (left: 8 10)",
              "10 / 1 = 10 (left: 7 10)",
              "10 / 7 = 1.43 (left: 1 1.43)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_3",
          "result": "PASS",
          "reason": "node_id 0_3_3 matches thought position.",
          "timestamp": "2025-05-31T16:56:53.893101",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_3",
            "state": "10 - 7 = 3 (left: 1 3)",
            "thoughts": [
              "1 + 7 = 8 (left: 8 10)",
              "7 - 1 = 6 (left: 6 10)",
              "10 - 1 = 9 (left: 7 9)",
              "10 - 7 = 3 (left: 1 3)",
              "7 + 1 = 8 (left: 8 10)",
              "10 / 1 = 10 (left: 7 10)",
              "10 / 7 = 1.43 (left: 1 1.43)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_4",
          "result": "FAIL",
          "reason": "node_id 0_3_4 does not match thought position.",
          "timestamp": "2025-05-31T16:57:47.322849",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_4",
            "state": "10 / 1 = 10 (left: 7 10)",
            "thoughts": [
              "1 + 7 = 8 (left: 8 10)",
              "7 - 1 = 6 (left: 6 10)",
              "10 - 1 = 9 (left: 7 9)",
              "10 - 7 = 3 (left: 1 3)",
              "7 + 1 = 8 (left: 8 10)",
              "10 / 1 = 10 (left: 7 10)",
              "10 / 7 = 1.43 (left: 1 1.43)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_5",
          "result": "FAIL",
          "reason": "node_id 0_3_5 does not match thought position.",
          "timestamp": "2025-05-31T16:57:59.709940",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_5",
            "state": "7 * 1 = 7 (left: 7 10)",
            "thoughts": [
              "1 + 7 = 8 (left: 8 10)",
              "7 - 1 = 6 (left: 6 10)",
              "10 - 1 = 9 (left: 7 9)",
              "10 - 7 = 3 (left: 1 3)",
              "7 + 1 = 8 (left: 8 10)",
              "10 / 1 = 10 (left: 7 10)",
              "10 / 7 = 1.43 (left: 1 1.43)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_6",
          "result": "FAIL",
          "reason": "node_id 0_3_6 does not match thought position.",
          "timestamp": "2025-05-31T16:58:08.832636",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_6",
            "state": "10 * 1 = 10 (left: 10 7)",
            "thoughts": [
              "1 + 7 = 8 (left: 8 10)",
              "7 - 1 = 6 (left: 6 10)",
              "10 - 1 = 9 (left: 7 9)",
              "10 - 7 = 3 (left: 1 3)",
              "7 + 1 = 8 (left: 8 10)",
              "10 / 1 = 10 (left: 7 10)",
              "10 / 7 = 1.43 (left: 1 1.43)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_7",
          "result": "FAIL",
          "reason": "Could not parse node ID 0_3_7 with error list index out of range",
          "timestamp": "2025-05-31T16:58:19.509636",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_7",
            "state": "10 / 7 = 1.43 (left: 1.43 10)",
            "thoughts": [
              "1 + 7 = 8 (left: 8 10)",
              "7 - 1 = 6 (left: 6 10)",
              "10 - 1 = 9 (left: 7 9)",
              "10 - 7 = 3 (left: 1 3)",
              "7 + 1 = 8 (left: 8 10)",
              "10 / 1 = 10 (left: 7 10)",
              "10 / 7 = 1.43 (left: 1 1.43)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4",
          "result": "FAIL",
          "reason": "node_id 0_4 does not match thought position.",
          "timestamp": "2025-05-31T16:58:35.522202",
          "event_type": "validation",
          "details": {
            "node_id": "0_4",
            "state": "7 + 1 = 8 (left: 8 10)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 7 10)",
              "7 - 1 = 6 (left: 3 6 10)",
              "10 - 1 = 9 (left: 3 7 9)",
              "10 - 3 = 7 (left: 1 7 7)",
              "7 + 1 = 8 (left: 3 8 10)",
              "3 * 1 = 3 (left: 3 7 10)",
              "10 / 1 = 10 (left: 3 7 10)",
              "7 / 1 = 7 (left: 3 7 10)",
              "3 / 1 = 3 (left: 3 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_5",
          "result": "FAIL",
          "reason": "node_id 0_5 does not match thought position.",
          "timestamp": "2025-05-31T16:58:45.210323",
          "event_type": "validation",
          "details": {
            "node_id": "0_5",
            "state": "10 - 7 = 3 (left: 1 3)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 7 10)",
              "7 - 1 = 6 (left: 3 6 10)",
              "10 - 1 = 9 (left: 3 7 9)",
              "10 - 3 = 7 (left: 1 7 7)",
              "7 + 1 = 8 (left: 3 8 10)",
              "3 * 1 = 3 (left: 3 7 10)",
              "10 / 1 = 10 (left: 3 7 10)",
              "7 / 1 = 7 (left: 3 7 10)",
              "3 / 1 = 3 (left: 3 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_6",
          "result": "FAIL",
          "reason": "node_id 0_6 does not match thought position.",
          "timestamp": "2025-05-31T16:58:54.982873",
          "event_type": "validation",
          "details": {
            "node_id": "0_6",
            "state": "10 / 7 = 1.43 (left: 1.43 3)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 7 10)",
              "7 - 1 = 6 (left: 3 6 10)",
              "10 - 1 = 9 (left: 3 7 9)",
              "10 - 3 = 7 (left: 1 7 7)",
              "7 + 1 = 8 (left: 3 8 10)",
              "3 * 1 = 3 (left: 3 7 10)",
              "10 / 1 = 10 (left: 3 7 10)",
              "7 / 1 = 7 (left: 3 7 10)",
              "3 / 1 = 3 (left: 3 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_7",
          "result": "FAIL",
          "reason": "node_id 0_7 does not match thought position.",
          "timestamp": "2025-05-31T16:59:03.925697",
          "event_type": "validation",
          "details": {
            "node_id": "0_7",
            "state": "3 * 1 = 3 (left: 3 10)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 7 10)",
              "7 - 1 = 6 (left: 3 6 10)",
              "10 - 1 = 9 (left: 3 7 9)",
              "10 - 3 = 7 (left: 1 7 7)",
              "7 + 1 = 8 (left: 3 8 10)",
              "3 * 1 = 3 (left: 3 7 10)",
              "10 / 1 = 10 (left: 3 7 10)",
              "7 / 1 = 7 (left: 3 7 10)",
              "3 / 1 = 3 (left: 3 7 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_8",
          "result": "FAIL",
          "reason": "node_id 0_8 does not match thought position.",
          "timestamp": "2025-05-31T16:59:11.881216",
          "event_type": "validation",
          "details": {
            "node_id": "0_8",
            "state": "1 * 7 = 7 (left: 7 10)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 7 10)",
              "7 - 1 = 6 (left: 3 6 10)",
              "10 - 1 = 9 (left: 3 7 9)",
              "10 - 3 = 7 (left: 1 7 7)",
              "7 + 1 = 8 (left: 3 8 10)",
              "3 * 1 = 3 (left: 3 7 10)",
              "10 / 1 = 10 (left: 3 7 10)",
              "7 / 1 = 7 (left: 3 7 10)",
              "3 / 1 = 3 (left: 3 7 10)"
            ]
          }
        }
      ]
    },
    "node_state": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "node_state",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-31T16:53:35.537117",
          "event_type": "validation",
          "details": {
            "expected_state": "1 + 3 = 4 (left: 4 7 10)",
            "actual_state": "1 + 3 = 4 (left: 4 7 10)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-31T16:56:10.982457",
          "event_type": "validation",
          "details": {
            "expected_state": "10 - 3 = 7 (left: 1 7 10)",
            "actual_state": "10 - 3 = 7 (left: 1 7 10)"
          }
        }
      ]
    },
    "pruning": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pruning",
          "node_id": "0_0_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T16:53:54.337908",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T16:54:03.702440",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T16:54:22.256556",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T16:54:32.156452",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T16:54:44.005641",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T16:55:08.085734",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T16:55:18.974406",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_7",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T16:55:30.554471",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Value 2.001 meets threshold 3.0",
          "timestamp": "2025-05-31T16:55:43.306273",
          "event_type": "validation",
          "details": {
            "value": 2.001,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "Value 2.001 meets threshold 3.0",
          "timestamp": "2025-05-31T16:55:54.027173",
          "event_type": "validation",
          "details": {
            "value": 2.001,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T16:56:27.567414",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T16:56:36.570756",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T16:56:44.716709",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T16:56:53.893012",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T16:57:47.322775",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T16:57:59.709874",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T16:58:08.832568",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_7",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-31T16:58:19.509561",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T16:58:35.522171",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T16:58:45.210135",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T16:58:54.982789",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_7",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T16:59:03.925612",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_8",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-31T16:59:11.881146",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        }
      ]
    },
    "backtracking_I": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_I",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_0; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-31T16:55:33.730572",
          "event_type": "validation",
          "details": {
            "popped_node": "0_0",
            "expected_popped": "0_0",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_0",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_3; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-31T16:58:22.394387",
          "event_type": "validation",
          "details": {
            "popped_node": "0_3",
            "expected_popped": "0_3",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_3",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
          "timestamp": "2025-05-31T16:59:14.838332",
          "event_type": "validation",
          "details": {
            "popped_node": "0",
            "expected_popped": "0",
            "backtrack_to": "None",
            "expected_parent": "None",
            "validation_details": [
              "Correctly popped expected node 0",
              "Correctly backtracking to parent 'None'"
            ]
          }
        }
      ]
    },
    "backtracking_III": {
      "FAIL": 1,
      "details": [
        {
          "check_name": "backtracking_III",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "All 8 children explored - valid backtrack",
          "timestamp": "2025-05-31T16:55:33.730598",
          "event_type": "validation",
          "details": {
            "total_thoughts": 8,
            "evaluated_children": 8
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_3",
          "result": "FAIL",
          "reason": "Only 8 of 7 children explored",
          "timestamp": "2025-05-31T16:58:22.394411",
          "event_type": "validation",
          "details": {
            "total_thoughts": 7,
            "evaluated_children": 8
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0",
          "result": "PASS",
          "reason": "All 9 children explored - valid backtrack",
          "timestamp": "2025-05-31T16:59:14.838383",
          "event_type": "validation",
          "details": {
            "total_thoughts": 9,
            "evaluated_children": 9
          }
        }
      ]
    },
    "backtracking_IV": {
      "FAIL": 1,
      "details": [
        {
          "check_name": "backtracking_IV",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_1 follows 0_0",
          "timestamp": "2025-05-31T16:55:43.306236",
          "event_type": "validation",
          "details": {
            "popped_node": "0_0",
            "current_node": "0_1",
            "expected_index": 1,
            "actual_index": 1
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_4",
          "result": "FAIL",
          "reason": "State not present within the thoughts: for 0_4 got '7 + 1 = 8 (left: 8 10)'",
          "timestamp": "2025-05-31T16:58:35.522132",
          "event_type": "validation",
          "details": {
            "node_id": "0_4",
            "state": "7 + 1 = 8 (left: 8 10)",
            "thoughts": [
              "1 + 3 = 4 (left: 4 7 10)",
              "7 - 1 = 6 (left: 3 6 10)",
              "10 - 1 = 9 (left: 3 7 9)",
              "10 - 3 = 7 (left: 1 7 7)",
              "7 + 1 = 8 (left: 3 8 10)",
              "3 * 1 = 3 (left: 3 7 10)",
              "10 / 1 = 10 (left: 3 7 10)",
              "7 / 1 = 7 (left: 3 7 10)",
              "3 / 1 = 3 (left: 3 7 10)"
            ]
          }
        }
      ]
    },
    "looping_order": {
      "FAIL": 12,
      "details": [
        {
          "check_name": "looping_order",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T16:59:17.782509",
          "event_type": "validation",
          "details": {
            "state": "1 + 3 = 4 (left: 4 7 10)",
            "thought": "1 + 3 = 4 (left: 4 7 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T16:59:17.782538",
          "event_type": "validation",
          "details": {
            "state": "7 - 1 = 6 (left: 3 6 10)",
            "thought": "7 - 1 = 6 (left: 3 6 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T16:59:17.782547",
          "event_type": "validation",
          "details": {
            "state": "10 - 1 = 9 (left: 3 7 9)",
            "thought": "10 - 1 = 9 (left: 3 7 9)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T16:59:17.782559",
          "event_type": "validation",
          "details": {
            "state": "10 - 3 = 7 (left: 1 7 10)",
            "expected_thought": "10 - 3 = 7 (left: 1 7 7)",
            "child_index": 3
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T16:59:17.782567",
          "event_type": "validation",
          "details": {
            "state": "7 + 1 = 8 (left: 8 10)",
            "expected_thought": "7 + 1 = 8 (left: 3 8 10)",
            "child_index": 4
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_5",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T16:59:17.782575",
          "event_type": "validation",
          "details": {
            "state": "10 - 7 = 3 (left: 1 3)",
            "expected_thought": "3 * 1 = 3 (left: 3 7 10)",
            "child_index": 5
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_6",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T16:59:17.782582",
          "event_type": "validation",
          "details": {
            "state": "10 / 7 = 1.43 (left: 1.43 3)",
            "expected_thought": "10 / 1 = 10 (left: 3 7 10)",
            "child_index": 6
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_7",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T16:59:17.782590",
          "event_type": "validation",
          "details": {
            "state": "3 * 1 = 3 (left: 3 10)",
            "expected_thought": "7 / 1 = 7 (left: 3 7 10)",
            "child_index": 7
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_8",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T16:59:17.782597",
          "event_type": "validation",
          "details": {
            "state": "1 * 7 = 7 (left: 7 10)",
            "expected_thought": "3 / 1 = 3 (left: 3 7 10)",
            "child_index": 8
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T16:59:17.782666",
          "event_type": "validation",
          "details": {
            "state": "4 + 7 = 11 (left: 10 11)",
            "thought": "4 + 7 = 11 (left: 10 11)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T16:59:17.782682",
          "event_type": "validation",
          "details": {
            "state": "7 - 4 = 3 (left: 3 10)",
            "thought": "7 - 4 = 3 (left: 3 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T16:59:17.782690",
          "event_type": "validation",
          "details": {
            "state": "10 - 4 = 6 (left: 6 7)",
            "thought": "10 - 4 = 6 (left: 6 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T16:59:17.782698",
          "event_type": "validation",
          "details": {
            "state": "10 - 7 = 3 (left: 3 4)",
            "thought": "10 - 7 = 3 (left: 3 4)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T16:59:17.782706",
          "event_type": "validation",
          "details": {
            "state": "10 / 4 = 2.5 (left: 2.5 7)",
            "thought": "10 / 4 = 2.5 (left: 2.5 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_5",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T16:59:17.782720",
          "event_type": "validation",
          "details": {
            "state": "7 * 1 = 7 (left: 7 10)",
            "expected_thought": "7 * 4 = 28 (left: 10 28)",
            "child_index": 5
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_6",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T16:59:17.782730",
          "event_type": "validation",
          "details": {
            "state": "10 * 1 = 10 (left: 10 7)",
            "expected_thought": "10 * 4 = 40 (left: 7 40)",
            "child_index": 6
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_7",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T16:59:17.782737",
          "event_type": "validation",
          "details": {
            "state": "10 / 1 = 10 (left: 10 7)",
            "expected_thought": "10 * 7 = 70 (left: 4 70)",
            "child_index": 7
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T16:59:17.782845",
          "event_type": "validation",
          "details": {
            "state": "1 + 7 = 8 (left: 8 10)",
            "thought": "1 + 7 = 8 (left: 8 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T16:59:17.782854",
          "event_type": "validation",
          "details": {
            "state": "7 - 1 = 6 (left: 6 10)",
            "thought": "7 - 1 = 6 (left: 6 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T16:59:17.782862",
          "event_type": "validation",
          "details": {
            "state": "10 - 1 = 9 (left: 7 9)",
            "thought": "10 - 1 = 9 (left: 7 9)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-31T16:59:17.782877",
          "event_type": "validation",
          "details": {
            "state": "10 - 7 = 3 (left: 1 3)",
            "thought": "10 - 7 = 3 (left: 1 3)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_4",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T16:59:17.782886",
          "event_type": "validation",
          "details": {
            "state": "10 / 1 = 10 (left: 7 10)",
            "expected_thought": "7 + 1 = 8 (left: 8 10)",
            "child_index": 4
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_5",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T16:59:17.782900",
          "event_type": "validation",
          "details": {
            "state": "7 * 1 = 7 (left: 7 10)",
            "expected_thought": "10 / 1 = 10 (left: 7 10)",
            "child_index": 5
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_6",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-31T16:59:17.782919",
          "event_type": "validation",
          "details": {
            "state": "10 * 1 = 10 (left: 10 7)",
            "expected_thought": "10 / 7 = 1.43 (left: 1 1.43)",
            "child_index": 6
          }
        }
      ]
    },
    "valid_search_trace": {
      "success_trace": false
    }
  },
  "detailed_results": [
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-31T16:53:26.926435",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State validation passed: Last thought '1 + 3 = 4 (left: 4 7 10)' found in parent's thoughts",
      "timestamp": "2025-05-31T16:53:26.926485",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '1 + 3 = 4 (left: 4 7 10)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "1 + 3 = 4 (left: 4 7 10)",
          "7 - 1 = 6 (left: 3 6 10)",
          "10 - 1 = 9 (left: 3 7 9)",
          "10 - 3 = 7 (left: 1 7 7)",
          "7 + 1 = 8 (left: 3 8 10)",
          "3 * 1 = 3 (left: 3 7 10)",
          "10 / 1 = 10 (left: 3 7 10)",
          "7 / 1 = 7 (left: 3 7 10)",
          "3 / 1 = 3 (left: 3 7 10)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "node_id 0_0 matches thought position.",
      "timestamp": "2025-05-31T16:53:26.926527",
      "event_type": "validation",
      "details": {
        "node_id": "0_0",
        "state": "1 + 3 = 4 (left: 4 7 10)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 7 10)",
          "7 - 1 = 6 (left: 3 6 10)",
          "10 - 1 = 9 (left: 3 7 9)",
          "10 - 3 = 7 (left: 1 7 7)",
          "7 + 1 = 8 (left: 3 8 10)",
          "3 * 1 = 3 (left: 3 7 10)",
          "10 / 1 = 10 (left: 3 7 10)",
          "7 / 1 = 7 (left: 3 7 10)",
          "3 / 1 = 3 (left: 3 7 10)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-31T16:53:35.537117",
      "event_type": "validation",
      "details": {
        "expected_state": "1 + 3 = 4 (left: 4 7 10)",
        "actual_state": "1 + 3 = 4 (left: 4 7 10)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T16:53:54.337908",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_0",
      "result": "PASS",
      "reason": "node_id 0_0_0 matches thought position.",
      "timestamp": "2025-05-31T16:53:54.337971",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_0",
        "state": "4 + 7 = 11 (left: 10 11)",
        "thoughts": [
          "4 + 7 = 11 (left: 10 11)",
          "7 - 4 = 3 (left: 3 10)",
          "10 - 4 = 6 (left: 6 7)",
          "10 - 7 = 3 (left: 3 4)",
          "10 / 4 = 2.5 (left: 2.5 7)",
          "7 * 4 = 28 (left: 10 28)",
          "10 * 4 = 40 (left: 7 40)",
          "10 * 7 = 70 (left: 4 70)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T16:54:03.702440",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "node_id 0_0_1 matches thought position.",
      "timestamp": "2025-05-31T16:54:03.702508",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_1",
        "state": "7 - 4 = 3 (left: 3 10)",
        "thoughts": [
          "4 + 7 = 11 (left: 10 11)",
          "7 - 4 = 3 (left: 3 10)",
          "10 - 4 = 6 (left: 6 7)",
          "10 - 7 = 3 (left: 3 4)",
          "10 / 4 = 2.5 (left: 2.5 7)",
          "7 * 4 = 28 (left: 10 28)",
          "10 * 4 = 40 (left: 7 40)",
          "10 * 7 = 70 (left: 4 70)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T16:54:22.256556",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_2",
      "result": "PASS",
      "reason": "node_id 0_0_2 matches thought position.",
      "timestamp": "2025-05-31T16:54:22.256640",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_2",
        "state": "10 - 4 = 6 (left: 6 7)",
        "thoughts": [
          "4 + 7 = 11 (left: 10 11)",
          "7 - 4 = 3 (left: 3 10)",
          "10 - 4 = 6 (left: 6 7)",
          "10 - 7 = 3 (left: 3 4)",
          "10 / 4 = 2.5 (left: 2.5 7)",
          "7 * 4 = 28 (left: 10 28)",
          "10 * 4 = 40 (left: 7 40)",
          "10 * 7 = 70 (left: 4 70)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T16:54:32.156452",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_3",
      "result": "PASS",
      "reason": "node_id 0_0_3 matches thought position.",
      "timestamp": "2025-05-31T16:54:32.156524",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_3",
        "state": "10 - 7 = 3 (left: 3 4)",
        "thoughts": [
          "4 + 7 = 11 (left: 10 11)",
          "7 - 4 = 3 (left: 3 10)",
          "10 - 4 = 6 (left: 6 7)",
          "10 - 7 = 3 (left: 3 4)",
          "10 / 4 = 2.5 (left: 2.5 7)",
          "7 * 4 = 28 (left: 10 28)",
          "10 * 4 = 40 (left: 7 40)",
          "10 * 7 = 70 (left: 4 70)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T16:54:44.005641",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_4",
      "result": "PASS",
      "reason": "node_id 0_0_4 matches thought position.",
      "timestamp": "2025-05-31T16:54:44.005705",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_4",
        "state": "10 / 4 = 2.5 (left: 2.5 7)",
        "thoughts": [
          "4 + 7 = 11 (left: 10 11)",
          "7 - 4 = 3 (left: 3 10)",
          "10 - 4 = 6 (left: 6 7)",
          "10 - 7 = 3 (left: 3 4)",
          "10 / 4 = 2.5 (left: 2.5 7)",
          "7 * 4 = 28 (left: 10 28)",
          "10 * 4 = 40 (left: 7 40)",
          "10 * 7 = 70 (left: 4 70)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T16:55:08.085734",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_5",
      "result": "FAIL",
      "reason": "node_id 0_0_5 does not match thought position.",
      "timestamp": "2025-05-31T16:55:08.085803",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_5",
        "state": "7 * 1 = 7 (left: 7 10)",
        "thoughts": [
          "4 + 7 = 11 (left: 10 11)",
          "7 - 4 = 3 (left: 3 10)",
          "10 - 4 = 6 (left: 6 7)",
          "10 - 7 = 3 (left: 3 4)",
          "10 / 4 = 2.5 (left: 2.5 7)",
          "7 * 4 = 28 (left: 10 28)",
          "10 * 4 = 40 (left: 7 40)",
          "10 * 7 = 70 (left: 4 70)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T16:55:18.974406",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_6",
      "result": "FAIL",
      "reason": "node_id 0_0_6 does not match thought position.",
      "timestamp": "2025-05-31T16:55:18.974490",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_6",
        "state": "10 * 1 = 10 (left: 10 7)",
        "thoughts": [
          "4 + 7 = 11 (left: 10 11)",
          "7 - 4 = 3 (left: 3 10)",
          "10 - 4 = 6 (left: 6 7)",
          "10 - 7 = 3 (left: 3 4)",
          "10 / 4 = 2.5 (left: 2.5 7)",
          "7 * 4 = 28 (left: 10 28)",
          "10 * 4 = 40 (left: 7 40)",
          "10 * 7 = 70 (left: 4 70)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_7",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T16:55:30.554471",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_7",
      "result": "FAIL",
      "reason": "node_id 0_0_7 does not match thought position.",
      "timestamp": "2025-05-31T16:55:30.554547",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_7",
        "state": "10 / 1 = 10 (left: 10 7)",
        "thoughts": [
          "4 + 7 = 11 (left: 10 11)",
          "7 - 4 = 3 (left: 3 10)",
          "10 - 4 = 6 (left: 6 7)",
          "10 - 7 = 3 (left: 3 4)",
          "10 / 4 = 2.5 (left: 2.5 7)",
          "7 * 4 = 28 (left: 10 28)",
          "10 * 4 = 40 (left: 7 40)",
          "10 * 7 = 70 (left: 4 70)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_0; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-31T16:55:33.730572",
      "event_type": "validation",
      "details": {
        "popped_node": "0_0",
        "expected_popped": "0_0",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_0",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "All 8 children explored - valid backtrack",
      "timestamp": "2025-05-31T16:55:33.730598",
      "event_type": "validation",
      "details": {
        "total_thoughts": 8,
        "evaluated_children": 8
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_1 follows 0_0",
      "timestamp": "2025-05-31T16:55:43.306236",
      "event_type": "validation",
      "details": {
        "popped_node": "0_0",
        "current_node": "0_1",
        "expected_index": 1,
        "actual_index": 1
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Value 2.001 meets threshold 3.0",
      "timestamp": "2025-05-31T16:55:43.306273",
      "event_type": "validation",
      "details": {
        "value": 2.001,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "node_id 0_1 matches thought position.",
      "timestamp": "2025-05-31T16:55:43.306311",
      "event_type": "validation",
      "details": {
        "node_id": "0_1",
        "state": "7 - 1 = 6 (left: 3 6 10)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 7 10)",
          "7 - 1 = 6 (left: 3 6 10)",
          "10 - 1 = 9 (left: 3 7 9)",
          "10 - 3 = 7 (left: 1 7 7)",
          "7 + 1 = 8 (left: 3 8 10)",
          "3 * 1 = 3 (left: 3 7 10)",
          "10 / 1 = 10 (left: 3 7 10)",
          "7 / 1 = 7 (left: 3 7 10)",
          "3 / 1 = 3 (left: 3 7 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "Value 2.001 meets threshold 3.0",
      "timestamp": "2025-05-31T16:55:54.027173",
      "event_type": "validation",
      "details": {
        "value": 2.001,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "node_id 0_2 matches thought position.",
      "timestamp": "2025-05-31T16:55:54.027236",
      "event_type": "validation",
      "details": {
        "node_id": "0_2",
        "state": "10 - 1 = 9 (left: 3 7 9)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 7 10)",
          "7 - 1 = 6 (left: 3 6 10)",
          "10 - 1 = 9 (left: 3 7 9)",
          "10 - 3 = 7 (left: 1 7 7)",
          "7 + 1 = 8 (left: 3 8 10)",
          "3 * 1 = 3 (left: 3 7 10)",
          "10 / 1 = 10 (left: 3 7 10)",
          "7 / 1 = 7 (left: 3 7 10)",
          "3 / 1 = 3 (left: 3 7 10)"
        ]
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-31T16:56:03.646298",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_3",
      "result": "FAIL",
      "reason": "State validation failed: Last thought '10 - 3 = 7 (left: 1 7 10)' not found in parent's thoughts",
      "timestamp": "2025-05-31T16:56:03.646369",
      "event_type": "validation",
      "details": {
        "validation_errors": [
          "Last thought '10 - 3 = 7 (left: 1 7 10)' not found in parent's thoughts"
        ],
        "parent_thoughts": [
          "1 + 3 = 4 (left: 4 7 10)",
          "7 - 1 = 6 (left: 3 6 10)",
          "10 - 1 = 9 (left: 3 7 9)",
          "10 - 3 = 7 (left: 1 7 7)",
          "7 + 1 = 8 (left: 3 8 10)",
          "3 * 1 = 3 (left: 3 7 10)",
          "10 / 1 = 10 (left: 3 7 10)",
          "7 / 1 = 7 (left: 3 7 10)",
          "3 / 1 = 3 (left: 3 7 10)"
        ],
        "parent_state": null,
        "current_state": [
          "10 - 3 = 7 (left: 1 7 10)"
        ]
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3",
      "result": "FAIL",
      "reason": "node_id 0_3 does not match thought position.",
      "timestamp": "2025-05-31T16:56:03.646408",
      "event_type": "validation",
      "details": {
        "node_id": "0_3",
        "state": "10 - 3 = 7 (left: 1 7 10)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 7 10)",
          "7 - 1 = 6 (left: 3 6 10)",
          "10 - 1 = 9 (left: 3 7 9)",
          "10 - 3 = 7 (left: 1 7 7)",
          "7 + 1 = 8 (left: 3 8 10)",
          "3 * 1 = 3 (left: 3 7 10)",
          "10 / 1 = 10 (left: 3 7 10)",
          "7 / 1 = 7 (left: 3 7 10)",
          "3 / 1 = 3 (left: 3 7 10)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-31T16:56:10.982457",
      "event_type": "validation",
      "details": {
        "expected_state": "10 - 3 = 7 (left: 1 7 10)",
        "actual_state": "10 - 3 = 7 (left: 1 7 10)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T16:56:27.567414",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_0",
      "result": "PASS",
      "reason": "node_id 0_3_0 matches thought position.",
      "timestamp": "2025-05-31T16:56:27.567478",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_0",
        "state": "1 + 7 = 8 (left: 8 10)",
        "thoughts": [
          "1 + 7 = 8 (left: 8 10)",
          "7 - 1 = 6 (left: 6 10)",
          "10 - 1 = 9 (left: 7 9)",
          "10 - 7 = 3 (left: 1 3)",
          "7 + 1 = 8 (left: 8 10)",
          "10 / 1 = 10 (left: 7 10)",
          "10 / 7 = 1.43 (left: 1 1.43)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T16:56:36.570756",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_1",
      "result": "PASS",
      "reason": "node_id 0_3_1 matches thought position.",
      "timestamp": "2025-05-31T16:56:36.570826",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_1",
        "state": "7 - 1 = 6 (left: 6 10)",
        "thoughts": [
          "1 + 7 = 8 (left: 8 10)",
          "7 - 1 = 6 (left: 6 10)",
          "10 - 1 = 9 (left: 7 9)",
          "10 - 7 = 3 (left: 1 3)",
          "7 + 1 = 8 (left: 8 10)",
          "10 / 1 = 10 (left: 7 10)",
          "10 / 7 = 1.43 (left: 1 1.43)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T16:56:44.716709",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_2",
      "result": "PASS",
      "reason": "node_id 0_3_2 matches thought position.",
      "timestamp": "2025-05-31T16:56:44.716770",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_2",
        "state": "10 - 1 = 9 (left: 7 9)",
        "thoughts": [
          "1 + 7 = 8 (left: 8 10)",
          "7 - 1 = 6 (left: 6 10)",
          "10 - 1 = 9 (left: 7 9)",
          "10 - 7 = 3 (left: 1 3)",
          "7 + 1 = 8 (left: 8 10)",
          "10 / 1 = 10 (left: 7 10)",
          "10 / 7 = 1.43 (left: 1 1.43)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T16:56:53.893012",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_3",
      "result": "PASS",
      "reason": "node_id 0_3_3 matches thought position.",
      "timestamp": "2025-05-31T16:56:53.893101",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_3",
        "state": "10 - 7 = 3 (left: 1 3)",
        "thoughts": [
          "1 + 7 = 8 (left: 8 10)",
          "7 - 1 = 6 (left: 6 10)",
          "10 - 1 = 9 (left: 7 9)",
          "10 - 7 = 3 (left: 1 3)",
          "7 + 1 = 8 (left: 8 10)",
          "10 / 1 = 10 (left: 7 10)",
          "10 / 7 = 1.43 (left: 1 1.43)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T16:57:47.322775",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_4",
      "result": "FAIL",
      "reason": "node_id 0_3_4 does not match thought position.",
      "timestamp": "2025-05-31T16:57:47.322849",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_4",
        "state": "10 / 1 = 10 (left: 7 10)",
        "thoughts": [
          "1 + 7 = 8 (left: 8 10)",
          "7 - 1 = 6 (left: 6 10)",
          "10 - 1 = 9 (left: 7 9)",
          "10 - 7 = 3 (left: 1 3)",
          "7 + 1 = 8 (left: 8 10)",
          "10 / 1 = 10 (left: 7 10)",
          "10 / 7 = 1.43 (left: 1 1.43)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T16:57:59.709874",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_5",
      "result": "FAIL",
      "reason": "node_id 0_3_5 does not match thought position.",
      "timestamp": "2025-05-31T16:57:59.709940",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_5",
        "state": "7 * 1 = 7 (left: 7 10)",
        "thoughts": [
          "1 + 7 = 8 (left: 8 10)",
          "7 - 1 = 6 (left: 6 10)",
          "10 - 1 = 9 (left: 7 9)",
          "10 - 7 = 3 (left: 1 3)",
          "7 + 1 = 8 (left: 8 10)",
          "10 / 1 = 10 (left: 7 10)",
          "10 / 7 = 1.43 (left: 1 1.43)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T16:58:08.832568",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_6",
      "result": "FAIL",
      "reason": "node_id 0_3_6 does not match thought position.",
      "timestamp": "2025-05-31T16:58:08.832636",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_6",
        "state": "10 * 1 = 10 (left: 10 7)",
        "thoughts": [
          "1 + 7 = 8 (left: 8 10)",
          "7 - 1 = 6 (left: 6 10)",
          "10 - 1 = 9 (left: 7 9)",
          "10 - 7 = 3 (left: 1 3)",
          "7 + 1 = 8 (left: 8 10)",
          "10 / 1 = 10 (left: 7 10)",
          "10 / 7 = 1.43 (left: 1 1.43)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_7",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-31T16:58:19.509561",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_7",
      "result": "FAIL",
      "reason": "Could not parse node ID 0_3_7 with error list index out of range",
      "timestamp": "2025-05-31T16:58:19.509636",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_7",
        "state": "10 / 7 = 1.43 (left: 1.43 10)",
        "thoughts": [
          "1 + 7 = 8 (left: 8 10)",
          "7 - 1 = 6 (left: 6 10)",
          "10 - 1 = 9 (left: 7 9)",
          "10 - 7 = 3 (left: 1 3)",
          "7 + 1 = 8 (left: 8 10)",
          "10 / 1 = 10 (left: 7 10)",
          "10 / 7 = 1.43 (left: 1 1.43)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_3; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-31T16:58:22.394387",
      "event_type": "validation",
      "details": {
        "popped_node": "0_3",
        "expected_popped": "0_3",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_3",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_3",
      "result": "FAIL",
      "reason": "Only 8 of 7 children explored",
      "timestamp": "2025-05-31T16:58:22.394411",
      "event_type": "validation",
      "details": {
        "total_thoughts": 7,
        "evaluated_children": 8
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_4",
      "result": "FAIL",
      "reason": "State not present within the thoughts: for 0_4 got '7 + 1 = 8 (left: 8 10)'",
      "timestamp": "2025-05-31T16:58:35.522132",
      "event_type": "validation",
      "details": {
        "node_id": "0_4",
        "state": "7 + 1 = 8 (left: 8 10)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 7 10)",
          "7 - 1 = 6 (left: 3 6 10)",
          "10 - 1 = 9 (left: 3 7 9)",
          "10 - 3 = 7 (left: 1 7 7)",
          "7 + 1 = 8 (left: 3 8 10)",
          "3 * 1 = 3 (left: 3 7 10)",
          "10 / 1 = 10 (left: 3 7 10)",
          "7 / 1 = 7 (left: 3 7 10)",
          "3 / 1 = 3 (left: 3 7 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T16:58:35.522171",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4",
      "result": "FAIL",
      "reason": "node_id 0_4 does not match thought position.",
      "timestamp": "2025-05-31T16:58:35.522202",
      "event_type": "validation",
      "details": {
        "node_id": "0_4",
        "state": "7 + 1 = 8 (left: 8 10)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 7 10)",
          "7 - 1 = 6 (left: 3 6 10)",
          "10 - 1 = 9 (left: 3 7 9)",
          "10 - 3 = 7 (left: 1 7 7)",
          "7 + 1 = 8 (left: 3 8 10)",
          "3 * 1 = 3 (left: 3 7 10)",
          "10 / 1 = 10 (left: 3 7 10)",
          "7 / 1 = 7 (left: 3 7 10)",
          "3 / 1 = 3 (left: 3 7 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T16:58:45.210135",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_5",
      "result": "FAIL",
      "reason": "node_id 0_5 does not match thought position.",
      "timestamp": "2025-05-31T16:58:45.210323",
      "event_type": "validation",
      "details": {
        "node_id": "0_5",
        "state": "10 - 7 = 3 (left: 1 3)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 7 10)",
          "7 - 1 = 6 (left: 3 6 10)",
          "10 - 1 = 9 (left: 3 7 9)",
          "10 - 3 = 7 (left: 1 7 7)",
          "7 + 1 = 8 (left: 3 8 10)",
          "3 * 1 = 3 (left: 3 7 10)",
          "10 / 1 = 10 (left: 3 7 10)",
          "7 / 1 = 7 (left: 3 7 10)",
          "3 / 1 = 3 (left: 3 7 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T16:58:54.982789",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_6",
      "result": "FAIL",
      "reason": "node_id 0_6 does not match thought position.",
      "timestamp": "2025-05-31T16:58:54.982873",
      "event_type": "validation",
      "details": {
        "node_id": "0_6",
        "state": "10 / 7 = 1.43 (left: 1.43 3)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 7 10)",
          "7 - 1 = 6 (left: 3 6 10)",
          "10 - 1 = 9 (left: 3 7 9)",
          "10 - 3 = 7 (left: 1 7 7)",
          "7 + 1 = 8 (left: 3 8 10)",
          "3 * 1 = 3 (left: 3 7 10)",
          "10 / 1 = 10 (left: 3 7 10)",
          "7 / 1 = 7 (left: 3 7 10)",
          "3 / 1 = 3 (left: 3 7 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_7",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T16:59:03.925612",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_7",
      "result": "FAIL",
      "reason": "node_id 0_7 does not match thought position.",
      "timestamp": "2025-05-31T16:59:03.925697",
      "event_type": "validation",
      "details": {
        "node_id": "0_7",
        "state": "3 * 1 = 3 (left: 3 10)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 7 10)",
          "7 - 1 = 6 (left: 3 6 10)",
          "10 - 1 = 9 (left: 3 7 9)",
          "10 - 3 = 7 (left: 1 7 7)",
          "7 + 1 = 8 (left: 3 8 10)",
          "3 * 1 = 3 (left: 3 7 10)",
          "10 / 1 = 10 (left: 3 7 10)",
          "7 / 1 = 7 (left: 3 7 10)",
          "3 / 1 = 3 (left: 3 7 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_8",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-31T16:59:11.881146",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_8",
      "result": "FAIL",
      "reason": "node_id 0_8 does not match thought position.",
      "timestamp": "2025-05-31T16:59:11.881216",
      "event_type": "validation",
      "details": {
        "node_id": "0_8",
        "state": "1 * 7 = 7 (left: 7 10)",
        "thoughts": [
          "1 + 3 = 4 (left: 4 7 10)",
          "7 - 1 = 6 (left: 3 6 10)",
          "10 - 1 = 9 (left: 3 7 9)",
          "10 - 3 = 7 (left: 1 7 7)",
          "7 + 1 = 8 (left: 3 8 10)",
          "3 * 1 = 3 (left: 3 7 10)",
          "10 / 1 = 10 (left: 3 7 10)",
          "7 / 1 = 7 (left: 3 7 10)",
          "3 / 1 = 3 (left: 3 7 10)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
      "timestamp": "2025-05-31T16:59:14.838332",
      "event_type": "validation",
      "details": {
        "popped_node": "0",
        "expected_popped": "0",
        "backtrack_to": "None",
        "expected_parent": "None",
        "validation_details": [
          "Correctly popped expected node 0",
          "Correctly backtracking to parent 'None'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0",
      "result": "PASS",
      "reason": "All 9 children explored - valid backtrack",
      "timestamp": "2025-05-31T16:59:14.838383",
      "event_type": "validation",
      "details": {
        "total_thoughts": 9,
        "evaluated_children": 9
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T16:59:17.782509",
      "event_type": "validation",
      "details": {
        "state": "1 + 3 = 4 (left: 4 7 10)",
        "thought": "1 + 3 = 4 (left: 4 7 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T16:59:17.782538",
      "event_type": "validation",
      "details": {
        "state": "7 - 1 = 6 (left: 3 6 10)",
        "thought": "7 - 1 = 6 (left: 3 6 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T16:59:17.782547",
      "event_type": "validation",
      "details": {
        "state": "10 - 1 = 9 (left: 3 7 9)",
        "thought": "10 - 1 = 9 (left: 3 7 9)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T16:59:17.782559",
      "event_type": "validation",
      "details": {
        "state": "10 - 3 = 7 (left: 1 7 10)",
        "expected_thought": "10 - 3 = 7 (left: 1 7 7)",
        "child_index": 3
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T16:59:17.782567",
      "event_type": "validation",
      "details": {
        "state": "7 + 1 = 8 (left: 8 10)",
        "expected_thought": "7 + 1 = 8 (left: 3 8 10)",
        "child_index": 4
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_5",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T16:59:17.782575",
      "event_type": "validation",
      "details": {
        "state": "10 - 7 = 3 (left: 1 3)",
        "expected_thought": "3 * 1 = 3 (left: 3 7 10)",
        "child_index": 5
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_6",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T16:59:17.782582",
      "event_type": "validation",
      "details": {
        "state": "10 / 7 = 1.43 (left: 1.43 3)",
        "expected_thought": "10 / 1 = 10 (left: 3 7 10)",
        "child_index": 6
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_7",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T16:59:17.782590",
      "event_type": "validation",
      "details": {
        "state": "3 * 1 = 3 (left: 3 10)",
        "expected_thought": "7 / 1 = 7 (left: 3 7 10)",
        "child_index": 7
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_8",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T16:59:17.782597",
      "event_type": "validation",
      "details": {
        "state": "1 * 7 = 7 (left: 7 10)",
        "expected_thought": "3 / 1 = 3 (left: 3 7 10)",
        "child_index": 8
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T16:59:17.782666",
      "event_type": "validation",
      "details": {
        "state": "4 + 7 = 11 (left: 10 11)",
        "thought": "4 + 7 = 11 (left: 10 11)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T16:59:17.782682",
      "event_type": "validation",
      "details": {
        "state": "7 - 4 = 3 (left: 3 10)",
        "thought": "7 - 4 = 3 (left: 3 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T16:59:17.782690",
      "event_type": "validation",
      "details": {
        "state": "10 - 4 = 6 (left: 6 7)",
        "thought": "10 - 4 = 6 (left: 6 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T16:59:17.782698",
      "event_type": "validation",
      "details": {
        "state": "10 - 7 = 3 (left: 3 4)",
        "thought": "10 - 7 = 3 (left: 3 4)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T16:59:17.782706",
      "event_type": "validation",
      "details": {
        "state": "10 / 4 = 2.5 (left: 2.5 7)",
        "thought": "10 / 4 = 2.5 (left: 2.5 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_5",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T16:59:17.782720",
      "event_type": "validation",
      "details": {
        "state": "7 * 1 = 7 (left: 7 10)",
        "expected_thought": "7 * 4 = 28 (left: 10 28)",
        "child_index": 5
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_6",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T16:59:17.782730",
      "event_type": "validation",
      "details": {
        "state": "10 * 1 = 10 (left: 10 7)",
        "expected_thought": "10 * 4 = 40 (left: 7 40)",
        "child_index": 6
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_7",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T16:59:17.782737",
      "event_type": "validation",
      "details": {
        "state": "10 / 1 = 10 (left: 10 7)",
        "expected_thought": "10 * 7 = 70 (left: 4 70)",
        "child_index": 7
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T16:59:17.782845",
      "event_type": "validation",
      "details": {
        "state": "1 + 7 = 8 (left: 8 10)",
        "thought": "1 + 7 = 8 (left: 8 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T16:59:17.782854",
      "event_type": "validation",
      "details": {
        "state": "7 - 1 = 6 (left: 6 10)",
        "thought": "7 - 1 = 6 (left: 6 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T16:59:17.782862",
      "event_type": "validation",
      "details": {
        "state": "10 - 1 = 9 (left: 7 9)",
        "thought": "10 - 1 = 9 (left: 7 9)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-31T16:59:17.782877",
      "event_type": "validation",
      "details": {
        "state": "10 - 7 = 3 (left: 1 3)",
        "thought": "10 - 7 = 3 (left: 1 3)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_4",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T16:59:17.782886",
      "event_type": "validation",
      "details": {
        "state": "10 / 1 = 10 (left: 7 10)",
        "expected_thought": "7 + 1 = 8 (left: 8 10)",
        "child_index": 4
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_5",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T16:59:17.782900",
      "event_type": "validation",
      "details": {
        "state": "7 * 1 = 7 (left: 7 10)",
        "expected_thought": "10 / 1 = 10 (left: 7 10)",
        "child_index": 5
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_6",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-31T16:59:17.782919",
      "event_type": "validation",
      "details": {
        "state": "10 * 1 = 10 (left: 10 7)",
        "expected_thought": "10 / 7 = 1.43 (left: 1 1.43)",
        "child_index": 6
      }
    }
  ],
  "legacy_log": [
    {
      "event": "push",
      "node_id": "0",
      "issues": [],
      "log": []
    },
    {
      "event": "push",
      "node_id": "0_0",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_0 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '1 + 3 = 4 (left: 4 7 10)' found in parent's thoughts",
        "\u2705 Node 0_0 matches thought position.",
        "\u2705 State consistency check passed for node 0_0"
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_5",
      "issues": [
        "Order error: node_id 0_0_5 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_0_5 with value 0.003 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_6",
      "issues": [
        "Order error: node_id 0_0_6 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_0_6 with value 0.003 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_7",
      "issues": [
        "Order error: node_id 0_0_7 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_0_7 with value 0.003 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "pop",
      "node_id": "",
      "issues": [
        "\u274c All children of node 0_3 were not explored \u2014 invalid reason for backtracking."
      ],
      "log": [
        "\u2705 Popped 0_0 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_0; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_0 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_3 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_3; Correctly backtracking to parent '0'",
        "\u2705 Popped 0 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to 'None'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
        "\u2705 All children of node 0 were explored \u2014 valid reason for backtracking."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1",
      "issues": [],
      "log": [
        "\u2705 Sequential child node validation: pushing 0_1 after popping 0_0 is correct.",
        "\u2705 Node 0_1 with value 2.001 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_2 with value 2.001 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3",
      "issues": [
        "State validation error: Last thought '10 - 3 = 7 (left: 1 7 10)' not found in parent's thoughts",
        "Order error: node_id 0_3 does not match thought position."
      ],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_3 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State consistency check passed for node 0_3"
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_4",
      "issues": [
        "Order error: node_id 0_3_4 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_3_4 with value 0.003 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_5",
      "issues": [
        "Order error: node_id 0_3_5 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_3_5 with value 0.003 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_6",
      "issues": [
        "Order error: node_id 0_3_6 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_3_6 with value 0.003 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_7",
      "issues": [
        "Node ID parse error for 0_3_7."
      ],
      "log": [
        "\u2705 Node 0_3_7 with value 1.002 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4",
      "issues": [
        "State '7 + 1 = 8 (left: 8 10)' is not found in thoughts for node 0_4",
        "Order error: node_id 0_4 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_4 with value 0.003 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_5",
      "issues": [
        "Order error: node_id 0_5 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_5 with value 0.003 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_6",
      "issues": [
        "Order error: node_id 0_6 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_6 with value 0.003 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_7",
      "issues": [
        "Order error: node_id 0_7 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_7 with value 0.003 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_8",
      "issues": [
        "Order error: node_id 0_8 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_8 with value 0.003 less than 3.0 pruned successfully."
      ]
    }
  ],
  "tree_trace": {
    "0": {
      "state": null,
      "thought": "1 + 3 = 4 (left: 4 7 10)\n7 - 1 = 6 (left: 3 6 10)\n10 - 1 = 9 (left: 3 7 9)\n10 - 3 = 7 (left: 1 7 7)\n7 + 1 = 8 (left: 3 8 10)\n3 * 1 = 3 (left: 3 7 10)\n10 / 1 = 10 (left: 3 7 10)\n7 / 1 = 7 (left: 3 7 10)\n3 / 1 = 3 (left: 3 7 10)",
      "value": null,
      "opening_remark": null,
      "children": {
        "0_0": {
          "state": "1 + 3 = 4 (left: 4 7 10)",
          "thought": "4 + 7 = 11 (left: 10 11)\n7 - 4 = 3 (left: 3 10)\n10 - 4 = 6 (left: 6 7)\n10 - 7 = 3 (left: 3 4)\n10 / 4 = 2.5 (left: 2.5 7)\n7 * 4 = 28 (left: 10 28)\n10 * 4 = 40 (left: 7 40)\n10 * 7 = 70 (left: 4 70)",
          "value": 3.0,
          "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
          "children": {
            "0_0_0": {
              "state": "1 + 3 = 4 (left: 4 7 10)\n4 + 7 = 11 (left: 10 11)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_1": {
              "state": "1 + 3 = 4 (left: 4 7 10)\n7 - 4 = 3 (left: 3 10)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_2": {
              "state": "1 + 3 = 4 (left: 4 7 10)\n10 - 4 = 6 (left: 6 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_3": {
              "state": "1 + 3 = 4 (left: 4 7 10)\n10 - 7 = 3 (left: 3 4)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_4": {
              "state": "1 + 3 = 4 (left: 4 7 10)\n10 / 4 = 2.5 (left: 2.5 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_5": {
              "state": "1 + 3 = 4 (left: 4 7 10)\n7 * 1 = 7 (left: 7 10)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_6": {
              "state": "1 + 3 = 4 (left: 4 7 10)\n10 * 1 = 10 (left: 10 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_7": {
              "state": "1 + 3 = 4 (left: 4 7 10)\n10 / 1 = 10 (left: 10 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_1": {
          "state": "7 - 1 = 6 (left: 3 6 10)",
          "thought": null,
          "value": 2.001,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_2": {
          "state": "10 - 1 = 9 (left: 3 7 9)",
          "thought": null,
          "value": 2.001,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_3": {
          "state": "10 - 3 = 7 (left: 1 7 10)",
          "thought": "1 + 7 = 8 (left: 8 10)\n7 - 1 = 6 (left: 6 10)\n10 - 1 = 9 (left: 7 9)\n10 - 7 = 3 (left: 1 3)\n7 + 1 = 8 (left: 8 10)\n10 / 1 = 10 (left: 7 10)\n10 / 7 = 1.43 (left: 1 1.43)",
          "value": 3.0,
          "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
          "children": {
            "0_3_0": {
              "state": "10 - 3 = 7 (left: 1 7 10)\n1 + 7 = 8 (left: 8 10)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_1": {
              "state": "10 - 3 = 7 (left: 1 7 10)\n7 - 1 = 6 (left: 6 10)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_2": {
              "state": "10 - 3 = 7 (left: 1 7 10)\n10 - 1 = 9 (left: 7 9)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_3": {
              "state": "10 - 3 = 7 (left: 1 7 10)\n10 - 7 = 3 (left: 1 3)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_4": {
              "state": "10 - 3 = 7 (left: 1 7 10)\n10 / 1 = 10 (left: 7 10)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_5": {
              "state": "10 - 3 = 7 (left: 1 7 10)\n7 * 1 = 7 (left: 7 10)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_6": {
              "state": "10 - 3 = 7 (left: 1 7 10)\n10 * 1 = 10 (left: 10 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_7": {
              "state": "10 - 3 = 7 (left: 1 7 10)\n10 / 7 = 1.43 (left: 1.43 10)",
              "thought": null,
              "value": 1.002,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_4": {
          "state": "7 + 1 = 8 (left: 8 10)",
          "thought": null,
          "value": 0.003,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_5": {
          "state": "10 - 7 = 3 (left: 1 3)",
          "thought": null,
          "value": 0.003,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_6": {
          "state": "10 / 7 = 1.43 (left: 1.43 3)",
          "thought": null,
          "value": 0.003,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_7": {
          "state": "3 * 1 = 3 (left: 3 10)",
          "thought": null,
          "value": 0.003,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_8": {
          "state": "1 * 7 = 7 (left: 7 10)",
          "thought": null,
          "value": 0.003,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        }
      },
      "closing_remark": null,
      "backtracked": false
    }
  }
}