{
  "summary": {
    "total_checks": 89,
    "passed": 89,
    "failed": 0
  },
  "checks_by_type": {
    "pruning": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pruning",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "Value 2.001 meets threshold 3.0",
          "timestamp": "2025-05-30T11:31:17.990905",
          "event_type": "validation",
          "details": {
            "value": 2.001,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:31:53.517045",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:32:04.415765",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:32:15.118037",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:32:22.999320",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:32:32.834427",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:32:42.666484",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:32:51.706470",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_7",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:33:00.736556",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_8",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:33:10.693283",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_9",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-30T11:33:24.237509",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:34:02.285160",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:34:12.290224",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:34:20.543594",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:34:34.861255",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_4_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:34:59.632888",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_4_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:35:06.550154",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_4_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:35:14.507306",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        }
      ]
    },
    "child_id_assignment": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "node_id 0_0 matches thought position.",
          "timestamp": "2025-05-30T11:31:17.991008",
          "event_type": "validation",
          "details": {
            "node_id": "0_0",
            "state": "1 + 6 = 7 (left: 7 9 12)",
            "thoughts": [
              "1 + 6 = 7 (left: 7 9 12)",
              "12 - 1 = 11 (left: 6 9 11)",
              "9 - 1 = 8 (left: 6 8 12)",
              "6 * 1 = 6 (left: 6 9 12)",
              "12 / 1 = 12 (left: 6 9 12)",
              "9 / 1 = 9 (left: 6 9 12)",
              "6 / 1 = 6 (left: 6 9 12)",
              "9 + 6 = 15 (left: 1 12 15)",
              "12 - 6 = 6 (left: 1 6 9)",
              "12 / 6 = 2 (left: 1 2 9)",
              "9 - 6 = 3 (left: 1 3 12)",
              "9 / 6 = 1.5 (left: 1 1.5 12)",
              "12 + 1 = 13 (left: 6 9 13)",
              "12 - 9 = 3 (left: 1 3 6)",
              "12 / 9 = 1.333 (left: 1 1.333 6)",
              "9 * 1 = 9 (left: 6 9 12)",
              "9 - 1 = 8 (left: 6 8 12)",
              "9 / 1 = 9 (left: 6 9 12)",
              "6 + 1 = 7 (left: 7 9 12)",
              "6 - 1 = 5 (left: 5 9 12)",
              "6 / 1 = 6 (left: 6 9 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "node_id 0_1 matches thought position.",
          "timestamp": "2025-05-30T11:31:29.498521",
          "event_type": "validation",
          "details": {
            "node_id": "0_1",
            "state": "12 - 1 = 11 (left: 6 9 11)",
            "thoughts": [
              "1 + 6 = 7 (left: 7 9 12)",
              "12 - 1 = 11 (left: 6 9 11)",
              "9 - 1 = 8 (left: 6 8 12)",
              "6 * 1 = 6 (left: 6 9 12)",
              "12 / 1 = 12 (left: 6 9 12)",
              "9 / 1 = 9 (left: 6 9 12)",
              "6 / 1 = 6 (left: 6 9 12)",
              "9 + 6 = 15 (left: 1 12 15)",
              "12 - 6 = 6 (left: 1 6 9)",
              "12 / 6 = 2 (left: 1 2 9)",
              "9 - 6 = 3 (left: 1 3 12)",
              "9 / 6 = 1.5 (left: 1 1.5 12)",
              "12 + 1 = 13 (left: 6 9 13)",
              "12 - 9 = 3 (left: 1 3 6)",
              "12 / 9 = 1.333 (left: 1 1.333 6)",
              "9 * 1 = 9 (left: 6 9 12)",
              "9 - 1 = 8 (left: 6 8 12)",
              "9 / 1 = 9 (left: 6 9 12)",
              "6 + 1 = 7 (left: 7 9 12)",
              "6 - 1 = 5 (left: 5 9 12)",
              "6 / 1 = 6 (left: 6 9 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "node_id 0_1_0 matches thought position.",
          "timestamp": "2025-05-30T11:31:53.517132",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_0",
            "state": "6 + 9 = 15 (left: 11 15)",
            "thoughts": [
              "6 + 9 = 15 (left: 11 15)",
              "9 - 6 = 3 (left: 3 11)",
              "11 - 6 = 5 (left: 5 9)",
              "11 - 9 = 2 (left: 2 6)",
              "6 * 9 = 54 (left: 11 54)",
              "11 + 6 = 17 (left: 9 17)",
              "9 + 6 = 15 (left: 11 15)",
              "11 * 6 = 66 (left: 9 66)",
              "9 * 6 = 54 (left: 11 54)",
              "11 / 6 = 1.833 (left: 1.833 9)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_1",
          "result": "PASS",
          "reason": "node_id 0_1_1 matches thought position.",
          "timestamp": "2025-05-30T11:32:04.415841",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_1",
            "state": "9 - 6 = 3 (left: 3 11)",
            "thoughts": [
              "6 + 9 = 15 (left: 11 15)",
              "9 - 6 = 3 (left: 3 11)",
              "11 - 6 = 5 (left: 5 9)",
              "11 - 9 = 2 (left: 2 6)",
              "6 * 9 = 54 (left: 11 54)",
              "11 + 6 = 17 (left: 9 17)",
              "9 + 6 = 15 (left: 11 15)",
              "11 * 6 = 66 (left: 9 66)",
              "9 * 6 = 54 (left: 11 54)",
              "11 / 6 = 1.833 (left: 1.833 9)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_2",
          "result": "PASS",
          "reason": "node_id 0_1_2 matches thought position.",
          "timestamp": "2025-05-30T11:32:15.118122",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_2",
            "state": "11 - 6 = 5 (left: 5 9)",
            "thoughts": [
              "6 + 9 = 15 (left: 11 15)",
              "9 - 6 = 3 (left: 3 11)",
              "11 - 6 = 5 (left: 5 9)",
              "11 - 9 = 2 (left: 2 6)",
              "6 * 9 = 54 (left: 11 54)",
              "11 + 6 = 17 (left: 9 17)",
              "9 + 6 = 15 (left: 11 15)",
              "11 * 6 = 66 (left: 9 66)",
              "9 * 6 = 54 (left: 11 54)",
              "11 / 6 = 1.833 (left: 1.833 9)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_3",
          "result": "PASS",
          "reason": "node_id 0_1_3 matches thought position.",
          "timestamp": "2025-05-30T11:32:22.999413",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_3",
            "state": "11 - 9 = 2 (left: 2 6)",
            "thoughts": [
              "6 + 9 = 15 (left: 11 15)",
              "9 - 6 = 3 (left: 3 11)",
              "11 - 6 = 5 (left: 5 9)",
              "11 - 9 = 2 (left: 2 6)",
              "6 * 9 = 54 (left: 11 54)",
              "11 + 6 = 17 (left: 9 17)",
              "9 + 6 = 15 (left: 11 15)",
              "11 * 6 = 66 (left: 9 66)",
              "9 * 6 = 54 (left: 11 54)",
              "11 / 6 = 1.833 (left: 1.833 9)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_4",
          "result": "PASS",
          "reason": "node_id 0_1_4 matches thought position.",
          "timestamp": "2025-05-30T11:32:32.834505",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_4",
            "state": "6 * 9 = 54 (left: 11 54)",
            "thoughts": [
              "6 + 9 = 15 (left: 11 15)",
              "9 - 6 = 3 (left: 3 11)",
              "11 - 6 = 5 (left: 5 9)",
              "11 - 9 = 2 (left: 2 6)",
              "6 * 9 = 54 (left: 11 54)",
              "11 + 6 = 17 (left: 9 17)",
              "9 + 6 = 15 (left: 11 15)",
              "11 * 6 = 66 (left: 9 66)",
              "9 * 6 = 54 (left: 11 54)",
              "11 / 6 = 1.833 (left: 1.833 9)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_5",
          "result": "PASS",
          "reason": "node_id 0_1_5 matches thought position.",
          "timestamp": "2025-05-30T11:32:42.666574",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_5",
            "state": "11 + 6 = 17 (left: 9 17)",
            "thoughts": [
              "6 + 9 = 15 (left: 11 15)",
              "9 - 6 = 3 (left: 3 11)",
              "11 - 6 = 5 (left: 5 9)",
              "11 - 9 = 2 (left: 2 6)",
              "6 * 9 = 54 (left: 11 54)",
              "11 + 6 = 17 (left: 9 17)",
              "9 + 6 = 15 (left: 11 15)",
              "11 * 6 = 66 (left: 9 66)",
              "9 * 6 = 54 (left: 11 54)",
              "11 / 6 = 1.833 (left: 1.833 9)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_6",
          "result": "PASS",
          "reason": "node_id 0_1_6 matches thought position.",
          "timestamp": "2025-05-30T11:32:51.706558",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_6",
            "state": "9 + 6 = 15 (left: 11 15)",
            "thoughts": [
              "6 + 9 = 15 (left: 11 15)",
              "9 - 6 = 3 (left: 3 11)",
              "11 - 6 = 5 (left: 5 9)",
              "11 - 9 = 2 (left: 2 6)",
              "6 * 9 = 54 (left: 11 54)",
              "11 + 6 = 17 (left: 9 17)",
              "9 + 6 = 15 (left: 11 15)",
              "11 * 6 = 66 (left: 9 66)",
              "9 * 6 = 54 (left: 11 54)",
              "11 / 6 = 1.833 (left: 1.833 9)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_7",
          "result": "PASS",
          "reason": "node_id 0_1_7 matches thought position.",
          "timestamp": "2025-05-30T11:33:00.736640",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_7",
            "state": "11 * 6 = 66 (left: 9 66)",
            "thoughts": [
              "6 + 9 = 15 (left: 11 15)",
              "9 - 6 = 3 (left: 3 11)",
              "11 - 6 = 5 (left: 5 9)",
              "11 - 9 = 2 (left: 2 6)",
              "6 * 9 = 54 (left: 11 54)",
              "11 + 6 = 17 (left: 9 17)",
              "9 + 6 = 15 (left: 11 15)",
              "11 * 6 = 66 (left: 9 66)",
              "9 * 6 = 54 (left: 11 54)",
              "11 / 6 = 1.833 (left: 1.833 9)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_8",
          "result": "PASS",
          "reason": "node_id 0_1_8 matches thought position.",
          "timestamp": "2025-05-30T11:33:10.693373",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_8",
            "state": "9 * 6 = 54 (left: 11 54)",
            "thoughts": [
              "6 + 9 = 15 (left: 11 15)",
              "9 - 6 = 3 (left: 3 11)",
              "11 - 6 = 5 (left: 5 9)",
              "11 - 9 = 2 (left: 2 6)",
              "6 * 9 = 54 (left: 11 54)",
              "11 + 6 = 17 (left: 9 17)",
              "9 + 6 = 15 (left: 11 15)",
              "11 * 6 = 66 (left: 9 66)",
              "9 * 6 = 54 (left: 11 54)",
              "11 / 6 = 1.833 (left: 1.833 9)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_9",
          "result": "PASS",
          "reason": "node_id 0_1_9 matches thought position.",
          "timestamp": "2025-05-30T11:33:24.237573",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_9",
            "state": "11 / 6 = 1.833 (left: 1.833 9)",
            "thoughts": [
              "6 + 9 = 15 (left: 11 15)",
              "9 - 6 = 3 (left: 3 11)",
              "11 - 6 = 5 (left: 5 9)",
              "11 - 9 = 2 (left: 2 6)",
              "6 * 9 = 54 (left: 11 54)",
              "11 + 6 = 17 (left: 9 17)",
              "9 + 6 = 15 (left: 11 15)",
              "11 * 6 = 66 (left: 9 66)",
              "9 * 6 = 54 (left: 11 54)",
              "11 / 6 = 1.833 (left: 1.833 9)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "node_id 0_2 matches thought position.",
          "timestamp": "2025-05-30T11:33:38.600044",
          "event_type": "validation",
          "details": {
            "node_id": "0_2",
            "state": "9 - 1 = 8 (left: 6 8 12)",
            "thoughts": [
              "1 + 6 = 7 (left: 7 9 12)",
              "12 - 1 = 11 (left: 6 9 11)",
              "9 - 1 = 8 (left: 6 8 12)",
              "6 * 1 = 6 (left: 6 9 12)",
              "12 / 1 = 12 (left: 6 9 12)",
              "9 / 1 = 9 (left: 6 9 12)",
              "6 / 1 = 6 (left: 6 9 12)",
              "9 + 6 = 15 (left: 1 12 15)",
              "12 - 6 = 6 (left: 1 6 9)",
              "12 / 6 = 2 (left: 1 2 9)",
              "9 - 6 = 3 (left: 1 3 12)",
              "9 / 6 = 1.5 (left: 1 1.5 12)",
              "12 + 1 = 13 (left: 6 9 13)",
              "12 - 9 = 3 (left: 1 3 6)",
              "12 / 9 = 1.333 (left: 1 1.333 6)",
              "9 * 1 = 9 (left: 6 9 12)",
              "9 - 1 = 8 (left: 6 8 12)",
              "9 / 1 = 9 (left: 6 9 12)",
              "6 + 1 = 7 (left: 7 9 12)",
              "6 - 1 = 5 (left: 5 9 12)",
              "6 / 1 = 6 (left: 6 9 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_0",
          "result": "PASS",
          "reason": "node_id 0_2_0 matches thought position.",
          "timestamp": "2025-05-30T11:34:02.285257",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_0",
            "state": "6 + 8 = 14 (left: 12 14)",
            "thoughts": [
              "6 + 8 = 14 (left: 12 14)",
              "8 / 6 = 1.33 (left: 1.33 12)",
              "12 + 6 = 18 (left: 8 18)",
              "6 * 8 = 48 (left: 12 48)",
              "8 - 6 = 2 (left: 2 12)",
              "12 - 8 = 4 (left: 4 6)",
              "12 /  6 = 2 (left: 2 8)",
              "12 - 6 = 6 (left: 6 8)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_1",
          "result": "PASS",
          "reason": "node_id 0_2_1 matches thought position.",
          "timestamp": "2025-05-30T11:34:12.290486",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_1",
            "state": "8 / 6 = 1.33 (left: 1.33 12)",
            "thoughts": [
              "6 + 8 = 14 (left: 12 14)",
              "8 / 6 = 1.33 (left: 1.33 12)",
              "12 + 6 = 18 (left: 8 18)",
              "6 * 8 = 48 (left: 12 48)",
              "8 - 6 = 2 (left: 2 12)",
              "12 - 8 = 4 (left: 4 6)",
              "12 /  6 = 2 (left: 2 8)",
              "12 - 6 = 6 (left: 6 8)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_2",
          "result": "PASS",
          "reason": "node_id 0_2_2 matches thought position.",
          "timestamp": "2025-05-30T11:34:20.543677",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_2",
            "state": "12 + 6 = 18 (left: 8 18)",
            "thoughts": [
              "6 + 8 = 14 (left: 12 14)",
              "8 / 6 = 1.33 (left: 1.33 12)",
              "12 + 6 = 18 (left: 8 18)",
              "6 * 8 = 48 (left: 12 48)",
              "8 - 6 = 2 (left: 2 12)",
              "12 - 8 = 4 (left: 4 6)",
              "12 /  6 = 2 (left: 2 8)",
              "12 - 6 = 6 (left: 6 8)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_3",
          "result": "PASS",
          "reason": "node_id 0_2_3 matches thought position.",
          "timestamp": "2025-05-30T11:34:34.861329",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_3",
            "state": "6 * 8 = 48 (left: 12 48)",
            "thoughts": [
              "6 + 8 = 14 (left: 12 14)",
              "8 / 6 = 1.33 (left: 1.33 12)",
              "12 + 6 = 18 (left: 8 18)",
              "6 * 8 = 48 (left: 12 48)",
              "8 - 6 = 2 (left: 2 12)",
              "12 - 8 = 4 (left: 4 6)",
              "12 /  6 = 2 (left: 2 8)",
              "12 - 6 = 6 (left: 6 8)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_4",
          "result": "PASS",
          "reason": "node_id 0_2_4 matches thought position.",
          "timestamp": "2025-05-30T11:34:43.359858",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_4",
            "state": "8 - 6 = 2 (left: 2 12)",
            "thoughts": [
              "6 + 8 = 14 (left: 12 14)",
              "8 / 6 = 1.33 (left: 1.33 12)",
              "12 + 6 = 18 (left: 8 18)",
              "6 * 8 = 48 (left: 12 48)",
              "8 - 6 = 2 (left: 2 12)",
              "12 - 8 = 4 (left: 4 6)",
              "12 /  6 = 2 (left: 2 8)",
              "12 - 6 = 6 (left: 6 8)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_4_0",
          "result": "PASS",
          "reason": "node_id 0_2_4_0 matches thought position.",
          "timestamp": "2025-05-30T11:34:59.632990",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_4_0",
            "state": "2 + 12 = 14 (left: 14)",
            "thoughts": [
              "2 + 12 = 14 (left: 14)",
              "12 / 2 = 6 (left: 6)",
              "12 - 2 = 10 (left: 10)",
              "2 * 12 = 24 (left: 24)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_4_1",
          "result": "PASS",
          "reason": "node_id 0_2_4_1 matches thought position.",
          "timestamp": "2025-05-30T11:35:06.550241",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_4_1",
            "state": "12 / 2 = 6 (left: 6)",
            "thoughts": [
              "2 + 12 = 14 (left: 14)",
              "12 / 2 = 6 (left: 6)",
              "12 - 2 = 10 (left: 10)",
              "2 * 12 = 24 (left: 24)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_4_2",
          "result": "PASS",
          "reason": "node_id 0_2_4_2 matches thought position.",
          "timestamp": "2025-05-30T11:35:14.507390",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_4_2",
            "state": "12 - 2 = 10 (left: 10)",
            "thoughts": [
              "2 + 12 = 14 (left: 14)",
              "12 / 2 = 6 (left: 6)",
              "12 - 2 = 10 (left: 10)",
              "2 * 12 = 24 (left: 24)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_4_3",
          "result": "PASS",
          "reason": "node_id 0_2_4_3 matches thought position.",
          "timestamp": "2025-05-30T11:35:20.953605",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_4_3",
            "state": "2 * 12 = 24 (left: 24)",
            "thoughts": [
              "2 + 12 = 14 (left: 14)",
              "12 / 2 = 6 (left: 6)",
              "12 - 2 = 10 (left: 10)",
              "2 * 12 = 24 (left: 24)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_4_3_0",
          "result": "PASS",
          "reason": "node_id 0_2_4_3_0 matches thought position.",
          "timestamp": "2025-05-30T11:35:33.347556",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_4_3_0",
            "state": "Answer: (9 - 1 - 6) * 12 = 24",
            "thoughts": [
              "Answer: (9 - 1 - 6) * 12 = 24"
            ]
          }
        }
      ]
    },
    "pseudo_recursive_call": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T11:31:29.498416",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "Value 41.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T11:33:38.599878",
          "event_type": "validation",
          "details": {
            "value": 41.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_2_4",
          "result": "PASS",
          "reason": "Value 60.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T11:34:43.359761",
          "event_type": "validation",
          "details": {
            "value": 60.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_2_4_3",
          "result": "PASS",
          "reason": "Value 60.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T11:35:20.953508",
          "event_type": "validation",
          "details": {
            "value": 60.0,
            "threshold": 3.0
          }
        }
      ]
    },
    "child_state": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "child_state",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State validation passed: Last thought '12 - 1 = 11 (left: 6 9 11)' found in parent's thoughts",
          "timestamp": "2025-05-30T11:31:29.498473",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '12 - 1 = 11 (left: 6 9 11)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "1 + 6 = 7 (left: 7 9 12)",
              "12 - 1 = 11 (left: 6 9 11)",
              "9 - 1 = 8 (left: 6 8 12)",
              "6 * 1 = 6 (left: 6 9 12)",
              "12 / 1 = 12 (left: 6 9 12)",
              "9 / 1 = 9 (left: 6 9 12)",
              "6 / 1 = 6 (left: 6 9 12)",
              "9 + 6 = 15 (left: 1 12 15)",
              "12 - 6 = 6 (left: 1 6 9)",
              "12 / 6 = 2 (left: 1 2 9)",
              "9 - 6 = 3 (left: 1 3 12)",
              "9 / 6 = 1.5 (left: 1 1.5 12)",
              "12 + 1 = 13 (left: 6 9 13)",
              "12 - 9 = 3 (left: 1 3 6)",
              "12 / 9 = 1.333 (left: 1 1.333 6)",
              "9 * 1 = 9 (left: 6 9 12)",
              "9 - 1 = 8 (left: 6 8 12)",
              "9 / 1 = 9 (left: 6 9 12)",
              "6 + 1 = 7 (left: 7 9 12)",
              "6 - 1 = 5 (left: 5 9 12)",
              "6 / 1 = 6 (left: 6 9 12)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "State validation passed: Last thought '9 - 1 = 8 (left: 6 8 12)' found in parent's thoughts",
          "timestamp": "2025-05-30T11:33:38.599937",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '9 - 1 = 8 (left: 6 8 12)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "1 + 6 = 7 (left: 7 9 12)",
              "12 - 1 = 11 (left: 6 9 11)",
              "9 - 1 = 8 (left: 6 8 12)",
              "6 * 1 = 6 (left: 6 9 12)",
              "12 / 1 = 12 (left: 6 9 12)",
              "9 / 1 = 9 (left: 6 9 12)",
              "6 / 1 = 6 (left: 6 9 12)",
              "9 + 6 = 15 (left: 1 12 15)",
              "12 - 6 = 6 (left: 1 6 9)",
              "12 / 6 = 2 (left: 1 2 9)",
              "9 - 6 = 3 (left: 1 3 12)",
              "9 / 6 = 1.5 (left: 1 1.5 12)",
              "12 + 1 = 13 (left: 6 9 13)",
              "12 - 9 = 3 (left: 1 3 6)",
              "12 / 9 = 1.333 (left: 1 1.333 6)",
              "9 * 1 = 9 (left: 6 9 12)",
              "9 - 1 = 8 (left: 6 8 12)",
              "9 / 1 = 9 (left: 6 9 12)",
              "6 + 1 = 7 (left: 7 9 12)",
              "6 - 1 = 5 (left: 5 9 12)",
              "6 / 1 = 6 (left: 6 9 12)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_2_4",
          "result": "PASS",
          "reason": "State validation passed: Last thought '8 - 6 = 2 (left: 2 12)' found in parent's thoughts; Previous thought '9 - 1 = 8 (left: 6 8 12)' found in parent's state",
          "timestamp": "2025-05-30T11:34:43.359815",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '8 - 6 = 2 (left: 2 12)' found in parent's thoughts",
              "Previous thought '9 - 1 = 8 (left: 6 8 12)' found in parent's state"
            ],
            "parent_thoughts": [
              "6 + 8 = 14 (left: 12 14)",
              "8 / 6 = 1.33 (left: 1.33 12)",
              "12 + 6 = 18 (left: 8 18)",
              "6 * 8 = 48 (left: 12 48)",
              "8 - 6 = 2 (left: 2 12)",
              "12 - 8 = 4 (left: 4 6)",
              "12 /  6 = 2 (left: 2 8)",
              "12 - 6 = 6 (left: 6 8)"
            ],
            "parent_state": [
              "9 - 1 = 8 (left: 6 8 12)"
            ]
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_2_4_3",
          "result": "PASS",
          "reason": "State validation passed: Last thought '2 * 12 = 24 (left: 24)' found in parent's thoughts; Previous thought '9 - 1 = 8 (left: 6 8 12)' found in parent's state; Previous thought '8 - 6 = 2 (left: 2 12)' found in parent's state",
          "timestamp": "2025-05-30T11:35:20.953565",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '2 * 12 = 24 (left: 24)' found in parent's thoughts",
              "Previous thought '9 - 1 = 8 (left: 6 8 12)' found in parent's state",
              "Previous thought '8 - 6 = 2 (left: 2 12)' found in parent's state"
            ],
            "parent_thoughts": [
              "2 + 12 = 14 (left: 14)",
              "12 / 2 = 6 (left: 6)",
              "12 - 2 = 10 (left: 10)",
              "2 * 12 = 24 (left: 24)"
            ],
            "parent_state": [
              "9 - 1 = 8 (left: 6 8 12)",
              "8 - 6 = 2 (left: 2 12)"
            ]
          }
        }
      ]
    },
    "node_state": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "node_state",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T11:31:39.132645",
          "event_type": "validation",
          "details": {
            "expected_state": "12 - 1 = 11 (left: 6 9 11)",
            "actual_state": "12 - 1 = 11 (left: 6 9 11)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T11:33:46.860892",
          "event_type": "validation",
          "details": {
            "expected_state": "9 - 1 = 8 (left: 6 8 12)",
            "actual_state": "9 - 1 = 8 (left: 6 8 12)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_2_4",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T11:34:50.636072",
          "event_type": "validation",
          "details": {
            "expected_state": "9 - 1 = 8 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)",
            "actual_state": "9 - 1 = 8 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_2_4_3",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T11:35:27.025291",
          "event_type": "validation",
          "details": {
            "expected_state": "9 - 1 = 8 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
            "actual_state": "9 - 1 = 8 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
          }
        }
      ]
    },
    "backtracking_I": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_I",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_1; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-30T11:33:29.212109",
          "event_type": "validation",
          "details": {
            "popped_node": "0_1",
            "expected_popped": "0_1",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_1",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_2_4_3",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_2_4_3; Correctly backtracking to parent '0_2_4'",
          "timestamp": "2025-05-30T11:35:37.399693",
          "event_type": "validation",
          "details": {
            "popped_node": "0_2_4_3",
            "expected_popped": "0_2_4_3",
            "backtrack_to": "0_2_4",
            "expected_parent": "0_2_4",
            "validation_details": [
              "Correctly popped expected node 0_2_4_3",
              "Correctly backtracking to parent '0_2_4'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_2_4",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_2_4; Correctly backtracking to parent '0_2'",
          "timestamp": "2025-05-30T11:35:39.904639",
          "event_type": "validation",
          "details": {
            "popped_node": "0_2_4",
            "expected_popped": "0_2_4",
            "backtrack_to": "0_2",
            "expected_parent": "0_2",
            "validation_details": [
              "Correctly popped expected node 0_2_4",
              "Correctly backtracking to parent '0_2'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_2; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-30T11:35:42.061243",
          "event_type": "validation",
          "details": {
            "popped_node": "0_2",
            "expected_popped": "0_2",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_2",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
          "timestamp": "2025-05-30T11:35:44.220418",
          "event_type": "validation",
          "details": {
            "popped_node": "0",
            "expected_popped": "0",
            "backtrack_to": "None",
            "expected_parent": "None",
            "validation_details": [
              "Correctly popped expected node 0",
              "Correctly backtracking to parent 'None'"
            ]
          }
        }
      ]
    },
    "backtracking_III": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_III",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "All 10 children explored - valid backtrack",
          "timestamp": "2025-05-30T11:33:29.212142",
          "event_type": "validation",
          "details": {
            "total_thoughts": 10,
            "evaluated_children": 10
          }
        }
      ]
    },
    "backtracking_IV": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_IV",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_2 follows 0_1",
          "timestamp": "2025-05-30T11:33:38.600005",
          "event_type": "validation",
          "details": {
            "popped_node": "0_1",
            "current_node": "0_2",
            "expected_index": 2,
            "actual_index": 2
          }
        }
      ]
    },
    "base_case": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "base_case",
          "node_id": "0_2_4_3",
          "result": "PASS",
          "reason": "Level limit 3 exceeded - valid backtrack",
          "timestamp": "2025-05-30T11:35:37.399735",
          "event_type": "validation",
          "details": {
            "stack_size": 3,
            "level_limit": 3
          }
        }
      ]
    },
    "backtracking_II": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_II",
          "node_id": "0_2_4_3",
          "result": "PASS",
          "reason": "Correct True flag used in True backtrack mode",
          "timestamp": "2025-05-30T11:35:37.399748",
          "event_type": "validation",
          "details": {
            "flag": "True",
            "true_backtrack_mode": true
          }
        },
        {
          "check_name": "backtracking_II",
          "node_id": "0_2_4",
          "result": "PASS",
          "reason": "Correct True flag used in True backtrack mode",
          "timestamp": "2025-05-30T11:35:39.904666",
          "event_type": "validation",
          "details": {
            "flag": "True",
            "true_backtrack_mode": true
          }
        },
        {
          "check_name": "backtracking_II",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "Correct True flag used in True backtrack mode",
          "timestamp": "2025-05-30T11:35:42.061280",
          "event_type": "validation",
          "details": {
            "flag": "True",
            "true_backtrack_mode": true
          }
        },
        {
          "check_name": "backtracking_II",
          "node_id": "0",
          "result": "PASS",
          "reason": "Correct True flag used in True backtrack mode",
          "timestamp": "2025-05-30T11:35:44.220456",
          "event_type": "validation",
          "details": {
            "flag": "True",
            "true_backtrack_mode": true
          }
        }
      ]
    },
    "looping_order": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "looping_order",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900560",
          "event_type": "validation",
          "details": {
            "state": "1 + 6 = 7 (left: 7 9 12)",
            "thought": "1 + 6 = 7 (left: 7 9 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900589",
          "event_type": "validation",
          "details": {
            "state": "12 - 1 = 11 (left: 6 9 11)",
            "thought": "12 - 1 = 11 (left: 6 9 11)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900597",
          "event_type": "validation",
          "details": {
            "state": "9 - 1 = 8 (left: 6 8 12)",
            "thought": "9 - 1 = 8 (left: 6 8 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900645",
          "event_type": "validation",
          "details": {
            "state": "6 + 9 = 15 (left: 11 15)",
            "thought": "6 + 9 = 15 (left: 11 15)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900653",
          "event_type": "validation",
          "details": {
            "state": "9 - 6 = 3 (left: 3 11)",
            "thought": "9 - 6 = 3 (left: 3 11)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900660",
          "event_type": "validation",
          "details": {
            "state": "11 - 6 = 5 (left: 5 9)",
            "thought": "11 - 6 = 5 (left: 5 9)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900667",
          "event_type": "validation",
          "details": {
            "state": "11 - 9 = 2 (left: 2 6)",
            "thought": "11 - 9 = 2 (left: 2 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900673",
          "event_type": "validation",
          "details": {
            "state": "6 * 9 = 54 (left: 11 54)",
            "thought": "6 * 9 = 54 (left: 11 54)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900679",
          "event_type": "validation",
          "details": {
            "state": "11 + 6 = 17 (left: 9 17)",
            "thought": "11 + 6 = 17 (left: 9 17)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900686",
          "event_type": "validation",
          "details": {
            "state": "9 + 6 = 15 (left: 11 15)",
            "thought": "9 + 6 = 15 (left: 11 15)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_7",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900693",
          "event_type": "validation",
          "details": {
            "state": "11 * 6 = 66 (left: 9 66)",
            "thought": "11 * 6 = 66 (left: 9 66)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_8",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900699",
          "event_type": "validation",
          "details": {
            "state": "9 * 6 = 54 (left: 11 54)",
            "thought": "9 * 6 = 54 (left: 11 54)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_9",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900711",
          "event_type": "validation",
          "details": {
            "state": "11 / 6 = 1.833 (left: 1.833 9)",
            "thought": "11 / 6 = 1.833 (left: 1.833 9)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900774",
          "event_type": "validation",
          "details": {
            "state": "6 + 8 = 14 (left: 12 14)",
            "thought": "6 + 8 = 14 (left: 12 14)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900781",
          "event_type": "validation",
          "details": {
            "state": "8 / 6 = 1.33 (left: 1.33 12)",
            "thought": "8 / 6 = 1.33 (left: 1.33 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900787",
          "event_type": "validation",
          "details": {
            "state": "12 + 6 = 18 (left: 8 18)",
            "thought": "12 + 6 = 18 (left: 8 18)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900794",
          "event_type": "validation",
          "details": {
            "state": "6 * 8 = 48 (left: 12 48)",
            "thought": "6 * 8 = 48 (left: 12 48)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900800",
          "event_type": "validation",
          "details": {
            "state": "8 - 6 = 2 (left: 2 12)",
            "thought": "8 - 6 = 2 (left: 2 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_4_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900835",
          "event_type": "validation",
          "details": {
            "state": "2 + 12 = 14 (left: 14)",
            "thought": "2 + 12 = 14 (left: 14)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_4_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900842",
          "event_type": "validation",
          "details": {
            "state": "12 / 2 = 6 (left: 6)",
            "thought": "12 / 2 = 6 (left: 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_4_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900848",
          "event_type": "validation",
          "details": {
            "state": "12 - 2 = 10 (left: 10)",
            "thought": "12 - 2 = 10 (left: 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_4_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900855",
          "event_type": "validation",
          "details": {
            "state": "2 * 12 = 24 (left: 24)",
            "thought": "2 * 12 = 24 (left: 24)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_4_3_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:35:45.900884",
          "event_type": "validation",
          "details": {
            "state": "Answer: (9 - 1 - 6) * 12 = 24",
            "thought": "Answer: (9 - 1 - 6) * 12 = 24"
          }
        }
      ]
    },
    "final_answer": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "final_answer",
          "node_id": "final",
          "result": "PASS",
          "reason": "Result 24 matches expected answer 24.0",
          "timestamp": "2025-05-30T11:35:45.901002",
          "event_type": "validation",
          "details": {
            "result": 24,
            "expected": 24.0,
            "difference": 0.0
          }
        }
      ]
    },
    "valid_search_trace": {
      "success_trace": true
    }
  },
  "detailed_results": [
    {
      "check_name": "pruning",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "Value 2.001 meets threshold 3.0",
      "timestamp": "2025-05-30T11:31:17.990905",
      "event_type": "validation",
      "details": {
        "value": 2.001,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "node_id 0_0 matches thought position.",
      "timestamp": "2025-05-30T11:31:17.991008",
      "event_type": "validation",
      "details": {
        "node_id": "0_0",
        "state": "1 + 6 = 7 (left: 7 9 12)",
        "thoughts": [
          "1 + 6 = 7 (left: 7 9 12)",
          "12 - 1 = 11 (left: 6 9 11)",
          "9 - 1 = 8 (left: 6 8 12)",
          "6 * 1 = 6 (left: 6 9 12)",
          "12 / 1 = 12 (left: 6 9 12)",
          "9 / 1 = 9 (left: 6 9 12)",
          "6 / 1 = 6 (left: 6 9 12)",
          "9 + 6 = 15 (left: 1 12 15)",
          "12 - 6 = 6 (left: 1 6 9)",
          "12 / 6 = 2 (left: 1 2 9)",
          "9 - 6 = 3 (left: 1 3 12)",
          "9 / 6 = 1.5 (left: 1 1.5 12)",
          "12 + 1 = 13 (left: 6 9 13)",
          "12 - 9 = 3 (left: 1 3 6)",
          "12 / 9 = 1.333 (left: 1 1.333 6)",
          "9 * 1 = 9 (left: 6 9 12)",
          "9 - 1 = 8 (left: 6 8 12)",
          "9 / 1 = 9 (left: 6 9 12)",
          "6 + 1 = 7 (left: 7 9 12)",
          "6 - 1 = 5 (left: 5 9 12)",
          "6 / 1 = 6 (left: 6 9 12)"
        ]
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T11:31:29.498416",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State validation passed: Last thought '12 - 1 = 11 (left: 6 9 11)' found in parent's thoughts",
      "timestamp": "2025-05-30T11:31:29.498473",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '12 - 1 = 11 (left: 6 9 11)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "1 + 6 = 7 (left: 7 9 12)",
          "12 - 1 = 11 (left: 6 9 11)",
          "9 - 1 = 8 (left: 6 8 12)",
          "6 * 1 = 6 (left: 6 9 12)",
          "12 / 1 = 12 (left: 6 9 12)",
          "9 / 1 = 9 (left: 6 9 12)",
          "6 / 1 = 6 (left: 6 9 12)",
          "9 + 6 = 15 (left: 1 12 15)",
          "12 - 6 = 6 (left: 1 6 9)",
          "12 / 6 = 2 (left: 1 2 9)",
          "9 - 6 = 3 (left: 1 3 12)",
          "9 / 6 = 1.5 (left: 1 1.5 12)",
          "12 + 1 = 13 (left: 6 9 13)",
          "12 - 9 = 3 (left: 1 3 6)",
          "12 / 9 = 1.333 (left: 1 1.333 6)",
          "9 * 1 = 9 (left: 6 9 12)",
          "9 - 1 = 8 (left: 6 8 12)",
          "9 / 1 = 9 (left: 6 9 12)",
          "6 + 1 = 7 (left: 7 9 12)",
          "6 - 1 = 5 (left: 5 9 12)",
          "6 / 1 = 6 (left: 6 9 12)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "node_id 0_1 matches thought position.",
      "timestamp": "2025-05-30T11:31:29.498521",
      "event_type": "validation",
      "details": {
        "node_id": "0_1",
        "state": "12 - 1 = 11 (left: 6 9 11)",
        "thoughts": [
          "1 + 6 = 7 (left: 7 9 12)",
          "12 - 1 = 11 (left: 6 9 11)",
          "9 - 1 = 8 (left: 6 8 12)",
          "6 * 1 = 6 (left: 6 9 12)",
          "12 / 1 = 12 (left: 6 9 12)",
          "9 / 1 = 9 (left: 6 9 12)",
          "6 / 1 = 6 (left: 6 9 12)",
          "9 + 6 = 15 (left: 1 12 15)",
          "12 - 6 = 6 (left: 1 6 9)",
          "12 / 6 = 2 (left: 1 2 9)",
          "9 - 6 = 3 (left: 1 3 12)",
          "9 / 6 = 1.5 (left: 1 1.5 12)",
          "12 + 1 = 13 (left: 6 9 13)",
          "12 - 9 = 3 (left: 1 3 6)",
          "12 / 9 = 1.333 (left: 1 1.333 6)",
          "9 * 1 = 9 (left: 6 9 12)",
          "9 - 1 = 8 (left: 6 8 12)",
          "9 / 1 = 9 (left: 6 9 12)",
          "6 + 1 = 7 (left: 7 9 12)",
          "6 - 1 = 5 (left: 5 9 12)",
          "6 / 1 = 6 (left: 6 9 12)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T11:31:39.132645",
      "event_type": "validation",
      "details": {
        "expected_state": "12 - 1 = 11 (left: 6 9 11)",
        "actual_state": "12 - 1 = 11 (left: 6 9 11)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:31:53.517045",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "node_id 0_1_0 matches thought position.",
      "timestamp": "2025-05-30T11:31:53.517132",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_0",
        "state": "6 + 9 = 15 (left: 11 15)",
        "thoughts": [
          "6 + 9 = 15 (left: 11 15)",
          "9 - 6 = 3 (left: 3 11)",
          "11 - 6 = 5 (left: 5 9)",
          "11 - 9 = 2 (left: 2 6)",
          "6 * 9 = 54 (left: 11 54)",
          "11 + 6 = 17 (left: 9 17)",
          "9 + 6 = 15 (left: 11 15)",
          "11 * 6 = 66 (left: 9 66)",
          "9 * 6 = 54 (left: 11 54)",
          "11 / 6 = 1.833 (left: 1.833 9)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:32:04.415765",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_1",
      "result": "PASS",
      "reason": "node_id 0_1_1 matches thought position.",
      "timestamp": "2025-05-30T11:32:04.415841",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_1",
        "state": "9 - 6 = 3 (left: 3 11)",
        "thoughts": [
          "6 + 9 = 15 (left: 11 15)",
          "9 - 6 = 3 (left: 3 11)",
          "11 - 6 = 5 (left: 5 9)",
          "11 - 9 = 2 (left: 2 6)",
          "6 * 9 = 54 (left: 11 54)",
          "11 + 6 = 17 (left: 9 17)",
          "9 + 6 = 15 (left: 11 15)",
          "11 * 6 = 66 (left: 9 66)",
          "9 * 6 = 54 (left: 11 54)",
          "11 / 6 = 1.833 (left: 1.833 9)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:32:15.118037",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_2",
      "result": "PASS",
      "reason": "node_id 0_1_2 matches thought position.",
      "timestamp": "2025-05-30T11:32:15.118122",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_2",
        "state": "11 - 6 = 5 (left: 5 9)",
        "thoughts": [
          "6 + 9 = 15 (left: 11 15)",
          "9 - 6 = 3 (left: 3 11)",
          "11 - 6 = 5 (left: 5 9)",
          "11 - 9 = 2 (left: 2 6)",
          "6 * 9 = 54 (left: 11 54)",
          "11 + 6 = 17 (left: 9 17)",
          "9 + 6 = 15 (left: 11 15)",
          "11 * 6 = 66 (left: 9 66)",
          "9 * 6 = 54 (left: 11 54)",
          "11 / 6 = 1.833 (left: 1.833 9)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:32:22.999320",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_3",
      "result": "PASS",
      "reason": "node_id 0_1_3 matches thought position.",
      "timestamp": "2025-05-30T11:32:22.999413",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_3",
        "state": "11 - 9 = 2 (left: 2 6)",
        "thoughts": [
          "6 + 9 = 15 (left: 11 15)",
          "9 - 6 = 3 (left: 3 11)",
          "11 - 6 = 5 (left: 5 9)",
          "11 - 9 = 2 (left: 2 6)",
          "6 * 9 = 54 (left: 11 54)",
          "11 + 6 = 17 (left: 9 17)",
          "9 + 6 = 15 (left: 11 15)",
          "11 * 6 = 66 (left: 9 66)",
          "9 * 6 = 54 (left: 11 54)",
          "11 / 6 = 1.833 (left: 1.833 9)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:32:32.834427",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_4",
      "result": "PASS",
      "reason": "node_id 0_1_4 matches thought position.",
      "timestamp": "2025-05-30T11:32:32.834505",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_4",
        "state": "6 * 9 = 54 (left: 11 54)",
        "thoughts": [
          "6 + 9 = 15 (left: 11 15)",
          "9 - 6 = 3 (left: 3 11)",
          "11 - 6 = 5 (left: 5 9)",
          "11 - 9 = 2 (left: 2 6)",
          "6 * 9 = 54 (left: 11 54)",
          "11 + 6 = 17 (left: 9 17)",
          "9 + 6 = 15 (left: 11 15)",
          "11 * 6 = 66 (left: 9 66)",
          "9 * 6 = 54 (left: 11 54)",
          "11 / 6 = 1.833 (left: 1.833 9)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:32:42.666484",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_5",
      "result": "PASS",
      "reason": "node_id 0_1_5 matches thought position.",
      "timestamp": "2025-05-30T11:32:42.666574",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_5",
        "state": "11 + 6 = 17 (left: 9 17)",
        "thoughts": [
          "6 + 9 = 15 (left: 11 15)",
          "9 - 6 = 3 (left: 3 11)",
          "11 - 6 = 5 (left: 5 9)",
          "11 - 9 = 2 (left: 2 6)",
          "6 * 9 = 54 (left: 11 54)",
          "11 + 6 = 17 (left: 9 17)",
          "9 + 6 = 15 (left: 11 15)",
          "11 * 6 = 66 (left: 9 66)",
          "9 * 6 = 54 (left: 11 54)",
          "11 / 6 = 1.833 (left: 1.833 9)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:32:51.706470",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_6",
      "result": "PASS",
      "reason": "node_id 0_1_6 matches thought position.",
      "timestamp": "2025-05-30T11:32:51.706558",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_6",
        "state": "9 + 6 = 15 (left: 11 15)",
        "thoughts": [
          "6 + 9 = 15 (left: 11 15)",
          "9 - 6 = 3 (left: 3 11)",
          "11 - 6 = 5 (left: 5 9)",
          "11 - 9 = 2 (left: 2 6)",
          "6 * 9 = 54 (left: 11 54)",
          "11 + 6 = 17 (left: 9 17)",
          "9 + 6 = 15 (left: 11 15)",
          "11 * 6 = 66 (left: 9 66)",
          "9 * 6 = 54 (left: 11 54)",
          "11 / 6 = 1.833 (left: 1.833 9)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_7",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:33:00.736556",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_7",
      "result": "PASS",
      "reason": "node_id 0_1_7 matches thought position.",
      "timestamp": "2025-05-30T11:33:00.736640",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_7",
        "state": "11 * 6 = 66 (left: 9 66)",
        "thoughts": [
          "6 + 9 = 15 (left: 11 15)",
          "9 - 6 = 3 (left: 3 11)",
          "11 - 6 = 5 (left: 5 9)",
          "11 - 9 = 2 (left: 2 6)",
          "6 * 9 = 54 (left: 11 54)",
          "11 + 6 = 17 (left: 9 17)",
          "9 + 6 = 15 (left: 11 15)",
          "11 * 6 = 66 (left: 9 66)",
          "9 * 6 = 54 (left: 11 54)",
          "11 / 6 = 1.833 (left: 1.833 9)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_8",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:33:10.693283",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_8",
      "result": "PASS",
      "reason": "node_id 0_1_8 matches thought position.",
      "timestamp": "2025-05-30T11:33:10.693373",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_8",
        "state": "9 * 6 = 54 (left: 11 54)",
        "thoughts": [
          "6 + 9 = 15 (left: 11 15)",
          "9 - 6 = 3 (left: 3 11)",
          "11 - 6 = 5 (left: 5 9)",
          "11 - 9 = 2 (left: 2 6)",
          "6 * 9 = 54 (left: 11 54)",
          "11 + 6 = 17 (left: 9 17)",
          "9 + 6 = 15 (left: 11 15)",
          "11 * 6 = 66 (left: 9 66)",
          "9 * 6 = 54 (left: 11 54)",
          "11 / 6 = 1.833 (left: 1.833 9)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_9",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-30T11:33:24.237509",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_9",
      "result": "PASS",
      "reason": "node_id 0_1_9 matches thought position.",
      "timestamp": "2025-05-30T11:33:24.237573",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_9",
        "state": "11 / 6 = 1.833 (left: 1.833 9)",
        "thoughts": [
          "6 + 9 = 15 (left: 11 15)",
          "9 - 6 = 3 (left: 3 11)",
          "11 - 6 = 5 (left: 5 9)",
          "11 - 9 = 2 (left: 2 6)",
          "6 * 9 = 54 (left: 11 54)",
          "11 + 6 = 17 (left: 9 17)",
          "9 + 6 = 15 (left: 11 15)",
          "11 * 6 = 66 (left: 9 66)",
          "9 * 6 = 54 (left: 11 54)",
          "11 / 6 = 1.833 (left: 1.833 9)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_1; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-30T11:33:29.212109",
      "event_type": "validation",
      "details": {
        "popped_node": "0_1",
        "expected_popped": "0_1",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_1",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "All 10 children explored - valid backtrack",
      "timestamp": "2025-05-30T11:33:29.212142",
      "event_type": "validation",
      "details": {
        "total_thoughts": 10,
        "evaluated_children": 10
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "Value 41.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T11:33:38.599878",
      "event_type": "validation",
      "details": {
        "value": 41.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "State validation passed: Last thought '9 - 1 = 8 (left: 6 8 12)' found in parent's thoughts",
      "timestamp": "2025-05-30T11:33:38.599937",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '9 - 1 = 8 (left: 6 8 12)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "1 + 6 = 7 (left: 7 9 12)",
          "12 - 1 = 11 (left: 6 9 11)",
          "9 - 1 = 8 (left: 6 8 12)",
          "6 * 1 = 6 (left: 6 9 12)",
          "12 / 1 = 12 (left: 6 9 12)",
          "9 / 1 = 9 (left: 6 9 12)",
          "6 / 1 = 6 (left: 6 9 12)",
          "9 + 6 = 15 (left: 1 12 15)",
          "12 - 6 = 6 (left: 1 6 9)",
          "12 / 6 = 2 (left: 1 2 9)",
          "9 - 6 = 3 (left: 1 3 12)",
          "9 / 6 = 1.5 (left: 1 1.5 12)",
          "12 + 1 = 13 (left: 6 9 13)",
          "12 - 9 = 3 (left: 1 3 6)",
          "12 / 9 = 1.333 (left: 1 1.333 6)",
          "9 * 1 = 9 (left: 6 9 12)",
          "9 - 1 = 8 (left: 6 8 12)",
          "9 / 1 = 9 (left: 6 9 12)",
          "6 + 1 = 7 (left: 7 9 12)",
          "6 - 1 = 5 (left: 5 9 12)",
          "6 / 1 = 6 (left: 6 9 12)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_2 follows 0_1",
      "timestamp": "2025-05-30T11:33:38.600005",
      "event_type": "validation",
      "details": {
        "popped_node": "0_1",
        "current_node": "0_2",
        "expected_index": 2,
        "actual_index": 2
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "node_id 0_2 matches thought position.",
      "timestamp": "2025-05-30T11:33:38.600044",
      "event_type": "validation",
      "details": {
        "node_id": "0_2",
        "state": "9 - 1 = 8 (left: 6 8 12)",
        "thoughts": [
          "1 + 6 = 7 (left: 7 9 12)",
          "12 - 1 = 11 (left: 6 9 11)",
          "9 - 1 = 8 (left: 6 8 12)",
          "6 * 1 = 6 (left: 6 9 12)",
          "12 / 1 = 12 (left: 6 9 12)",
          "9 / 1 = 9 (left: 6 9 12)",
          "6 / 1 = 6 (left: 6 9 12)",
          "9 + 6 = 15 (left: 1 12 15)",
          "12 - 6 = 6 (left: 1 6 9)",
          "12 / 6 = 2 (left: 1 2 9)",
          "9 - 6 = 3 (left: 1 3 12)",
          "9 / 6 = 1.5 (left: 1 1.5 12)",
          "12 + 1 = 13 (left: 6 9 13)",
          "12 - 9 = 3 (left: 1 3 6)",
          "12 / 9 = 1.333 (left: 1 1.333 6)",
          "9 * 1 = 9 (left: 6 9 12)",
          "9 - 1 = 8 (left: 6 8 12)",
          "9 / 1 = 9 (left: 6 9 12)",
          "6 + 1 = 7 (left: 7 9 12)",
          "6 - 1 = 5 (left: 5 9 12)",
          "6 / 1 = 6 (left: 6 9 12)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T11:33:46.860892",
      "event_type": "validation",
      "details": {
        "expected_state": "9 - 1 = 8 (left: 6 8 12)",
        "actual_state": "9 - 1 = 8 (left: 6 8 12)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:34:02.285160",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_0",
      "result": "PASS",
      "reason": "node_id 0_2_0 matches thought position.",
      "timestamp": "2025-05-30T11:34:02.285257",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_0",
        "state": "6 + 8 = 14 (left: 12 14)",
        "thoughts": [
          "6 + 8 = 14 (left: 12 14)",
          "8 / 6 = 1.33 (left: 1.33 12)",
          "12 + 6 = 18 (left: 8 18)",
          "6 * 8 = 48 (left: 12 48)",
          "8 - 6 = 2 (left: 2 12)",
          "12 - 8 = 4 (left: 4 6)",
          "12 /  6 = 2 (left: 2 8)",
          "12 - 6 = 6 (left: 6 8)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:34:12.290224",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_1",
      "result": "PASS",
      "reason": "node_id 0_2_1 matches thought position.",
      "timestamp": "2025-05-30T11:34:12.290486",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_1",
        "state": "8 / 6 = 1.33 (left: 1.33 12)",
        "thoughts": [
          "6 + 8 = 14 (left: 12 14)",
          "8 / 6 = 1.33 (left: 1.33 12)",
          "12 + 6 = 18 (left: 8 18)",
          "6 * 8 = 48 (left: 12 48)",
          "8 - 6 = 2 (left: 2 12)",
          "12 - 8 = 4 (left: 4 6)",
          "12 /  6 = 2 (left: 2 8)",
          "12 - 6 = 6 (left: 6 8)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:34:20.543594",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_2",
      "result": "PASS",
      "reason": "node_id 0_2_2 matches thought position.",
      "timestamp": "2025-05-30T11:34:20.543677",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_2",
        "state": "12 + 6 = 18 (left: 8 18)",
        "thoughts": [
          "6 + 8 = 14 (left: 12 14)",
          "8 / 6 = 1.33 (left: 1.33 12)",
          "12 + 6 = 18 (left: 8 18)",
          "6 * 8 = 48 (left: 12 48)",
          "8 - 6 = 2 (left: 2 12)",
          "12 - 8 = 4 (left: 4 6)",
          "12 /  6 = 2 (left: 2 8)",
          "12 - 6 = 6 (left: 6 8)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:34:34.861255",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_3",
      "result": "PASS",
      "reason": "node_id 0_2_3 matches thought position.",
      "timestamp": "2025-05-30T11:34:34.861329",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_3",
        "state": "6 * 8 = 48 (left: 12 48)",
        "thoughts": [
          "6 + 8 = 14 (left: 12 14)",
          "8 / 6 = 1.33 (left: 1.33 12)",
          "12 + 6 = 18 (left: 8 18)",
          "6 * 8 = 48 (left: 12 48)",
          "8 - 6 = 2 (left: 2 12)",
          "12 - 8 = 4 (left: 4 6)",
          "12 /  6 = 2 (left: 2 8)",
          "12 - 6 = 6 (left: 6 8)"
        ]
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_2_4",
      "result": "PASS",
      "reason": "Value 60.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T11:34:43.359761",
      "event_type": "validation",
      "details": {
        "value": 60.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_2_4",
      "result": "PASS",
      "reason": "State validation passed: Last thought '8 - 6 = 2 (left: 2 12)' found in parent's thoughts; Previous thought '9 - 1 = 8 (left: 6 8 12)' found in parent's state",
      "timestamp": "2025-05-30T11:34:43.359815",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '8 - 6 = 2 (left: 2 12)' found in parent's thoughts",
          "Previous thought '9 - 1 = 8 (left: 6 8 12)' found in parent's state"
        ],
        "parent_thoughts": [
          "6 + 8 = 14 (left: 12 14)",
          "8 / 6 = 1.33 (left: 1.33 12)",
          "12 + 6 = 18 (left: 8 18)",
          "6 * 8 = 48 (left: 12 48)",
          "8 - 6 = 2 (left: 2 12)",
          "12 - 8 = 4 (left: 4 6)",
          "12 /  6 = 2 (left: 2 8)",
          "12 - 6 = 6 (left: 6 8)"
        ],
        "parent_state": [
          "9 - 1 = 8 (left: 6 8 12)"
        ]
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_4",
      "result": "PASS",
      "reason": "node_id 0_2_4 matches thought position.",
      "timestamp": "2025-05-30T11:34:43.359858",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_4",
        "state": "8 - 6 = 2 (left: 2 12)",
        "thoughts": [
          "6 + 8 = 14 (left: 12 14)",
          "8 / 6 = 1.33 (left: 1.33 12)",
          "12 + 6 = 18 (left: 8 18)",
          "6 * 8 = 48 (left: 12 48)",
          "8 - 6 = 2 (left: 2 12)",
          "12 - 8 = 4 (left: 4 6)",
          "12 /  6 = 2 (left: 2 8)",
          "12 - 6 = 6 (left: 6 8)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_2_4",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T11:34:50.636072",
      "event_type": "validation",
      "details": {
        "expected_state": "9 - 1 = 8 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)",
        "actual_state": "9 - 1 = 8 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_4_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:34:59.632888",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_4_0",
      "result": "PASS",
      "reason": "node_id 0_2_4_0 matches thought position.",
      "timestamp": "2025-05-30T11:34:59.632990",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_4_0",
        "state": "2 + 12 = 14 (left: 14)",
        "thoughts": [
          "2 + 12 = 14 (left: 14)",
          "12 / 2 = 6 (left: 6)",
          "12 - 2 = 10 (left: 10)",
          "2 * 12 = 24 (left: 24)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_4_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:35:06.550154",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_4_1",
      "result": "PASS",
      "reason": "node_id 0_2_4_1 matches thought position.",
      "timestamp": "2025-05-30T11:35:06.550241",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_4_1",
        "state": "12 / 2 = 6 (left: 6)",
        "thoughts": [
          "2 + 12 = 14 (left: 14)",
          "12 / 2 = 6 (left: 6)",
          "12 - 2 = 10 (left: 10)",
          "2 * 12 = 24 (left: 24)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_4_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:35:14.507306",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_4_2",
      "result": "PASS",
      "reason": "node_id 0_2_4_2 matches thought position.",
      "timestamp": "2025-05-30T11:35:14.507390",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_4_2",
        "state": "12 - 2 = 10 (left: 10)",
        "thoughts": [
          "2 + 12 = 14 (left: 14)",
          "12 / 2 = 6 (left: 6)",
          "12 - 2 = 10 (left: 10)",
          "2 * 12 = 24 (left: 24)"
        ]
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_2_4_3",
      "result": "PASS",
      "reason": "Value 60.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T11:35:20.953508",
      "event_type": "validation",
      "details": {
        "value": 60.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_2_4_3",
      "result": "PASS",
      "reason": "State validation passed: Last thought '2 * 12 = 24 (left: 24)' found in parent's thoughts; Previous thought '9 - 1 = 8 (left: 6 8 12)' found in parent's state; Previous thought '8 - 6 = 2 (left: 2 12)' found in parent's state",
      "timestamp": "2025-05-30T11:35:20.953565",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '2 * 12 = 24 (left: 24)' found in parent's thoughts",
          "Previous thought '9 - 1 = 8 (left: 6 8 12)' found in parent's state",
          "Previous thought '8 - 6 = 2 (left: 2 12)' found in parent's state"
        ],
        "parent_thoughts": [
          "2 + 12 = 14 (left: 14)",
          "12 / 2 = 6 (left: 6)",
          "12 - 2 = 10 (left: 10)",
          "2 * 12 = 24 (left: 24)"
        ],
        "parent_state": [
          "9 - 1 = 8 (left: 6 8 12)",
          "8 - 6 = 2 (left: 2 12)"
        ]
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_4_3",
      "result": "PASS",
      "reason": "node_id 0_2_4_3 matches thought position.",
      "timestamp": "2025-05-30T11:35:20.953605",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_4_3",
        "state": "2 * 12 = 24 (left: 24)",
        "thoughts": [
          "2 + 12 = 14 (left: 14)",
          "12 / 2 = 6 (left: 6)",
          "12 - 2 = 10 (left: 10)",
          "2 * 12 = 24 (left: 24)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_2_4_3",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T11:35:27.025291",
      "event_type": "validation",
      "details": {
        "expected_state": "9 - 1 = 8 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
        "actual_state": "9 - 1 = 8 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_4_3_0",
      "result": "PASS",
      "reason": "node_id 0_2_4_3_0 matches thought position.",
      "timestamp": "2025-05-30T11:35:33.347556",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_4_3_0",
        "state": "Answer: (9 - 1 - 6) * 12 = 24",
        "thoughts": [
          "Answer: (9 - 1 - 6) * 12 = 24"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_2_4_3",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_2_4_3; Correctly backtracking to parent '0_2_4'",
      "timestamp": "2025-05-30T11:35:37.399693",
      "event_type": "validation",
      "details": {
        "popped_node": "0_2_4_3",
        "expected_popped": "0_2_4_3",
        "backtrack_to": "0_2_4",
        "expected_parent": "0_2_4",
        "validation_details": [
          "Correctly popped expected node 0_2_4_3",
          "Correctly backtracking to parent '0_2_4'"
        ]
      }
    },
    {
      "check_name": "base_case",
      "node_id": "0_2_4_3",
      "result": "PASS",
      "reason": "Level limit 3 exceeded - valid backtrack",
      "timestamp": "2025-05-30T11:35:37.399735",
      "event_type": "validation",
      "details": {
        "stack_size": 3,
        "level_limit": 3
      }
    },
    {
      "check_name": "backtracking_II",
      "node_id": "0_2_4_3",
      "result": "PASS",
      "reason": "Correct True flag used in True backtrack mode",
      "timestamp": "2025-05-30T11:35:37.399748",
      "event_type": "validation",
      "details": {
        "flag": "True",
        "true_backtrack_mode": true
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_2_4",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_2_4; Correctly backtracking to parent '0_2'",
      "timestamp": "2025-05-30T11:35:39.904639",
      "event_type": "validation",
      "details": {
        "popped_node": "0_2_4",
        "expected_popped": "0_2_4",
        "backtrack_to": "0_2",
        "expected_parent": "0_2",
        "validation_details": [
          "Correctly popped expected node 0_2_4",
          "Correctly backtracking to parent '0_2'"
        ]
      }
    },
    {
      "check_name": "backtracking_II",
      "node_id": "0_2_4",
      "result": "PASS",
      "reason": "Correct True flag used in True backtrack mode",
      "timestamp": "2025-05-30T11:35:39.904666",
      "event_type": "validation",
      "details": {
        "flag": "True",
        "true_backtrack_mode": true
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_2; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-30T11:35:42.061243",
      "event_type": "validation",
      "details": {
        "popped_node": "0_2",
        "expected_popped": "0_2",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_2",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_II",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "Correct True flag used in True backtrack mode",
      "timestamp": "2025-05-30T11:35:42.061280",
      "event_type": "validation",
      "details": {
        "flag": "True",
        "true_backtrack_mode": true
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
      "timestamp": "2025-05-30T11:35:44.220418",
      "event_type": "validation",
      "details": {
        "popped_node": "0",
        "expected_popped": "0",
        "backtrack_to": "None",
        "expected_parent": "None",
        "validation_details": [
          "Correctly popped expected node 0",
          "Correctly backtracking to parent 'None'"
        ]
      }
    },
    {
      "check_name": "backtracking_II",
      "node_id": "0",
      "result": "PASS",
      "reason": "Correct True flag used in True backtrack mode",
      "timestamp": "2025-05-30T11:35:44.220456",
      "event_type": "validation",
      "details": {
        "flag": "True",
        "true_backtrack_mode": true
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900560",
      "event_type": "validation",
      "details": {
        "state": "1 + 6 = 7 (left: 7 9 12)",
        "thought": "1 + 6 = 7 (left: 7 9 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900589",
      "event_type": "validation",
      "details": {
        "state": "12 - 1 = 11 (left: 6 9 11)",
        "thought": "12 - 1 = 11 (left: 6 9 11)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900597",
      "event_type": "validation",
      "details": {
        "state": "9 - 1 = 8 (left: 6 8 12)",
        "thought": "9 - 1 = 8 (left: 6 8 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900645",
      "event_type": "validation",
      "details": {
        "state": "6 + 9 = 15 (left: 11 15)",
        "thought": "6 + 9 = 15 (left: 11 15)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900653",
      "event_type": "validation",
      "details": {
        "state": "9 - 6 = 3 (left: 3 11)",
        "thought": "9 - 6 = 3 (left: 3 11)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900660",
      "event_type": "validation",
      "details": {
        "state": "11 - 6 = 5 (left: 5 9)",
        "thought": "11 - 6 = 5 (left: 5 9)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900667",
      "event_type": "validation",
      "details": {
        "state": "11 - 9 = 2 (left: 2 6)",
        "thought": "11 - 9 = 2 (left: 2 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900673",
      "event_type": "validation",
      "details": {
        "state": "6 * 9 = 54 (left: 11 54)",
        "thought": "6 * 9 = 54 (left: 11 54)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900679",
      "event_type": "validation",
      "details": {
        "state": "11 + 6 = 17 (left: 9 17)",
        "thought": "11 + 6 = 17 (left: 9 17)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900686",
      "event_type": "validation",
      "details": {
        "state": "9 + 6 = 15 (left: 11 15)",
        "thought": "9 + 6 = 15 (left: 11 15)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_7",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900693",
      "event_type": "validation",
      "details": {
        "state": "11 * 6 = 66 (left: 9 66)",
        "thought": "11 * 6 = 66 (left: 9 66)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_8",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900699",
      "event_type": "validation",
      "details": {
        "state": "9 * 6 = 54 (left: 11 54)",
        "thought": "9 * 6 = 54 (left: 11 54)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_9",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900711",
      "event_type": "validation",
      "details": {
        "state": "11 / 6 = 1.833 (left: 1.833 9)",
        "thought": "11 / 6 = 1.833 (left: 1.833 9)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900774",
      "event_type": "validation",
      "details": {
        "state": "6 + 8 = 14 (left: 12 14)",
        "thought": "6 + 8 = 14 (left: 12 14)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900781",
      "event_type": "validation",
      "details": {
        "state": "8 / 6 = 1.33 (left: 1.33 12)",
        "thought": "8 / 6 = 1.33 (left: 1.33 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900787",
      "event_type": "validation",
      "details": {
        "state": "12 + 6 = 18 (left: 8 18)",
        "thought": "12 + 6 = 18 (left: 8 18)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900794",
      "event_type": "validation",
      "details": {
        "state": "6 * 8 = 48 (left: 12 48)",
        "thought": "6 * 8 = 48 (left: 12 48)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900800",
      "event_type": "validation",
      "details": {
        "state": "8 - 6 = 2 (left: 2 12)",
        "thought": "8 - 6 = 2 (left: 2 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_4_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900835",
      "event_type": "validation",
      "details": {
        "state": "2 + 12 = 14 (left: 14)",
        "thought": "2 + 12 = 14 (left: 14)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_4_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900842",
      "event_type": "validation",
      "details": {
        "state": "12 / 2 = 6 (left: 6)",
        "thought": "12 / 2 = 6 (left: 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_4_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900848",
      "event_type": "validation",
      "details": {
        "state": "12 - 2 = 10 (left: 10)",
        "thought": "12 - 2 = 10 (left: 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_4_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900855",
      "event_type": "validation",
      "details": {
        "state": "2 * 12 = 24 (left: 24)",
        "thought": "2 * 12 = 24 (left: 24)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_4_3_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:35:45.900884",
      "event_type": "validation",
      "details": {
        "state": "Answer: (9 - 1 - 6) * 12 = 24",
        "thought": "Answer: (9 - 1 - 6) * 12 = 24"
      }
    },
    {
      "check_name": "final_answer",
      "node_id": "final",
      "result": "PASS",
      "reason": "Result 24 matches expected answer 24.0",
      "timestamp": "2025-05-30T11:35:45.901002",
      "event_type": "validation",
      "details": {
        "result": 24,
        "expected": 24.0,
        "difference": 0.0
      }
    }
  ],
  "legacy_log": [
    {
      "event": "push",
      "node_id": "0",
      "issues": [],
      "log": []
    },
    {
      "event": "push",
      "node_id": "0_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_0 with value 2.001 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_1 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '12 - 1 = 11 (left: 6 9 11)' found in parent's thoughts",
        "\u2705 Node 0_1 matches thought position.",
        "\u2705 State consistency check passed for node 0_1"
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_7",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_7 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_7 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_8",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_8 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_8 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_9",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_9 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_9 matches thought position."
      ]
    },
    {
      "event": "pop",
      "node_id": "",
      "issues": [],
      "log": [
        "\u2705 Popped 0_1 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_1; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_1 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_2_4_3 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0_2_4'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_2_4_3; Correctly backtracking to parent '0_2_4'",
        "\u2705 Level limit exceeded \u2014 valid reason for backtracking.",
        "\u2705 Subsequent backtrack validation: correctly using True flag in Subsequent mode for 0_2_4_3.",
        "\u2705 Popped 0_2_4 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0_2'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_2_4; Correctly backtracking to parent '0_2'",
        "\u2705 Subsequent backtrack validation: correctly using True flag in Subsequent mode for 0_2_4.",
        "\u2705 Popped 0_2 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_2; Correctly backtracking to parent '0'",
        "\u2705 Subsequent backtrack validation: correctly using True flag in Subsequent mode for 0_2.",
        "\u2705 Popped 0 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to 'None'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
        "\u2705 Subsequent backtrack validation: correctly using True flag in Subsequent mode for 0."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_2 with value 41.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '9 - 1 = 8 (left: 6 8 12)' found in parent's thoughts",
        "\u2705 Sequential child node validation: pushing 0_2 after popping 0_1 is correct.",
        "\u2705 Node 0_2 matches thought position.",
        "\u2705 State consistency check passed for node 0_2"
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_4",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_2_4 with value 60.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '8 - 6 = 2 (left: 2 12)' found in parent's thoughts; Previous thought '9 - 1 = 8 (left: 6 8 12)' found in parent's state",
        "\u2705 Node 0_2_4 matches thought position.",
        "\u2705 State consistency check passed for node 0_2_4"
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_4_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_4_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_4_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_4_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_4_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_4_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_4_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_4_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_4_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_4_3",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_2_4_3 with value 60.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '2 * 12 = 24 (left: 24)' found in parent's thoughts; Previous thought '9 - 1 = 8 (left: 6 8 12)' found in parent's state; Previous thought '8 - 6 = 2 (left: 2 12)' found in parent's state",
        "\u2705 Node 0_2_4_3 matches thought position.",
        "\u2705 State consistency check passed for node 0_2_4_3"
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_4_3_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_4_3_0 matches thought position."
      ]
    }
  ],
  "tree_trace": {
    "0": {
      "state": null,
      "thought": "1 + 6 = 7 (left: 7 9 12)\n12 - 1 = 11 (left: 6 9 11)\n9 - 1 = 8 (left: 6 8 12)\n6 * 1 = 6 (left: 6 9 12)\n12 / 1 = 12 (left: 6 9 12)\n9 / 1 = 9 (left: 6 9 12)\n6 / 1 = 6 (left: 6 9 12)\n9 + 6 = 15 (left: 1 12 15)\n12 - 6 = 6 (left: 1 6 9)\n12 / 6 = 2 (left: 1 2 9)\n9 - 6 = 3 (left: 1 3 12)\n9 / 6 = 1.5 (left: 1 1.5 12)\n12 + 1 = 13 (left: 6 9 13)\n12 - 9 = 3 (left: 1 3 6)\n12 / 9 = 1.333 (left: 1 1.333 6)\n9 * 1 = 9 (left: 6 9 12)\n9 - 1 = 8 (left: 6 8 12)\n9 / 1 = 9 (left: 6 9 12)\n6 + 1 = 7 (left: 7 9 12)\n6 - 1 = 5 (left: 5 9 12)\n6 / 1 = 6 (left: 6 9 12)",
      "value": null,
      "opening_remark": null,
      "children": {
        "0_0": {
          "state": "1 + 6 = 7 (left: 7 9 12)",
          "thought": null,
          "value": 2.001,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_1": {
          "state": "12 - 1 = 11 (left: 6 9 11)",
          "thought": "6 + 9 = 15 (left: 11 15)\n9 - 6 = 3 (left: 3 11)\n11 - 6 = 5 (left: 5 9)\n11 - 9 = 2 (left: 2 6)\n6 * 9 = 54 (left: 11 54)\n11 + 6 = 17 (left: 9 17)\n9 + 6 = 15 (left: 11 15)\n11 * 6 = 66 (left: 9 66)\n9 * 6 = 54 (left: 11 54)\n11 / 6 = 1.833 (left: 1.833 9)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_1_0": {
              "state": "12 - 1 = 11 (left: 6 9 11)\n6 + 9 = 15 (left: 11 15)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_1": {
              "state": "12 - 1 = 11 (left: 6 9 11)\n9 - 6 = 3 (left: 3 11)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_2": {
              "state": "12 - 1 = 11 (left: 6 9 11)\n11 - 6 = 5 (left: 5 9)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_3": {
              "state": "12 - 1 = 11 (left: 6 9 11)\n11 - 9 = 2 (left: 2 6)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_4": {
              "state": "12 - 1 = 11 (left: 6 9 11)\n6 * 9 = 54 (left: 11 54)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_5": {
              "state": "12 - 1 = 11 (left: 6 9 11)\n11 + 6 = 17 (left: 9 17)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_6": {
              "state": "12 - 1 = 11 (left: 6 9 11)\n9 + 6 = 15 (left: 11 15)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_7": {
              "state": "12 - 1 = 11 (left: 6 9 11)\n11 * 6 = 66 (left: 9 66)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_8": {
              "state": "12 - 1 = 11 (left: 6 9 11)\n9 * 6 = 54 (left: 11 54)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_9": {
              "state": "12 - 1 = 11 (left: 6 9 11)\n11 / 6 = 1.833 (left: 1.833 9)",
              "thought": null,
              "value": 1.002,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_2": {
          "state": "9 - 1 = 8 (left: 6 8 12)",
          "thought": "6 + 8 = 14 (left: 12 14)\n8 / 6 = 1.33 (left: 1.33 12)\n12 + 6 = 18 (left: 8 18)\n6 * 8 = 48 (left: 12 48)\n8 - 6 = 2 (left: 2 12)\n12 - 8 = 4 (left: 4 6)\n12 /  6 = 2 (left: 2 8)\n12 - 6 = 6 (left: 6 8)",
          "value": 41.0,
          "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
          "children": {
            "0_2_0": {
              "state": "9 - 1 = 8 (left: 6 8 12)\n6 + 8 = 14 (left: 12 14)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_1": {
              "state": "9 - 1 = 8 (left: 6 8 12)\n8 / 6 = 1.33 (left: 1.33 12)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_2": {
              "state": "9 - 1 = 8 (left: 6 8 12)\n12 + 6 = 18 (left: 8 18)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_3": {
              "state": "9 - 1 = 8 (left: 6 8 12)\n6 * 8 = 48 (left: 12 48)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_4": {
              "state": "9 - 1 = 8 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)",
              "thought": "2 + 12 = 14 (left: 14)\n12 / 2 = 6 (left: 6)\n12 - 2 = 10 (left: 10)\n2 * 12 = 24 (left: 24)",
              "value": 60.0,
              "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
              "children": {
                "0_2_4_0": {
                  "state": "9 - 1 = 8 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                  "thought": null,
                  "value": 0.003,
                  "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                  "children": {},
                  "closing_remark": null,
                  "backtracked": false
                },
                "0_2_4_1": {
                  "state": "9 - 1 = 8 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                  "thought": null,
                  "value": 0.003,
                  "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                  "children": {},
                  "closing_remark": null,
                  "backtracked": false
                },
                "0_2_4_2": {
                  "state": "9 - 1 = 8 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                  "thought": null,
                  "value": 0.003,
                  "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                  "children": {},
                  "closing_remark": null,
                  "backtracked": false
                },
                "0_2_4_3": {
                  "state": "9 - 1 = 8 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                  "thought": "Answer: (9 - 1 - 6) * 12 = 24",
                  "value": 60.0,
                  "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
                  "children": {
                    "0_2_4_3_0": {
                      "state": "9 - 1 = 8 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 - 1 - 6) * 12 = 24",
                      "thought": null,
                      "value": 60.0,
                      "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
                      "children": {},
                      "closing_remark": null,
                      "backtracked": false
                    }
                  },
                  "closing_remark": null,
                  "backtracked": true,
                  "backtracked_to": "0_2_4"
                }
              },
              "closing_remark": null,
              "backtracked": true,
              "backtracked_to": "0_2"
            }
          },
          "closing_remark": null,
          "backtracked": true,
          "backtracked_to": "0"
        }
      },
      "closing_remark": null,
      "backtracked": false
    }
  }
}