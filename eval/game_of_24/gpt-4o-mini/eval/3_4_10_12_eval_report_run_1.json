{
  "summary": {
    "total_checks": 168,
    "passed": 150,
    "failed": 18
  },
  "checks_by_type": {
    "pruning": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pruning",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-30T12:34:18.030167",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-30T12:34:29.018555",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:35:07.943809",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:35:19.023971",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:35:28.393030",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:35:38.145177",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:35:47.275877",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:35:59.920137",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:36:13.068193",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_7",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:36:28.923311",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_8",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:36:38.730317",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_2_9",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:36:49.305588",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:37:28.661754",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:37:42.274872",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:37:55.459444",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:38:08.367884",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:38:20.150053",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_5",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-30T12:38:33.176069",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_3_6",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-30T12:38:46.132532",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:39:17.449908",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:39:29.076570",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_2_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:39:56.415211",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_2_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:40:05.666680",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_2_2_0",
          "result": "PASS",
          "reason": "Value 0 meets threshold 3.0",
          "timestamp": "2025-05-30T12:40:56.030258",
          "event_type": "validation",
          "details": {
            "value": 0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_2_2_1",
          "result": "PASS",
          "reason": "Value 0 meets threshold 3.0",
          "timestamp": "2025-05-30T12:41:10.371484",
          "event_type": "validation",
          "details": {
            "value": 0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_2_2_2",
          "result": "PASS",
          "reason": "Value 0 meets threshold 3.0",
          "timestamp": "2025-05-30T12:41:18.807422",
          "event_type": "validation",
          "details": {
            "value": 0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_2_2_3",
          "result": "PASS",
          "reason": "Value 0 meets threshold 3.0",
          "timestamp": "2025-05-30T12:41:33.043437",
          "event_type": "validation",
          "details": {
            "value": 0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_3_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:42:16.423472",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_3_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:42:31.560983",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_3_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:42:45.429703",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_3_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:42:58.633820",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_3_4",
          "result": "PASS",
          "reason": "Value 1.002 meets threshold 3.0",
          "timestamp": "2025-05-30T12:43:09.875816",
          "event_type": "validation",
          "details": {
            "value": 1.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_3_5_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:43:46.179098",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_3_5_1",
          "result": "PASS",
          "reason": "Value 0.002 meets threshold 3.0",
          "timestamp": "2025-05-30T12:43:54.040508",
          "event_type": "validation",
          "details": {
            "value": 0.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_3_5_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:44:06.961308",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_3_5_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:44:19.685783",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:44:34.529029",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_5",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:44:47.426574",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_6",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:45:01.089573",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_4_7",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T12:45:10.190465",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        }
      ]
    },
    "child_id_assignment": {
      "FAIL": 5,
      "details": [
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "node_id 0_0 matches thought position.",
          "timestamp": "2025-05-30T12:34:18.030261",
          "event_type": "validation",
          "details": {
            "node_id": "0_0",
            "state": "3 + 4 = 7 (left: 7 10 12)",
            "thoughts": [
              "3 + 4 = 7 (left: 7 10 12)",
              "4 - 3 = 1 (left: 1 10 12)",
              "10 - 3 = 7 (left: 4 7 12)",
              "12 - 3 = 9 (left: 4 9 10)",
              "3 * 4 = 12 (left: 10 12 12)",
              "10 / 3 = 3.33 (left: 3.33 4 12)",
              "12 / 3 = 4 (left: 4 4 10)",
              "12 - 4 = 8 (left: 3 8 10)",
              "10 - 4 = 6 (left: 3 6 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "node_id 0_1 matches thought position.",
          "timestamp": "2025-05-30T12:34:29.018634",
          "event_type": "validation",
          "details": {
            "node_id": "0_1",
            "state": "4 - 3 = 1 (left: 1 10 12)",
            "thoughts": [
              "3 + 4 = 7 (left: 7 10 12)",
              "4 - 3 = 1 (left: 1 10 12)",
              "10 - 3 = 7 (left: 4 7 12)",
              "12 - 3 = 9 (left: 4 9 10)",
              "3 * 4 = 12 (left: 10 12 12)",
              "10 / 3 = 3.33 (left: 3.33 4 12)",
              "12 / 3 = 4 (left: 4 4 10)",
              "12 - 4 = 8 (left: 3 8 10)",
              "10 - 4 = 6 (left: 3 6 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "node_id 0_2 matches thought position.",
          "timestamp": "2025-05-30T12:34:41.603423",
          "event_type": "validation",
          "details": {
            "node_id": "0_2",
            "state": "10 - 3 = 7 (left: 4 7 12)",
            "thoughts": [
              "3 + 4 = 7 (left: 7 10 12)",
              "4 - 3 = 1 (left: 1 10 12)",
              "10 - 3 = 7 (left: 4 7 12)",
              "12 - 3 = 9 (left: 4 9 10)",
              "3 * 4 = 12 (left: 10 12 12)",
              "10 / 3 = 3.33 (left: 3.33 4 12)",
              "12 / 3 = 4 (left: 4 4 10)",
              "12 - 4 = 8 (left: 3 8 10)",
              "10 - 4 = 6 (left: 3 6 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_0",
          "result": "PASS",
          "reason": "node_id 0_2_0 matches thought position.",
          "timestamp": "2025-05-30T12:35:07.943887",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_0",
            "state": "4 + 7 = 11 (left: 11 12)",
            "thoughts": [
              "4 + 7 = 11 (left: 11 12)",
              "12 - 4 = 8 (left: 7 8)",
              "12 - 7 = 5 (left: 4 5)",
              "7 - 4 = 3 (left: 3 12)",
              "12 / 4 = 3 (left: 3 7)",
              "7 * 4 = 28 (left: 12 28) ",
              "4 * 12 = 48 (left: 7 48) ",
              "7 + 12 = 19 (left: 4 19) ",
              "12 + 4 = 16 (left: 7 16) ",
              "7 * 12 = 84 (left: 4 84)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_1",
          "result": "PASS",
          "reason": "node_id 0_2_1 matches thought position.",
          "timestamp": "2025-05-30T12:35:19.024232",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_1",
            "state": "12 - 4 = 8 (left: 7 8)",
            "thoughts": [
              "4 + 7 = 11 (left: 11 12)",
              "12 - 4 = 8 (left: 7 8)",
              "12 - 7 = 5 (left: 4 5)",
              "7 - 4 = 3 (left: 3 12)",
              "12 / 4 = 3 (left: 3 7)",
              "7 * 4 = 28 (left: 12 28) ",
              "4 * 12 = 48 (left: 7 48) ",
              "7 + 12 = 19 (left: 4 19) ",
              "12 + 4 = 16 (left: 7 16) ",
              "7 * 12 = 84 (left: 4 84)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_2",
          "result": "PASS",
          "reason": "node_id 0_2_2 matches thought position.",
          "timestamp": "2025-05-30T12:35:28.393121",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_2",
            "state": "12 - 7 = 5 (left: 4 5)",
            "thoughts": [
              "4 + 7 = 11 (left: 11 12)",
              "12 - 4 = 8 (left: 7 8)",
              "12 - 7 = 5 (left: 4 5)",
              "7 - 4 = 3 (left: 3 12)",
              "12 / 4 = 3 (left: 3 7)",
              "7 * 4 = 28 (left: 12 28) ",
              "4 * 12 = 48 (left: 7 48) ",
              "7 + 12 = 19 (left: 4 19) ",
              "12 + 4 = 16 (left: 7 16) ",
              "7 * 12 = 84 (left: 4 84)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_3",
          "result": "PASS",
          "reason": "node_id 0_2_3 matches thought position.",
          "timestamp": "2025-05-30T12:35:38.145254",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_3",
            "state": "7 - 4 = 3 (left: 3 12)",
            "thoughts": [
              "4 + 7 = 11 (left: 11 12)",
              "12 - 4 = 8 (left: 7 8)",
              "12 - 7 = 5 (left: 4 5)",
              "7 - 4 = 3 (left: 3 12)",
              "12 / 4 = 3 (left: 3 7)",
              "7 * 4 = 28 (left: 12 28) ",
              "4 * 12 = 48 (left: 7 48) ",
              "7 + 12 = 19 (left: 4 19) ",
              "12 + 4 = 16 (left: 7 16) ",
              "7 * 12 = 84 (left: 4 84)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_4",
          "result": "PASS",
          "reason": "node_id 0_2_4 matches thought position.",
          "timestamp": "2025-05-30T12:35:47.275980",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_4",
            "state": "12 / 4 = 3 (left: 3 7)",
            "thoughts": [
              "4 + 7 = 11 (left: 11 12)",
              "12 - 4 = 8 (left: 7 8)",
              "12 - 7 = 5 (left: 4 5)",
              "7 - 4 = 3 (left: 3 12)",
              "12 / 4 = 3 (left: 3 7)",
              "7 * 4 = 28 (left: 12 28) ",
              "4 * 12 = 48 (left: 7 48) ",
              "7 + 12 = 19 (left: 4 19) ",
              "12 + 4 = 16 (left: 7 16) ",
              "7 * 12 = 84 (left: 4 84)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_5",
          "result": "PASS",
          "reason": "node_id 0_2_5 matches thought position.",
          "timestamp": "2025-05-30T12:35:59.920237",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_5",
            "state": "7 * 4 = 28 (left: 12 28)",
            "thoughts": [
              "4 + 7 = 11 (left: 11 12)",
              "12 - 4 = 8 (left: 7 8)",
              "12 - 7 = 5 (left: 4 5)",
              "7 - 4 = 3 (left: 3 12)",
              "12 / 4 = 3 (left: 3 7)",
              "7 * 4 = 28 (left: 12 28) ",
              "4 * 12 = 48 (left: 7 48) ",
              "7 + 12 = 19 (left: 4 19) ",
              "12 + 4 = 16 (left: 7 16) ",
              "7 * 12 = 84 (left: 4 84)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_6",
          "result": "PASS",
          "reason": "node_id 0_2_6 matches thought position.",
          "timestamp": "2025-05-30T12:36:13.068273",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_6",
            "state": "4 * 12 = 48 (left: 7 48)",
            "thoughts": [
              "4 + 7 = 11 (left: 11 12)",
              "12 - 4 = 8 (left: 7 8)",
              "12 - 7 = 5 (left: 4 5)",
              "7 - 4 = 3 (left: 3 12)",
              "12 / 4 = 3 (left: 3 7)",
              "7 * 4 = 28 (left: 12 28) ",
              "4 * 12 = 48 (left: 7 48) ",
              "7 + 12 = 19 (left: 4 19) ",
              "12 + 4 = 16 (left: 7 16) ",
              "7 * 12 = 84 (left: 4 84)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_7",
          "result": "PASS",
          "reason": "node_id 0_2_7 matches thought position.",
          "timestamp": "2025-05-30T12:36:28.923399",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_7",
            "state": "7 + 12 = 19 (left: 4 19)",
            "thoughts": [
              "4 + 7 = 11 (left: 11 12)",
              "12 - 4 = 8 (left: 7 8)",
              "12 - 7 = 5 (left: 4 5)",
              "7 - 4 = 3 (left: 3 12)",
              "12 / 4 = 3 (left: 3 7)",
              "7 * 4 = 28 (left: 12 28) ",
              "4 * 12 = 48 (left: 7 48) ",
              "7 + 12 = 19 (left: 4 19) ",
              "12 + 4 = 16 (left: 7 16) ",
              "7 * 12 = 84 (left: 4 84)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_8",
          "result": "PASS",
          "reason": "node_id 0_2_8 matches thought position.",
          "timestamp": "2025-05-30T12:36:38.730403",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_8",
            "state": "12 + 4 = 16 (left: 7 16)",
            "thoughts": [
              "4 + 7 = 11 (left: 11 12)",
              "12 - 4 = 8 (left: 7 8)",
              "12 - 7 = 5 (left: 4 5)",
              "7 - 4 = 3 (left: 3 12)",
              "12 / 4 = 3 (left: 3 7)",
              "7 * 4 = 28 (left: 12 28) ",
              "4 * 12 = 48 (left: 7 48) ",
              "7 + 12 = 19 (left: 4 19) ",
              "12 + 4 = 16 (left: 7 16) ",
              "7 * 12 = 84 (left: 4 84)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_2_9",
          "result": "PASS",
          "reason": "node_id 0_2_9 matches thought position.",
          "timestamp": "2025-05-30T12:36:49.305674",
          "event_type": "validation",
          "details": {
            "node_id": "0_2_9",
            "state": "7 * 12 = 84 (left: 4 84)",
            "thoughts": [
              "4 + 7 = 11 (left: 11 12)",
              "12 - 4 = 8 (left: 7 8)",
              "12 - 7 = 5 (left: 4 5)",
              "7 - 4 = 3 (left: 3 12)",
              "12 / 4 = 3 (left: 3 7)",
              "7 * 4 = 28 (left: 12 28) ",
              "4 * 12 = 48 (left: 7 48) ",
              "7 + 12 = 19 (left: 4 19) ",
              "12 + 4 = 16 (left: 7 16) ",
              "7 * 12 = 84 (left: 4 84)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "node_id 0_3 matches thought position.",
          "timestamp": "2025-05-30T12:37:04.967105",
          "event_type": "validation",
          "details": {
            "node_id": "0_3",
            "state": "12 - 3 = 9 (left: 4 9 10)",
            "thoughts": [
              "3 + 4 = 7 (left: 7 10 12)",
              "4 - 3 = 1 (left: 1 10 12)",
              "10 - 3 = 7 (left: 4 7 12)",
              "12 - 3 = 9 (left: 4 9 10)",
              "3 * 4 = 12 (left: 10 12 12)",
              "10 / 3 = 3.33 (left: 3.33 4 12)",
              "12 / 3 = 4 (left: 4 4 10)",
              "12 - 4 = 8 (left: 3 8 10)",
              "10 - 4 = 6 (left: 3 6 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_0",
          "result": "PASS",
          "reason": "node_id 0_3_0 matches thought position.",
          "timestamp": "2025-05-30T12:37:28.661863",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_0",
            "state": "4 + 9 = 13 (left: 10 13)",
            "thoughts": [
              "4 + 9 = 13 (left: 10 13)",
              "9 - 4 = 5 (left: 5 10)",
              "10 - 4 = 6 (left: 6 9)",
              "10 - 9 = 1 (left: 1 4)",
              "4 * 9 = 36 (left: 10 36)",
              "10 / 4 = 2.5 (left: 2.5 9)",
              "9 / 4 = 2.25 (left: 2.25 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_1",
          "result": "PASS",
          "reason": "node_id 0_3_1 matches thought position.",
          "timestamp": "2025-05-30T12:37:42.274969",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_1",
            "state": "9 - 4 = 5 (left: 5 10)",
            "thoughts": [
              "4 + 9 = 13 (left: 10 13)",
              "9 - 4 = 5 (left: 5 10)",
              "10 - 4 = 6 (left: 6 9)",
              "10 - 9 = 1 (left: 1 4)",
              "4 * 9 = 36 (left: 10 36)",
              "10 / 4 = 2.5 (left: 2.5 9)",
              "9 / 4 = 2.25 (left: 2.25 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_2",
          "result": "PASS",
          "reason": "node_id 0_3_2 matches thought position.",
          "timestamp": "2025-05-30T12:37:55.459539",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_2",
            "state": "10 - 4 = 6 (left: 6 9)",
            "thoughts": [
              "4 + 9 = 13 (left: 10 13)",
              "9 - 4 = 5 (left: 5 10)",
              "10 - 4 = 6 (left: 6 9)",
              "10 - 9 = 1 (left: 1 4)",
              "4 * 9 = 36 (left: 10 36)",
              "10 / 4 = 2.5 (left: 2.5 9)",
              "9 / 4 = 2.25 (left: 2.25 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_3",
          "result": "PASS",
          "reason": "node_id 0_3_3 matches thought position.",
          "timestamp": "2025-05-30T12:38:08.367976",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_3",
            "state": "10 - 9 = 1 (left: 1 4)",
            "thoughts": [
              "4 + 9 = 13 (left: 10 13)",
              "9 - 4 = 5 (left: 5 10)",
              "10 - 4 = 6 (left: 6 9)",
              "10 - 9 = 1 (left: 1 4)",
              "4 * 9 = 36 (left: 10 36)",
              "10 / 4 = 2.5 (left: 2.5 9)",
              "9 / 4 = 2.25 (left: 2.25 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_4",
          "result": "PASS",
          "reason": "node_id 0_3_4 matches thought position.",
          "timestamp": "2025-05-30T12:38:20.150135",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_4",
            "state": "4 * 9 = 36 (left: 10 36)",
            "thoughts": [
              "4 + 9 = 13 (left: 10 13)",
              "9 - 4 = 5 (left: 5 10)",
              "10 - 4 = 6 (left: 6 9)",
              "10 - 9 = 1 (left: 1 4)",
              "4 * 9 = 36 (left: 10 36)",
              "10 / 4 = 2.5 (left: 2.5 9)",
              "9 / 4 = 2.25 (left: 2.25 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_5",
          "result": "PASS",
          "reason": "node_id 0_3_5 matches thought position.",
          "timestamp": "2025-05-30T12:38:33.176161",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_5",
            "state": "10 / 4 = 2.5 (left: 2.5 9)",
            "thoughts": [
              "4 + 9 = 13 (left: 10 13)",
              "9 - 4 = 5 (left: 5 10)",
              "10 - 4 = 6 (left: 6 9)",
              "10 - 9 = 1 (left: 1 4)",
              "4 * 9 = 36 (left: 10 36)",
              "10 / 4 = 2.5 (left: 2.5 9)",
              "9 / 4 = 2.25 (left: 2.25 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_3_6",
          "result": "PASS",
          "reason": "node_id 0_3_6 matches thought position.",
          "timestamp": "2025-05-30T12:38:46.132618",
          "event_type": "validation",
          "details": {
            "node_id": "0_3_6",
            "state": "9 / 4 = 2.25 (left: 2.25 10)",
            "thoughts": [
              "4 + 9 = 13 (left: 10 13)",
              "9 - 4 = 5 (left: 5 10)",
              "10 - 4 = 6 (left: 6 9)",
              "10 - 9 = 1 (left: 1 4)",
              "4 * 9 = 36 (left: 10 36)",
              "10 / 4 = 2.5 (left: 2.5 9)",
              "9 / 4 = 2.25 (left: 2.25 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "node_id 0_4 matches thought position.",
          "timestamp": "2025-05-30T12:38:55.960577",
          "event_type": "validation",
          "details": {
            "node_id": "0_4",
            "state": "3 * 4 = 12 (left: 10 12 12)",
            "thoughts": [
              "3 + 4 = 7 (left: 7 10 12)",
              "4 - 3 = 1 (left: 1 10 12)",
              "10 - 3 = 7 (left: 4 7 12)",
              "12 - 3 = 9 (left: 4 9 10)",
              "3 * 4 = 12 (left: 10 12 12)",
              "10 / 3 = 3.33 (left: 3.33 4 12)",
              "12 / 3 = 4 (left: 4 4 10)",
              "12 - 4 = 8 (left: 3 8 10)",
              "10 - 4 = 6 (left: 3 6 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_0",
          "result": "PASS",
          "reason": "node_id 0_4_0 matches thought position.",
          "timestamp": "2025-05-30T12:39:17.450002",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_0",
            "state": "10 + 12 = 22 (left: 12 22)",
            "thoughts": [
              "10 + 12 = 22 (left: 12 22)",
              "12 / 10 = 1.2 (left: 1.2 12)",
              "12 - 10 = 2 (left: 2 12)",
              "10 * 12 = 120 (left: 12 120)",
              "12 - 12 = 0 (left: 0 10)",
              "10 / 12 = 0.83 (left: 0.83 12)",
              "12 + 12 = 24 (left: 10 24)",
              "10 - 12 = -2 (left: -2 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_1",
          "result": "PASS",
          "reason": "node_id 0_4_1 matches thought position.",
          "timestamp": "2025-05-30T12:39:29.076800",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_1",
            "state": "12 / 10 = 1.2 (left: 1.2 12)",
            "thoughts": [
              "10 + 12 = 22 (left: 12 22)",
              "12 / 10 = 1.2 (left: 1.2 12)",
              "12 - 10 = 2 (left: 2 12)",
              "10 * 12 = 120 (left: 12 120)",
              "12 - 12 = 0 (left: 0 10)",
              "10 / 12 = 0.83 (left: 0.83 12)",
              "12 + 12 = 24 (left: 10 24)",
              "10 - 12 = -2 (left: -2 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_2",
          "result": "PASS",
          "reason": "node_id 0_4_2 matches thought position.",
          "timestamp": "2025-05-30T12:39:38.298147",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_2",
            "state": "12 - 10 = 2 (left: 2 12)",
            "thoughts": [
              "10 + 12 = 22 (left: 12 22)",
              "12 / 10 = 1.2 (left: 1.2 12)",
              "12 - 10 = 2 (left: 2 12)",
              "10 * 12 = 120 (left: 12 120)",
              "12 - 12 = 0 (left: 0 10)",
              "10 / 12 = 0.83 (left: 0.83 12)",
              "12 + 12 = 24 (left: 10 24)",
              "10 - 12 = -2 (left: -2 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_2_0",
          "result": "PASS",
          "reason": "node_id 0_4_2_0 matches thought position.",
          "timestamp": "2025-05-30T12:39:56.415296",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_2_0",
            "state": "2 + 12 = 14 (left: 14)",
            "thoughts": [
              "2 + 12 = 14 (left: 14)",
              "12 - 2 = 10 (left: 10)",
              "12 / 2 = 6 (left: 6)",
              "2 * 12 = 24 (left: 24)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_2_1",
          "result": "PASS",
          "reason": "node_id 0_4_2_1 matches thought position.",
          "timestamp": "2025-05-30T12:40:05.666755",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_2_1",
            "state": "12 - 2 = 10 (left: 10)",
            "thoughts": [
              "2 + 12 = 14 (left: 14)",
              "12 - 2 = 10 (left: 10)",
              "12 / 2 = 6 (left: 6)",
              "2 * 12 = 24 (left: 24)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_2_2",
          "result": "PASS",
          "reason": "node_id 0_4_2_2 matches thought position.",
          "timestamp": "2025-05-30T12:40:18.350915",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_2_2",
            "state": "12 / 2 = 6 (left: 6)",
            "thoughts": [
              "2 + 12 = 14 (left: 14)",
              "12 - 2 = 10 (left: 10)",
              "12 / 2 = 6 (left: 6)",
              "2 * 12 = 24 (left: 24)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_2_2_0",
          "result": "PASS",
          "reason": "node_id 0_4_2_2_0 matches thought position.",
          "timestamp": "2025-05-30T12:40:56.030349",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_2_2_0",
            "state": "10 + 6 = 16 (left: 8 14 16)",
            "thoughts": [
              "10 + 6 = 16 (left: 8 14 16)",
              "4 + 6 = 10 (left: 8 10 14)",
              "16 + 6 = 22 (left: 8 8 22)",
              "16 - 6 = 10 (left: 8 10 14)",
              "6 * 8 = 48 (left: 10 14 48)",
              "6 - 2 = 4 (left: 4 8 14)",
              "8 + 6 = 14 (left: 8 10 14)",
              "8 - 6 = 2 (left: 2 10 14)",
              "14 + 6 = 20 (left: 8 8 20)",
              "6 * 2 = 12 (left: 8 12 14)",
              "12 + 6 = 18 (left: 8 8 18)",
              "12 - 6 = 6 (left: 6 8 14)",
              "7 + 6 = 13 (left: 8 8 13)",
              "7 - 6 = 1 (left: 1 8 14)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_2_2_1",
          "result": "PASS",
          "reason": "node_id 0_4_2_2_1 matches thought position.",
          "timestamp": "2025-05-30T12:41:10.371567",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_2_2_1",
            "state": "4 + 6 = 10 (left: 8 10 14)",
            "thoughts": [
              "10 + 6 = 16 (left: 8 14 16)",
              "4 + 6 = 10 (left: 8 10 14)",
              "16 + 6 = 22 (left: 8 8 22)",
              "16 - 6 = 10 (left: 8 10 14)",
              "6 * 8 = 48 (left: 10 14 48)",
              "6 - 2 = 4 (left: 4 8 14)",
              "8 + 6 = 14 (left: 8 10 14)",
              "8 - 6 = 2 (left: 2 10 14)",
              "14 + 6 = 20 (left: 8 8 20)",
              "6 * 2 = 12 (left: 8 12 14)",
              "12 + 6 = 18 (left: 8 8 18)",
              "12 - 6 = 6 (left: 6 8 14)",
              "7 + 6 = 13 (left: 8 8 13)",
              "7 - 6 = 1 (left: 1 8 14)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_2_2_2",
          "result": "FAIL",
          "reason": "node_id 0_4_2_2_2 does not match thought position.",
          "timestamp": "2025-05-30T12:41:18.807501",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_2_2_2",
            "state": "12 - 2 = 10 (left: 10)",
            "thoughts": [
              "10 + 6 = 16 (left: 8 14 16)",
              "4 + 6 = 10 (left: 8 10 14)",
              "16 + 6 = 22 (left: 8 8 22)",
              "16 - 6 = 10 (left: 8 10 14)",
              "6 * 8 = 48 (left: 10 14 48)",
              "6 - 2 = 4 (left: 4 8 14)",
              "8 + 6 = 14 (left: 8 10 14)",
              "8 - 6 = 2 (left: 2 10 14)",
              "14 + 6 = 20 (left: 8 8 20)",
              "6 * 2 = 12 (left: 8 12 14)",
              "12 + 6 = 18 (left: 8 8 18)",
              "12 - 6 = 6 (left: 6 8 14)",
              "7 + 6 = 13 (left: 8 8 13)",
              "7 - 6 = 1 (left: 1 8 14)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_2_2_3",
          "result": "FAIL",
          "reason": "node_id 0_4_2_2_3 does not match thought position.",
          "timestamp": "2025-05-30T12:41:33.043528",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_2_2_3",
            "state": "6 * 8 = 48 (left: 10 48)",
            "thoughts": [
              "10 + 6 = 16 (left: 8 14 16)",
              "4 + 6 = 10 (left: 8 10 14)",
              "16 + 6 = 22 (left: 8 8 22)",
              "16 - 6 = 10 (left: 8 10 14)",
              "6 * 8 = 48 (left: 10 14 48)",
              "6 - 2 = 4 (left: 4 8 14)",
              "8 + 6 = 14 (left: 8 10 14)",
              "8 - 6 = 2 (left: 2 10 14)",
              "14 + 6 = 20 (left: 8 8 20)",
              "6 * 2 = 12 (left: 8 12 14)",
              "12 + 6 = 18 (left: 8 8 18)",
              "12 - 6 = 6 (left: 6 8 14)",
              "7 + 6 = 13 (left: 8 8 13)",
              "7 - 6 = 1 (left: 1 8 14)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_3",
          "result": "FAIL",
          "reason": "node_id 0_4_3 does not match thought position.",
          "timestamp": "2025-05-30T12:41:48.962717",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_3",
            "state": "12 - 3 = 9 (left: 4 9 10)",
            "thoughts": [
              "10 + 12 = 22 (left: 12 22)",
              "12 / 10 = 1.2 (left: 1.2 12)",
              "12 - 10 = 2 (left: 2 12)",
              "10 * 12 = 120 (left: 12 120)",
              "12 - 12 = 0 (left: 0 10)",
              "10 / 12 = 0.83 (left: 0.83 12)",
              "12 + 12 = 24 (left: 10 24)",
              "10 - 12 = -2 (left: -2 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_3_0",
          "result": "PASS",
          "reason": "node_id 0_4_3_0 matches thought position.",
          "timestamp": "2025-05-30T12:42:16.423539",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_3_0",
            "state": "4 + 9 = 13 (left: 10 13)",
            "thoughts": [
              "4 + 9 = 13 (left: 10 13)",
              "9 - 4 = 5 (left: 5 10)",
              "10 - 4 = 6 (left: 6 9)",
              "4 * 9 = 36 (left: 10 36)",
              "10 / 4 = 2.5 (left: 2.5 9)",
              "9 / 4 = 2.25 (left: 2.25 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_3_1",
          "result": "PASS",
          "reason": "node_id 0_4_3_1 matches thought position.",
          "timestamp": "2025-05-30T12:42:31.561069",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_3_1",
            "state": "9 - 4 = 5 (left: 5 10)",
            "thoughts": [
              "4 + 9 = 13 (left: 10 13)",
              "9 - 4 = 5 (left: 5 10)",
              "10 - 4 = 6 (left: 6 9)",
              "4 * 9 = 36 (left: 10 36)",
              "10 / 4 = 2.5 (left: 2.5 9)",
              "9 / 4 = 2.25 (left: 2.25 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_3_2",
          "result": "PASS",
          "reason": "node_id 0_4_3_2 matches thought position.",
          "timestamp": "2025-05-30T12:42:45.429781",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_3_2",
            "state": "10 - 4 = 6 (left: 6 9)",
            "thoughts": [
              "4 + 9 = 13 (left: 10 13)",
              "9 - 4 = 5 (left: 5 10)",
              "10 - 4 = 6 (left: 6 9)",
              "4 * 9 = 36 (left: 10 36)",
              "10 / 4 = 2.5 (left: 2.5 9)",
              "9 / 4 = 2.25 (left: 2.25 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_3_3",
          "result": "PASS",
          "reason": "node_id 0_4_3_3 matches thought position.",
          "timestamp": "2025-05-30T12:42:58.633910",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_3_3",
            "state": "4 * 9 = 36 (left: 10 36)",
            "thoughts": [
              "4 + 9 = 13 (left: 10 13)",
              "9 - 4 = 5 (left: 5 10)",
              "10 - 4 = 6 (left: 6 9)",
              "4 * 9 = 36 (left: 10 36)",
              "10 / 4 = 2.5 (left: 2.5 9)",
              "9 / 4 = 2.25 (left: 2.25 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_3_4",
          "result": "PASS",
          "reason": "node_id 0_4_3_4 matches thought position.",
          "timestamp": "2025-05-30T12:43:09.875900",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_3_4",
            "state": "10 / 4 = 2.5 (left: 2.5 9)",
            "thoughts": [
              "4 + 9 = 13 (left: 10 13)",
              "9 - 4 = 5 (left: 5 10)",
              "10 - 4 = 6 (left: 6 9)",
              "4 * 9 = 36 (left: 10 36)",
              "10 / 4 = 2.5 (left: 2.5 9)",
              "9 / 4 = 2.25 (left: 2.25 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_3_5",
          "result": "PASS",
          "reason": "node_id 0_4_3_5 matches thought position.",
          "timestamp": "2025-05-30T12:43:24.100133",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_3_5",
            "state": "9 / 4 = 2.25 (left: 2.25 10)",
            "thoughts": [
              "4 + 9 = 13 (left: 10 13)",
              "9 - 4 = 5 (left: 5 10)",
              "10 - 4 = 6 (left: 6 9)",
              "4 * 9 = 36 (left: 10 36)",
              "10 / 4 = 2.5 (left: 2.5 9)",
              "9 / 4 = 2.25 (left: 2.25 10)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_3_5_0",
          "result": "PASS",
          "reason": "node_id 0_4_3_5_0 matches thought position.",
          "timestamp": "2025-05-30T12:43:46.179178",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_3_5_0",
            "state": "2.25 + 10 = 12.25 (left: 12.25)",
            "thoughts": [
              "2.25 + 10 = 12.25 (left: 12.25)",
              "10 - 2.25 = 7.75 (left: 7.75)",
              "10 / 2.25 = 4.44 (approximately, left: 4.44)",
              "2.25 * 10 = 22.5 (left: 22.5)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_3_5_1",
          "result": "PASS",
          "reason": "node_id 0_4_3_5_1 matches thought position.",
          "timestamp": "2025-05-30T12:43:54.040579",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_3_5_1",
            "state": "10 - 2.25 = 7.75 (left: 7.75)",
            "thoughts": [
              "2.25 + 10 = 12.25 (left: 12.25)",
              "10 - 2.25 = 7.75 (left: 7.75)",
              "10 / 2.25 = 4.44 (approximately, left: 4.44)",
              "2.25 * 10 = 22.5 (left: 22.5)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_3_5_2",
          "result": "PASS",
          "reason": "node_id 0_4_3_5_2 matches thought position.",
          "timestamp": "2025-05-30T12:44:06.961427",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_3_5_2",
            "state": "10 / 2.25 = 4.44 (approximately, left: 4.44)",
            "thoughts": [
              "2.25 + 10 = 12.25 (left: 12.25)",
              "10 - 2.25 = 7.75 (left: 7.75)",
              "10 / 2.25 = 4.44 (approximately, left: 4.44)",
              "2.25 * 10 = 22.5 (left: 22.5)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_3_5_3",
          "result": "PASS",
          "reason": "node_id 0_4_3_5_3 matches thought position.",
          "timestamp": "2025-05-30T12:44:19.685866",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_3_5_3",
            "state": "2.25 * 10 = 22.5 (left: 22.5)",
            "thoughts": [
              "2.25 + 10 = 12.25 (left: 12.25)",
              "10 - 2.25 = 7.75 (left: 7.75)",
              "10 / 2.25 = 4.44 (approximately, left: 4.44)",
              "2.25 * 10 = 22.5 (left: 22.5)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_4",
          "result": "PASS",
          "reason": "node_id 0_4_4 matches thought position.",
          "timestamp": "2025-05-30T12:44:34.529065",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_4",
            "state": "12 - 12 = 0 (left: 0 10)",
            "thoughts": [
              "10 + 12 = 22 (left: 12 22)",
              "12 / 10 = 1.2 (left: 1.2 12)",
              "12 - 10 = 2 (left: 2 12)",
              "10 * 12 = 120 (left: 12 120)",
              "12 - 12 = 0 (left: 0 10)",
              "10 / 12 = 0.83 (left: 0.83 12)",
              "12 + 12 = 24 (left: 10 24)",
              "10 - 12 = -2 (left: -2 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_5",
          "result": "FAIL",
          "reason": "node_id 0_4_5 does not match thought position.",
          "timestamp": "2025-05-30T12:44:47.426689",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_5",
            "state": "10 / 12 = 0.83 (left: 0.83 10)",
            "thoughts": [
              "10 + 12 = 22 (left: 12 22)",
              "12 / 10 = 1.2 (left: 1.2 12)",
              "12 - 10 = 2 (left: 2 12)",
              "10 * 12 = 120 (left: 12 120)",
              "12 - 12 = 0 (left: 0 10)",
              "10 / 12 = 0.83 (left: 0.83 12)",
              "12 + 12 = 24 (left: 10 24)",
              "10 - 12 = -2 (left: -2 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_6",
          "result": "PASS",
          "reason": "node_id 0_4_6 matches thought position.",
          "timestamp": "2025-05-30T12:45:01.089654",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_6",
            "state": "12 + 12 = 24 (left: 10 24)",
            "thoughts": [
              "10 + 12 = 22 (left: 12 22)",
              "12 / 10 = 1.2 (left: 1.2 12)",
              "12 - 10 = 2 (left: 2 12)",
              "10 * 12 = 120 (left: 12 120)",
              "12 - 12 = 0 (left: 0 10)",
              "10 / 12 = 0.83 (left: 0.83 12)",
              "12 + 12 = 24 (left: 10 24)",
              "10 - 12 = -2 (left: -2 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_4_7",
          "result": "FAIL",
          "reason": "node_id 0_4_7 does not match thought position.",
          "timestamp": "2025-05-30T12:45:10.190548",
          "event_type": "validation",
          "details": {
            "node_id": "0_4_7",
            "state": "10 - 12 = -2 (left: -2)",
            "thoughts": [
              "10 + 12 = 22 (left: 12 22)",
              "12 / 10 = 1.2 (left: 1.2 12)",
              "12 - 10 = 2 (left: 2 12)",
              "10 * 12 = 120 (left: 12 120)",
              "12 - 12 = 0 (left: 0 10)",
              "10 / 12 = 0.83 (left: 0.83 12)",
              "12 + 12 = 24 (left: 10 24)",
              "10 - 12 = -2 (left: -2 12)"
            ]
          }
        }
      ]
    },
    "pseudo_recursive_call": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T12:34:41.603324",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T12:37:04.966915",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "Value 60.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T12:38:55.960415",
          "event_type": "validation",
          "details": {
            "value": 60.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_4_2",
          "result": "PASS",
          "reason": "Value 60.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T12:39:38.297882",
          "event_type": "validation",
          "details": {
            "value": 60.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_4_2_2",
          "result": "PASS",
          "reason": "Value 40.001 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T12:40:18.350795",
          "event_type": "validation",
          "details": {
            "value": 40.001,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_4_3",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T12:41:48.962334",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        }
      ]
    },
    "child_state": {
      "FAIL": 1,
      "details": [
        {
          "check_name": "child_state",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "State validation passed: Last thought '10 - 3 = 7 (left: 4 7 12)' found in parent's thoughts",
          "timestamp": "2025-05-30T12:34:41.603380",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '10 - 3 = 7 (left: 4 7 12)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "3 + 4 = 7 (left: 7 10 12)",
              "4 - 3 = 1 (left: 1 10 12)",
              "10 - 3 = 7 (left: 4 7 12)",
              "12 - 3 = 9 (left: 4 9 10)",
              "3 * 4 = 12 (left: 10 12 12)",
              "10 / 3 = 3.33 (left: 3.33 4 12)",
              "12 / 3 = 4 (left: 4 4 10)",
              "12 - 4 = 8 (left: 3 8 10)",
              "10 - 4 = 6 (left: 3 6 12)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "State validation passed: Last thought '12 - 3 = 9 (left: 4 9 10)' found in parent's thoughts",
          "timestamp": "2025-05-30T12:37:04.966992",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '12 - 3 = 9 (left: 4 9 10)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "3 + 4 = 7 (left: 7 10 12)",
              "4 - 3 = 1 (left: 1 10 12)",
              "10 - 3 = 7 (left: 4 7 12)",
              "12 - 3 = 9 (left: 4 9 10)",
              "3 * 4 = 12 (left: 10 12 12)",
              "10 / 3 = 3.33 (left: 3.33 4 12)",
              "12 / 3 = 4 (left: 4 4 10)",
              "12 - 4 = 8 (left: 3 8 10)",
              "10 - 4 = 6 (left: 3 6 12)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "State validation passed: Last thought '3 * 4 = 12 (left: 10 12 12)' found in parent's thoughts",
          "timestamp": "2025-05-30T12:38:55.960490",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '3 * 4 = 12 (left: 10 12 12)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "3 + 4 = 7 (left: 7 10 12)",
              "4 - 3 = 1 (left: 1 10 12)",
              "10 - 3 = 7 (left: 4 7 12)",
              "12 - 3 = 9 (left: 4 9 10)",
              "3 * 4 = 12 (left: 10 12 12)",
              "10 / 3 = 3.33 (left: 3.33 4 12)",
              "12 / 3 = 4 (left: 4 4 10)",
              "12 - 4 = 8 (left: 3 8 10)",
              "10 - 4 = 6 (left: 3 6 12)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_4_2",
          "result": "PASS",
          "reason": "State validation passed: Last thought '12 - 10 = 2 (left: 2 12)' found in parent's thoughts; Previous thought '3 * 4 = 12 (left: 10 12 12)' found in parent's state",
          "timestamp": "2025-05-30T12:39:38.297987",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '12 - 10 = 2 (left: 2 12)' found in parent's thoughts",
              "Previous thought '3 * 4 = 12 (left: 10 12 12)' found in parent's state"
            ],
            "parent_thoughts": [
              "10 + 12 = 22 (left: 12 22)",
              "12 / 10 = 1.2 (left: 1.2 12)",
              "12 - 10 = 2 (left: 2 12)",
              "10 * 12 = 120 (left: 12 120)",
              "12 - 12 = 0 (left: 0 10)",
              "10 / 12 = 0.83 (left: 0.83 12)",
              "12 + 12 = 24 (left: 10 24)",
              "10 - 12 = -2 (left: -2 12)"
            ],
            "parent_state": [
              "3 * 4 = 12 (left: 10 12 12)"
            ]
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_4_2_2",
          "result": "PASS",
          "reason": "State validation passed: Last thought '12 / 2 = 6 (left: 6)' found in parent's thoughts; Previous thought '3 * 4 = 12 (left: 10 12 12)' found in parent's state; Previous thought '12 - 10 = 2 (left: 2 12)' found in parent's state",
          "timestamp": "2025-05-30T12:40:18.350861",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '12 / 2 = 6 (left: 6)' found in parent's thoughts",
              "Previous thought '3 * 4 = 12 (left: 10 12 12)' found in parent's state",
              "Previous thought '12 - 10 = 2 (left: 2 12)' found in parent's state"
            ],
            "parent_thoughts": [
              "2 + 12 = 14 (left: 14)",
              "12 - 2 = 10 (left: 10)",
              "12 / 2 = 6 (left: 6)",
              "2 * 12 = 24 (left: 24)"
            ],
            "parent_state": [
              "3 * 4 = 12 (left: 10 12 12)",
              "12 - 10 = 2 (left: 2 12)"
            ]
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_4_3",
          "result": "FAIL",
          "reason": "State validation failed: Last thought '12 - 3 = 9 (left: 4 9 10)' not found in parent's thoughts",
          "timestamp": "2025-05-30T12:41:48.962398",
          "event_type": "validation",
          "details": {
            "validation_errors": [
              "Last thought '12 - 3 = 9 (left: 4 9 10)' not found in parent's thoughts"
            ],
            "parent_thoughts": [
              "10 + 12 = 22 (left: 12 22)",
              "12 / 10 = 1.2 (left: 1.2 12)",
              "12 - 10 = 2 (left: 2 12)",
              "10 * 12 = 120 (left: 12 120)",
              "12 - 12 = 0 (left: 0 10)",
              "10 / 12 = 0.83 (left: 0.83 12)",
              "12 + 12 = 24 (left: 10 24)",
              "10 - 12 = -2 (left: -2 12)"
            ],
            "parent_state": [
              "3 * 4 = 12 (left: 10 12 12)"
            ],
            "current_state": [
              "3 * 4 = 12 (left: 10 12 12)",
              "12 - 3 = 9 (left: 4 9 10)"
            ]
          }
        }
      ]
    },
    "node_state": {
      "FAIL": 1,
      "details": [
        {
          "check_name": "node_state",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T12:34:51.172323",
          "event_type": "validation",
          "details": {
            "expected_state": "10 - 3 = 7 (left: 4 7 12)",
            "actual_state": "10 - 3 = 7 (left: 4 7 12)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T12:37:13.833871",
          "event_type": "validation",
          "details": {
            "expected_state": "12 - 3 = 9 (left: 4 9 10)",
            "actual_state": "12 - 3 = 9 (left: 4 9 10)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T12:39:05.009721",
          "event_type": "validation",
          "details": {
            "expected_state": "3 * 4 = 12 (left: 10 12 12)",
            "actual_state": "3 * 4 = 12 (left: 10 12 12)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_4_2",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T12:39:46.555087",
          "event_type": "validation",
          "details": {
            "expected_state": "3 * 4 = 12 (left: 10 12 12)\n12 - 10 = 2 (left: 2 12)",
            "actual_state": "3 * 4 = 12 (left: 10 12 12)\n12 - 10 = 2 (left: 2 12)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_4_2_2",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T12:40:35.097279",
          "event_type": "validation",
          "details": {
            "expected_state": "3 * 4 = 12 (left: 10 12 12)\n12 - 10 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
            "actual_state": "3 * 4 = 12 (left: 10 12 12)\n12 - 10 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_4_3",
          "result": "FAIL",
          "reason": "State mismatch: expected vs actual state don't match",
          "timestamp": "2025-05-30T12:41:58.311901",
          "event_type": "validation",
          "details": {
            "expected_state": "3 * 4 = 12 (left: 10 12 12)\n12 - 3 = 9 (left: 4 9 10)",
            "actual_state": "12 - 3 = 9 (left: 4 9 10)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_4_3_5",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T12:43:32.458253",
          "event_type": "validation",
          "details": {
            "expected_state": "12 - 3 = 9 (left: 4 9 10)\n9 / 4 = 2.25 (left: 2.25 10)",
            "actual_state": "12 - 3 = 9 (left: 4 9 10)\n9 / 4 = 2.25 (left: 2.25 10)"
          }
        }
      ]
    },
    "backtracking_I": {
      "FAIL": 4,
      "details": [
        {
          "check_name": "backtracking_I",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_2; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-30T12:36:52.477574",
          "event_type": "validation",
          "details": {
            "popped_node": "0_2",
            "expected_popped": "0_2",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_2",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_3; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-30T12:38:48.300706",
          "event_type": "validation",
          "details": {
            "popped_node": "0_3",
            "expected_popped": "0_3",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_3",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_4_2_2",
          "result": "FAIL",
          "reason": "Complete backtracking validation failed: Expected to backtrack to '0_4_2', but got '0_4'",
          "timestamp": "2025-05-30T12:41:36.137542",
          "event_type": "validation",
          "details": {
            "popped_node": "0_4_2_2",
            "expected_popped": "0_4_2_2",
            "backtrack_to": "0_4",
            "expected_parent": "0_4_2",
            "validation_errors": [
              "Expected to backtrack to '0_4_2', but got '0_4'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_4_3",
          "result": "FAIL",
          "reason": "Complete backtracking validation failed: Expected to pop 0_4_3_5, but popped 0_4_3",
          "timestamp": "2025-05-30T12:44:23.775990",
          "event_type": "validation",
          "details": {
            "popped_node": "0_4_3",
            "expected_popped": "0_4_3_5",
            "backtrack_to": "0_4",
            "expected_parent": "0_4",
            "validation_errors": [
              "Expected to pop 0_4_3_5, but popped 0_4_3"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_4_2",
          "result": "FAIL",
          "reason": "Complete backtracking validation failed: Expected to pop 0_4, but popped 0_4_2; Expected to backtrack to '0_4', but got '0'",
          "timestamp": "2025-05-30T12:45:13.134472",
          "event_type": "validation",
          "details": {
            "popped_node": "0_4_2",
            "expected_popped": "0_4",
            "backtrack_to": "0",
            "expected_parent": "0_4",
            "validation_errors": [
              "Expected to pop 0_4, but popped 0_4_2",
              "Expected to backtrack to '0_4', but got '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_4",
          "result": "FAIL",
          "reason": "Complete backtracking validation failed: Expected to pop 0, but popped 0_4; Expected to backtrack to '0', but got 'None'",
          "timestamp": "2025-05-30T12:45:18.053347",
          "event_type": "validation",
          "details": {
            "popped_node": "0_4",
            "expected_popped": "0",
            "backtrack_to": "None",
            "expected_parent": "0",
            "validation_errors": [
              "Expected to pop 0, but popped 0_4",
              "Expected to backtrack to '0', but got 'None'"
            ]
          }
        }
      ]
    },
    "backtracking_III": {
      "FAIL": 2,
      "details": [
        {
          "check_name": "backtracking_III",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "All 10 children explored - valid backtrack",
          "timestamp": "2025-05-30T12:36:52.477609",
          "event_type": "validation",
          "details": {
            "total_thoughts": 10,
            "evaluated_children": 10
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "All 7 children explored - valid backtrack",
          "timestamp": "2025-05-30T12:38:48.300743",
          "event_type": "validation",
          "details": {
            "total_thoughts": 7,
            "evaluated_children": 7
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_4_2_2",
          "result": "FAIL",
          "reason": "Only 4 of 14 children explored",
          "timestamp": "2025-05-30T12:41:36.137581",
          "event_type": "validation",
          "details": {
            "total_thoughts": 14,
            "evaluated_children": 4
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_4_3",
          "result": "PASS",
          "reason": "All 6 children explored - valid backtrack",
          "timestamp": "2025-05-30T12:44:23.776022",
          "event_type": "validation",
          "details": {
            "total_thoughts": 6,
            "evaluated_children": 6
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_4_2",
          "result": "FAIL",
          "reason": "Only 3 of 4 children explored",
          "timestamp": "2025-05-30T12:45:13.134500",
          "event_type": "validation",
          "details": {
            "total_thoughts": 4,
            "evaluated_children": 3
          }
        },
        {
          "check_name": "backtracking_III",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "All 8 children explored - valid backtrack",
          "timestamp": "2025-05-30T12:45:18.053376",
          "event_type": "validation",
          "details": {
            "total_thoughts": 8,
            "evaluated_children": 8
          }
        }
      ]
    },
    "backtracking_IV": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_IV",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_3 follows 0_2",
          "timestamp": "2025-05-30T12:37:04.967050",
          "event_type": "validation",
          "details": {
            "popped_node": "0_2",
            "current_node": "0_3",
            "expected_index": 3,
            "actual_index": 3
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_4 follows 0_3",
          "timestamp": "2025-05-30T12:38:55.960535",
          "event_type": "validation",
          "details": {
            "popped_node": "0_3",
            "current_node": "0_4",
            "expected_index": 4,
            "actual_index": 4
          }
        },
        {
          "check_name": "backtracking_IV",
          "node_id": "0_4_4",
          "result": "PASS",
          "reason": "Correct sequential sibling: 0_4_4 follows 0_4_3",
          "timestamp": "2025-05-30T12:44:34.528982",
          "event_type": "validation",
          "details": {
            "popped_node": "0_4_3",
            "current_node": "0_4_4",
            "expected_index": 4,
            "actual_index": 4
          }
        }
      ]
    },
    "looping_order": {
      "FAIL": 5,
      "details": [
        {
          "check_name": "looping_order",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759424",
          "event_type": "validation",
          "details": {
            "state": "3 + 4 = 7 (left: 7 10 12)",
            "thought": "3 + 4 = 7 (left: 7 10 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759450",
          "event_type": "validation",
          "details": {
            "state": "4 - 3 = 1 (left: 1 10 12)",
            "thought": "4 - 3 = 1 (left: 1 10 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759457",
          "event_type": "validation",
          "details": {
            "state": "10 - 3 = 7 (left: 4 7 12)",
            "thought": "10 - 3 = 7 (left: 4 7 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759463",
          "event_type": "validation",
          "details": {
            "state": "12 - 3 = 9 (left: 4 9 10)",
            "thought": "12 - 3 = 9 (left: 4 9 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759469",
          "event_type": "validation",
          "details": {
            "state": "3 * 4 = 12 (left: 10 12 12)",
            "thought": "3 * 4 = 12 (left: 10 12 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759512",
          "event_type": "validation",
          "details": {
            "state": "4 + 7 = 11 (left: 11 12)",
            "thought": "4 + 7 = 11 (left: 11 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759518",
          "event_type": "validation",
          "details": {
            "state": "12 - 4 = 8 (left: 7 8)",
            "thought": "12 - 4 = 8 (left: 7 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759525",
          "event_type": "validation",
          "details": {
            "state": "12 - 7 = 5 (left: 4 5)",
            "thought": "12 - 7 = 5 (left: 4 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759534",
          "event_type": "validation",
          "details": {
            "state": "7 - 4 = 3 (left: 3 12)",
            "thought": "7 - 4 = 3 (left: 3 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759541",
          "event_type": "validation",
          "details": {
            "state": "12 / 4 = 3 (left: 3 7)",
            "thought": "12 / 4 = 3 (left: 3 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759547",
          "event_type": "validation",
          "details": {
            "state": "7 * 4 = 28 (left: 12 28)",
            "thought": "7 * 4 = 28 (left: 12 28)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759553",
          "event_type": "validation",
          "details": {
            "state": "4 * 12 = 48 (left: 7 48)",
            "thought": "4 * 12 = 48 (left: 7 48)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_7",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759561",
          "event_type": "validation",
          "details": {
            "state": "7 + 12 = 19 (left: 4 19)",
            "thought": "7 + 12 = 19 (left: 4 19)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_8",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759567",
          "event_type": "validation",
          "details": {
            "state": "12 + 4 = 16 (left: 7 16)",
            "thought": "12 + 4 = 16 (left: 7 16)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_2_9",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759574",
          "event_type": "validation",
          "details": {
            "state": "7 * 12 = 84 (left: 4 84)",
            "thought": "7 * 12 = 84 (left: 4 84)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759635",
          "event_type": "validation",
          "details": {
            "state": "4 + 9 = 13 (left: 10 13)",
            "thought": "4 + 9 = 13 (left: 10 13)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759641",
          "event_type": "validation",
          "details": {
            "state": "9 - 4 = 5 (left: 5 10)",
            "thought": "9 - 4 = 5 (left: 5 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759647",
          "event_type": "validation",
          "details": {
            "state": "10 - 4 = 6 (left: 6 9)",
            "thought": "10 - 4 = 6 (left: 6 9)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759653",
          "event_type": "validation",
          "details": {
            "state": "10 - 9 = 1 (left: 1 4)",
            "thought": "10 - 9 = 1 (left: 1 4)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759659",
          "event_type": "validation",
          "details": {
            "state": "4 * 9 = 36 (left: 10 36)",
            "thought": "4 * 9 = 36 (left: 10 36)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759668",
          "event_type": "validation",
          "details": {
            "state": "10 / 4 = 2.5 (left: 2.5 9)",
            "thought": "10 / 4 = 2.5 (left: 2.5 9)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_3_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759678",
          "event_type": "validation",
          "details": {
            "state": "9 / 4 = 2.25 (left: 2.25 10)",
            "thought": "9 / 4 = 2.25 (left: 2.25 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759747",
          "event_type": "validation",
          "details": {
            "state": "10 + 12 = 22 (left: 12 22)",
            "thought": "10 + 12 = 22 (left: 12 22)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759757",
          "event_type": "validation",
          "details": {
            "state": "12 / 10 = 1.2 (left: 1.2 12)",
            "thought": "12 / 10 = 1.2 (left: 1.2 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759767",
          "event_type": "validation",
          "details": {
            "state": "12 - 10 = 2 (left: 2 12)",
            "thought": "12 - 10 = 2 (left: 2 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_3",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-30T12:45:19.759780",
          "event_type": "validation",
          "details": {
            "state": "12 - 3 = 9 (left: 4 9 10)",
            "expected_thought": "10 * 12 = 120 (left: 12 120)",
            "child_index": 3
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759790",
          "event_type": "validation",
          "details": {
            "state": "12 - 12 = 0 (left: 0 10)",
            "thought": "12 - 12 = 0 (left: 0 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_5",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-30T12:45:19.759800",
          "event_type": "validation",
          "details": {
            "state": "10 / 12 = 0.83 (left: 0.83 10)",
            "expected_thought": "10 / 12 = 0.83 (left: 0.83 12)",
            "child_index": 5
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_6",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759810",
          "event_type": "validation",
          "details": {
            "state": "12 + 12 = 24 (left: 10 24)",
            "thought": "12 + 12 = 24 (left: 10 24)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_7",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-30T12:45:19.759817",
          "event_type": "validation",
          "details": {
            "state": "10 - 12 = -2 (left: -2)",
            "expected_thought": "10 - 12 = -2 (left: -2 12)",
            "child_index": 7
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_2_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759847",
          "event_type": "validation",
          "details": {
            "state": "2 + 12 = 14 (left: 14)",
            "thought": "2 + 12 = 14 (left: 14)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_2_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759854",
          "event_type": "validation",
          "details": {
            "state": "12 - 2 = 10 (left: 10)",
            "thought": "12 - 2 = 10 (left: 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_2_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759860",
          "event_type": "validation",
          "details": {
            "state": "12 / 2 = 6 (left: 6)",
            "thought": "12 / 2 = 6 (left: 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_2_2_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759893",
          "event_type": "validation",
          "details": {
            "state": "10 + 6 = 16 (left: 8 14 16)",
            "thought": "10 + 6 = 16 (left: 8 14 16)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_2_2_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759900",
          "event_type": "validation",
          "details": {
            "state": "4 + 6 = 10 (left: 8 10 14)",
            "thought": "4 + 6 = 10 (left: 8 10 14)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_2_2_2",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-30T12:45:19.759908",
          "event_type": "validation",
          "details": {
            "state": "12 - 2 = 10 (left: 10)",
            "expected_thought": "16 + 6 = 22 (left: 8 8 22)",
            "child_index": 2
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_2_2_3",
          "result": "FAIL",
          "reason": "State doesn't match expected thought",
          "timestamp": "2025-05-30T12:45:19.759914",
          "event_type": "validation",
          "details": {
            "state": "6 * 8 = 48 (left: 10 48)",
            "expected_thought": "16 - 6 = 10 (left: 8 10 14)",
            "child_index": 3
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_3_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759975",
          "event_type": "validation",
          "details": {
            "state": "4 + 9 = 13 (left: 10 13)",
            "thought": "4 + 9 = 13 (left: 10 13)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_3_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759982",
          "event_type": "validation",
          "details": {
            "state": "9 - 4 = 5 (left: 5 10)",
            "thought": "9 - 4 = 5 (left: 5 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_3_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759988",
          "event_type": "validation",
          "details": {
            "state": "10 - 4 = 6 (left: 6 9)",
            "thought": "10 - 4 = 6 (left: 6 9)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_3_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.759993",
          "event_type": "validation",
          "details": {
            "state": "4 * 9 = 36 (left: 10 36)",
            "thought": "4 * 9 = 36 (left: 10 36)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_3_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.760000",
          "event_type": "validation",
          "details": {
            "state": "10 / 4 = 2.5 (left: 2.5 9)",
            "thought": "10 / 4 = 2.5 (left: 2.5 9)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_3_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.760007",
          "event_type": "validation",
          "details": {
            "state": "9 / 4 = 2.25 (left: 2.25 10)",
            "thought": "9 / 4 = 2.25 (left: 2.25 10)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_3_5_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.760046",
          "event_type": "validation",
          "details": {
            "state": "2.25 + 10 = 12.25 (left: 12.25)",
            "thought": "2.25 + 10 = 12.25 (left: 12.25)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_3_5_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.760053",
          "event_type": "validation",
          "details": {
            "state": "10 - 2.25 = 7.75 (left: 7.75)",
            "thought": "10 - 2.25 = 7.75 (left: 7.75)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_3_5_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.760060",
          "event_type": "validation",
          "details": {
            "state": "10 / 2.25 = 4.44 (approximately, left: 4.44)",
            "thought": "10 / 2.25 = 4.44 (approximately, left: 4.44)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_4_3_5_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T12:45:19.760067",
          "event_type": "validation",
          "details": {
            "state": "2.25 * 10 = 22.5 (left: 22.5)",
            "thought": "2.25 * 10 = 22.5 (left: 22.5)"
          }
        }
      ]
    },
    "valid_search_trace": {
      "success_trace": false
    }
  },
  "detailed_results": [
    {
      "check_name": "pruning",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-30T12:34:18.030167",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "node_id 0_0 matches thought position.",
      "timestamp": "2025-05-30T12:34:18.030261",
      "event_type": "validation",
      "details": {
        "node_id": "0_0",
        "state": "3 + 4 = 7 (left: 7 10 12)",
        "thoughts": [
          "3 + 4 = 7 (left: 7 10 12)",
          "4 - 3 = 1 (left: 1 10 12)",
          "10 - 3 = 7 (left: 4 7 12)",
          "12 - 3 = 9 (left: 4 9 10)",
          "3 * 4 = 12 (left: 10 12 12)",
          "10 / 3 = 3.33 (left: 3.33 4 12)",
          "12 / 3 = 4 (left: 4 4 10)",
          "12 - 4 = 8 (left: 3 8 10)",
          "10 - 4 = 6 (left: 3 6 12)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-30T12:34:29.018555",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "node_id 0_1 matches thought position.",
      "timestamp": "2025-05-30T12:34:29.018634",
      "event_type": "validation",
      "details": {
        "node_id": "0_1",
        "state": "4 - 3 = 1 (left: 1 10 12)",
        "thoughts": [
          "3 + 4 = 7 (left: 7 10 12)",
          "4 - 3 = 1 (left: 1 10 12)",
          "10 - 3 = 7 (left: 4 7 12)",
          "12 - 3 = 9 (left: 4 9 10)",
          "3 * 4 = 12 (left: 10 12 12)",
          "10 / 3 = 3.33 (left: 3.33 4 12)",
          "12 / 3 = 4 (left: 4 4 10)",
          "12 - 4 = 8 (left: 3 8 10)",
          "10 - 4 = 6 (left: 3 6 12)"
        ]
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T12:34:41.603324",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "State validation passed: Last thought '10 - 3 = 7 (left: 4 7 12)' found in parent's thoughts",
      "timestamp": "2025-05-30T12:34:41.603380",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '10 - 3 = 7 (left: 4 7 12)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "3 + 4 = 7 (left: 7 10 12)",
          "4 - 3 = 1 (left: 1 10 12)",
          "10 - 3 = 7 (left: 4 7 12)",
          "12 - 3 = 9 (left: 4 9 10)",
          "3 * 4 = 12 (left: 10 12 12)",
          "10 / 3 = 3.33 (left: 3.33 4 12)",
          "12 / 3 = 4 (left: 4 4 10)",
          "12 - 4 = 8 (left: 3 8 10)",
          "10 - 4 = 6 (left: 3 6 12)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "node_id 0_2 matches thought position.",
      "timestamp": "2025-05-30T12:34:41.603423",
      "event_type": "validation",
      "details": {
        "node_id": "0_2",
        "state": "10 - 3 = 7 (left: 4 7 12)",
        "thoughts": [
          "3 + 4 = 7 (left: 7 10 12)",
          "4 - 3 = 1 (left: 1 10 12)",
          "10 - 3 = 7 (left: 4 7 12)",
          "12 - 3 = 9 (left: 4 9 10)",
          "3 * 4 = 12 (left: 10 12 12)",
          "10 / 3 = 3.33 (left: 3.33 4 12)",
          "12 / 3 = 4 (left: 4 4 10)",
          "12 - 4 = 8 (left: 3 8 10)",
          "10 - 4 = 6 (left: 3 6 12)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T12:34:51.172323",
      "event_type": "validation",
      "details": {
        "expected_state": "10 - 3 = 7 (left: 4 7 12)",
        "actual_state": "10 - 3 = 7 (left: 4 7 12)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:35:07.943809",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_0",
      "result": "PASS",
      "reason": "node_id 0_2_0 matches thought position.",
      "timestamp": "2025-05-30T12:35:07.943887",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_0",
        "state": "4 + 7 = 11 (left: 11 12)",
        "thoughts": [
          "4 + 7 = 11 (left: 11 12)",
          "12 - 4 = 8 (left: 7 8)",
          "12 - 7 = 5 (left: 4 5)",
          "7 - 4 = 3 (left: 3 12)",
          "12 / 4 = 3 (left: 3 7)",
          "7 * 4 = 28 (left: 12 28) ",
          "4 * 12 = 48 (left: 7 48) ",
          "7 + 12 = 19 (left: 4 19) ",
          "12 + 4 = 16 (left: 7 16) ",
          "7 * 12 = 84 (left: 4 84)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:35:19.023971",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_1",
      "result": "PASS",
      "reason": "node_id 0_2_1 matches thought position.",
      "timestamp": "2025-05-30T12:35:19.024232",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_1",
        "state": "12 - 4 = 8 (left: 7 8)",
        "thoughts": [
          "4 + 7 = 11 (left: 11 12)",
          "12 - 4 = 8 (left: 7 8)",
          "12 - 7 = 5 (left: 4 5)",
          "7 - 4 = 3 (left: 3 12)",
          "12 / 4 = 3 (left: 3 7)",
          "7 * 4 = 28 (left: 12 28) ",
          "4 * 12 = 48 (left: 7 48) ",
          "7 + 12 = 19 (left: 4 19) ",
          "12 + 4 = 16 (left: 7 16) ",
          "7 * 12 = 84 (left: 4 84)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:35:28.393030",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_2",
      "result": "PASS",
      "reason": "node_id 0_2_2 matches thought position.",
      "timestamp": "2025-05-30T12:35:28.393121",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_2",
        "state": "12 - 7 = 5 (left: 4 5)",
        "thoughts": [
          "4 + 7 = 11 (left: 11 12)",
          "12 - 4 = 8 (left: 7 8)",
          "12 - 7 = 5 (left: 4 5)",
          "7 - 4 = 3 (left: 3 12)",
          "12 / 4 = 3 (left: 3 7)",
          "7 * 4 = 28 (left: 12 28) ",
          "4 * 12 = 48 (left: 7 48) ",
          "7 + 12 = 19 (left: 4 19) ",
          "12 + 4 = 16 (left: 7 16) ",
          "7 * 12 = 84 (left: 4 84)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:35:38.145177",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_3",
      "result": "PASS",
      "reason": "node_id 0_2_3 matches thought position.",
      "timestamp": "2025-05-30T12:35:38.145254",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_3",
        "state": "7 - 4 = 3 (left: 3 12)",
        "thoughts": [
          "4 + 7 = 11 (left: 11 12)",
          "12 - 4 = 8 (left: 7 8)",
          "12 - 7 = 5 (left: 4 5)",
          "7 - 4 = 3 (left: 3 12)",
          "12 / 4 = 3 (left: 3 7)",
          "7 * 4 = 28 (left: 12 28) ",
          "4 * 12 = 48 (left: 7 48) ",
          "7 + 12 = 19 (left: 4 19) ",
          "12 + 4 = 16 (left: 7 16) ",
          "7 * 12 = 84 (left: 4 84)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:35:47.275877",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_4",
      "result": "PASS",
      "reason": "node_id 0_2_4 matches thought position.",
      "timestamp": "2025-05-30T12:35:47.275980",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_4",
        "state": "12 / 4 = 3 (left: 3 7)",
        "thoughts": [
          "4 + 7 = 11 (left: 11 12)",
          "12 - 4 = 8 (left: 7 8)",
          "12 - 7 = 5 (left: 4 5)",
          "7 - 4 = 3 (left: 3 12)",
          "12 / 4 = 3 (left: 3 7)",
          "7 * 4 = 28 (left: 12 28) ",
          "4 * 12 = 48 (left: 7 48) ",
          "7 + 12 = 19 (left: 4 19) ",
          "12 + 4 = 16 (left: 7 16) ",
          "7 * 12 = 84 (left: 4 84)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:35:59.920137",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_5",
      "result": "PASS",
      "reason": "node_id 0_2_5 matches thought position.",
      "timestamp": "2025-05-30T12:35:59.920237",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_5",
        "state": "7 * 4 = 28 (left: 12 28)",
        "thoughts": [
          "4 + 7 = 11 (left: 11 12)",
          "12 - 4 = 8 (left: 7 8)",
          "12 - 7 = 5 (left: 4 5)",
          "7 - 4 = 3 (left: 3 12)",
          "12 / 4 = 3 (left: 3 7)",
          "7 * 4 = 28 (left: 12 28) ",
          "4 * 12 = 48 (left: 7 48) ",
          "7 + 12 = 19 (left: 4 19) ",
          "12 + 4 = 16 (left: 7 16) ",
          "7 * 12 = 84 (left: 4 84)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:36:13.068193",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_6",
      "result": "PASS",
      "reason": "node_id 0_2_6 matches thought position.",
      "timestamp": "2025-05-30T12:36:13.068273",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_6",
        "state": "4 * 12 = 48 (left: 7 48)",
        "thoughts": [
          "4 + 7 = 11 (left: 11 12)",
          "12 - 4 = 8 (left: 7 8)",
          "12 - 7 = 5 (left: 4 5)",
          "7 - 4 = 3 (left: 3 12)",
          "12 / 4 = 3 (left: 3 7)",
          "7 * 4 = 28 (left: 12 28) ",
          "4 * 12 = 48 (left: 7 48) ",
          "7 + 12 = 19 (left: 4 19) ",
          "12 + 4 = 16 (left: 7 16) ",
          "7 * 12 = 84 (left: 4 84)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_7",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:36:28.923311",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_7",
      "result": "PASS",
      "reason": "node_id 0_2_7 matches thought position.",
      "timestamp": "2025-05-30T12:36:28.923399",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_7",
        "state": "7 + 12 = 19 (left: 4 19)",
        "thoughts": [
          "4 + 7 = 11 (left: 11 12)",
          "12 - 4 = 8 (left: 7 8)",
          "12 - 7 = 5 (left: 4 5)",
          "7 - 4 = 3 (left: 3 12)",
          "12 / 4 = 3 (left: 3 7)",
          "7 * 4 = 28 (left: 12 28) ",
          "4 * 12 = 48 (left: 7 48) ",
          "7 + 12 = 19 (left: 4 19) ",
          "12 + 4 = 16 (left: 7 16) ",
          "7 * 12 = 84 (left: 4 84)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_8",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:36:38.730317",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_8",
      "result": "PASS",
      "reason": "node_id 0_2_8 matches thought position.",
      "timestamp": "2025-05-30T12:36:38.730403",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_8",
        "state": "12 + 4 = 16 (left: 7 16)",
        "thoughts": [
          "4 + 7 = 11 (left: 11 12)",
          "12 - 4 = 8 (left: 7 8)",
          "12 - 7 = 5 (left: 4 5)",
          "7 - 4 = 3 (left: 3 12)",
          "12 / 4 = 3 (left: 3 7)",
          "7 * 4 = 28 (left: 12 28) ",
          "4 * 12 = 48 (left: 7 48) ",
          "7 + 12 = 19 (left: 4 19) ",
          "12 + 4 = 16 (left: 7 16) ",
          "7 * 12 = 84 (left: 4 84)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_2_9",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:36:49.305588",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_2_9",
      "result": "PASS",
      "reason": "node_id 0_2_9 matches thought position.",
      "timestamp": "2025-05-30T12:36:49.305674",
      "event_type": "validation",
      "details": {
        "node_id": "0_2_9",
        "state": "7 * 12 = 84 (left: 4 84)",
        "thoughts": [
          "4 + 7 = 11 (left: 11 12)",
          "12 - 4 = 8 (left: 7 8)",
          "12 - 7 = 5 (left: 4 5)",
          "7 - 4 = 3 (left: 3 12)",
          "12 / 4 = 3 (left: 3 7)",
          "7 * 4 = 28 (left: 12 28) ",
          "4 * 12 = 48 (left: 7 48) ",
          "7 + 12 = 19 (left: 4 19) ",
          "12 + 4 = 16 (left: 7 16) ",
          "7 * 12 = 84 (left: 4 84)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_2; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-30T12:36:52.477574",
      "event_type": "validation",
      "details": {
        "popped_node": "0_2",
        "expected_popped": "0_2",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_2",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "All 10 children explored - valid backtrack",
      "timestamp": "2025-05-30T12:36:52.477609",
      "event_type": "validation",
      "details": {
        "total_thoughts": 10,
        "evaluated_children": 10
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T12:37:04.966915",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "State validation passed: Last thought '12 - 3 = 9 (left: 4 9 10)' found in parent's thoughts",
      "timestamp": "2025-05-30T12:37:04.966992",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '12 - 3 = 9 (left: 4 9 10)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "3 + 4 = 7 (left: 7 10 12)",
          "4 - 3 = 1 (left: 1 10 12)",
          "10 - 3 = 7 (left: 4 7 12)",
          "12 - 3 = 9 (left: 4 9 10)",
          "3 * 4 = 12 (left: 10 12 12)",
          "10 / 3 = 3.33 (left: 3.33 4 12)",
          "12 / 3 = 4 (left: 4 4 10)",
          "12 - 4 = 8 (left: 3 8 10)",
          "10 - 4 = 6 (left: 3 6 12)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_3 follows 0_2",
      "timestamp": "2025-05-30T12:37:04.967050",
      "event_type": "validation",
      "details": {
        "popped_node": "0_2",
        "current_node": "0_3",
        "expected_index": 3,
        "actual_index": 3
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "node_id 0_3 matches thought position.",
      "timestamp": "2025-05-30T12:37:04.967105",
      "event_type": "validation",
      "details": {
        "node_id": "0_3",
        "state": "12 - 3 = 9 (left: 4 9 10)",
        "thoughts": [
          "3 + 4 = 7 (left: 7 10 12)",
          "4 - 3 = 1 (left: 1 10 12)",
          "10 - 3 = 7 (left: 4 7 12)",
          "12 - 3 = 9 (left: 4 9 10)",
          "3 * 4 = 12 (left: 10 12 12)",
          "10 / 3 = 3.33 (left: 3.33 4 12)",
          "12 / 3 = 4 (left: 4 4 10)",
          "12 - 4 = 8 (left: 3 8 10)",
          "10 - 4 = 6 (left: 3 6 12)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T12:37:13.833871",
      "event_type": "validation",
      "details": {
        "expected_state": "12 - 3 = 9 (left: 4 9 10)",
        "actual_state": "12 - 3 = 9 (left: 4 9 10)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:37:28.661754",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_0",
      "result": "PASS",
      "reason": "node_id 0_3_0 matches thought position.",
      "timestamp": "2025-05-30T12:37:28.661863",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_0",
        "state": "4 + 9 = 13 (left: 10 13)",
        "thoughts": [
          "4 + 9 = 13 (left: 10 13)",
          "9 - 4 = 5 (left: 5 10)",
          "10 - 4 = 6 (left: 6 9)",
          "10 - 9 = 1 (left: 1 4)",
          "4 * 9 = 36 (left: 10 36)",
          "10 / 4 = 2.5 (left: 2.5 9)",
          "9 / 4 = 2.25 (left: 2.25 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:37:42.274872",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_1",
      "result": "PASS",
      "reason": "node_id 0_3_1 matches thought position.",
      "timestamp": "2025-05-30T12:37:42.274969",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_1",
        "state": "9 - 4 = 5 (left: 5 10)",
        "thoughts": [
          "4 + 9 = 13 (left: 10 13)",
          "9 - 4 = 5 (left: 5 10)",
          "10 - 4 = 6 (left: 6 9)",
          "10 - 9 = 1 (left: 1 4)",
          "4 * 9 = 36 (left: 10 36)",
          "10 / 4 = 2.5 (left: 2.5 9)",
          "9 / 4 = 2.25 (left: 2.25 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:37:55.459444",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_2",
      "result": "PASS",
      "reason": "node_id 0_3_2 matches thought position.",
      "timestamp": "2025-05-30T12:37:55.459539",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_2",
        "state": "10 - 4 = 6 (left: 6 9)",
        "thoughts": [
          "4 + 9 = 13 (left: 10 13)",
          "9 - 4 = 5 (left: 5 10)",
          "10 - 4 = 6 (left: 6 9)",
          "10 - 9 = 1 (left: 1 4)",
          "4 * 9 = 36 (left: 10 36)",
          "10 / 4 = 2.5 (left: 2.5 9)",
          "9 / 4 = 2.25 (left: 2.25 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:38:08.367884",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_3",
      "result": "PASS",
      "reason": "node_id 0_3_3 matches thought position.",
      "timestamp": "2025-05-30T12:38:08.367976",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_3",
        "state": "10 - 9 = 1 (left: 1 4)",
        "thoughts": [
          "4 + 9 = 13 (left: 10 13)",
          "9 - 4 = 5 (left: 5 10)",
          "10 - 4 = 6 (left: 6 9)",
          "10 - 9 = 1 (left: 1 4)",
          "4 * 9 = 36 (left: 10 36)",
          "10 / 4 = 2.5 (left: 2.5 9)",
          "9 / 4 = 2.25 (left: 2.25 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:38:20.150053",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_4",
      "result": "PASS",
      "reason": "node_id 0_3_4 matches thought position.",
      "timestamp": "2025-05-30T12:38:20.150135",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_4",
        "state": "4 * 9 = 36 (left: 10 36)",
        "thoughts": [
          "4 + 9 = 13 (left: 10 13)",
          "9 - 4 = 5 (left: 5 10)",
          "10 - 4 = 6 (left: 6 9)",
          "10 - 9 = 1 (left: 1 4)",
          "4 * 9 = 36 (left: 10 36)",
          "10 / 4 = 2.5 (left: 2.5 9)",
          "9 / 4 = 2.25 (left: 2.25 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_5",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-30T12:38:33.176069",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_5",
      "result": "PASS",
      "reason": "node_id 0_3_5 matches thought position.",
      "timestamp": "2025-05-30T12:38:33.176161",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_5",
        "state": "10 / 4 = 2.5 (left: 2.5 9)",
        "thoughts": [
          "4 + 9 = 13 (left: 10 13)",
          "9 - 4 = 5 (left: 5 10)",
          "10 - 4 = 6 (left: 6 9)",
          "10 - 9 = 1 (left: 1 4)",
          "4 * 9 = 36 (left: 10 36)",
          "10 / 4 = 2.5 (left: 2.5 9)",
          "9 / 4 = 2.25 (left: 2.25 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_3_6",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-30T12:38:46.132532",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_3_6",
      "result": "PASS",
      "reason": "node_id 0_3_6 matches thought position.",
      "timestamp": "2025-05-30T12:38:46.132618",
      "event_type": "validation",
      "details": {
        "node_id": "0_3_6",
        "state": "9 / 4 = 2.25 (left: 2.25 10)",
        "thoughts": [
          "4 + 9 = 13 (left: 10 13)",
          "9 - 4 = 5 (left: 5 10)",
          "10 - 4 = 6 (left: 6 9)",
          "10 - 9 = 1 (left: 1 4)",
          "4 * 9 = 36 (left: 10 36)",
          "10 / 4 = 2.5 (left: 2.5 9)",
          "9 / 4 = 2.25 (left: 2.25 10)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_3; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-30T12:38:48.300706",
      "event_type": "validation",
      "details": {
        "popped_node": "0_3",
        "expected_popped": "0_3",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_3",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "All 7 children explored - valid backtrack",
      "timestamp": "2025-05-30T12:38:48.300743",
      "event_type": "validation",
      "details": {
        "total_thoughts": 7,
        "evaluated_children": 7
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "Value 60.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T12:38:55.960415",
      "event_type": "validation",
      "details": {
        "value": 60.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "State validation passed: Last thought '3 * 4 = 12 (left: 10 12 12)' found in parent's thoughts",
      "timestamp": "2025-05-30T12:38:55.960490",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '3 * 4 = 12 (left: 10 12 12)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "3 + 4 = 7 (left: 7 10 12)",
          "4 - 3 = 1 (left: 1 10 12)",
          "10 - 3 = 7 (left: 4 7 12)",
          "12 - 3 = 9 (left: 4 9 10)",
          "3 * 4 = 12 (left: 10 12 12)",
          "10 / 3 = 3.33 (left: 3.33 4 12)",
          "12 / 3 = 4 (left: 4 4 10)",
          "12 - 4 = 8 (left: 3 8 10)",
          "10 - 4 = 6 (left: 3 6 12)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_4 follows 0_3",
      "timestamp": "2025-05-30T12:38:55.960535",
      "event_type": "validation",
      "details": {
        "popped_node": "0_3",
        "current_node": "0_4",
        "expected_index": 4,
        "actual_index": 4
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "node_id 0_4 matches thought position.",
      "timestamp": "2025-05-30T12:38:55.960577",
      "event_type": "validation",
      "details": {
        "node_id": "0_4",
        "state": "3 * 4 = 12 (left: 10 12 12)",
        "thoughts": [
          "3 + 4 = 7 (left: 7 10 12)",
          "4 - 3 = 1 (left: 1 10 12)",
          "10 - 3 = 7 (left: 4 7 12)",
          "12 - 3 = 9 (left: 4 9 10)",
          "3 * 4 = 12 (left: 10 12 12)",
          "10 / 3 = 3.33 (left: 3.33 4 12)",
          "12 / 3 = 4 (left: 4 4 10)",
          "12 - 4 = 8 (left: 3 8 10)",
          "10 - 4 = 6 (left: 3 6 12)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T12:39:05.009721",
      "event_type": "validation",
      "details": {
        "expected_state": "3 * 4 = 12 (left: 10 12 12)",
        "actual_state": "3 * 4 = 12 (left: 10 12 12)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:39:17.449908",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_0",
      "result": "PASS",
      "reason": "node_id 0_4_0 matches thought position.",
      "timestamp": "2025-05-30T12:39:17.450002",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_0",
        "state": "10 + 12 = 22 (left: 12 22)",
        "thoughts": [
          "10 + 12 = 22 (left: 12 22)",
          "12 / 10 = 1.2 (left: 1.2 12)",
          "12 - 10 = 2 (left: 2 12)",
          "10 * 12 = 120 (left: 12 120)",
          "12 - 12 = 0 (left: 0 10)",
          "10 / 12 = 0.83 (left: 0.83 12)",
          "12 + 12 = 24 (left: 10 24)",
          "10 - 12 = -2 (left: -2 12)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:39:29.076570",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_1",
      "result": "PASS",
      "reason": "node_id 0_4_1 matches thought position.",
      "timestamp": "2025-05-30T12:39:29.076800",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_1",
        "state": "12 / 10 = 1.2 (left: 1.2 12)",
        "thoughts": [
          "10 + 12 = 22 (left: 12 22)",
          "12 / 10 = 1.2 (left: 1.2 12)",
          "12 - 10 = 2 (left: 2 12)",
          "10 * 12 = 120 (left: 12 120)",
          "12 - 12 = 0 (left: 0 10)",
          "10 / 12 = 0.83 (left: 0.83 12)",
          "12 + 12 = 24 (left: 10 24)",
          "10 - 12 = -2 (left: -2 12)"
        ]
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_4_2",
      "result": "PASS",
      "reason": "Value 60.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T12:39:38.297882",
      "event_type": "validation",
      "details": {
        "value": 60.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_4_2",
      "result": "PASS",
      "reason": "State validation passed: Last thought '12 - 10 = 2 (left: 2 12)' found in parent's thoughts; Previous thought '3 * 4 = 12 (left: 10 12 12)' found in parent's state",
      "timestamp": "2025-05-30T12:39:38.297987",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '12 - 10 = 2 (left: 2 12)' found in parent's thoughts",
          "Previous thought '3 * 4 = 12 (left: 10 12 12)' found in parent's state"
        ],
        "parent_thoughts": [
          "10 + 12 = 22 (left: 12 22)",
          "12 / 10 = 1.2 (left: 1.2 12)",
          "12 - 10 = 2 (left: 2 12)",
          "10 * 12 = 120 (left: 12 120)",
          "12 - 12 = 0 (left: 0 10)",
          "10 / 12 = 0.83 (left: 0.83 12)",
          "12 + 12 = 24 (left: 10 24)",
          "10 - 12 = -2 (left: -2 12)"
        ],
        "parent_state": [
          "3 * 4 = 12 (left: 10 12 12)"
        ]
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_2",
      "result": "PASS",
      "reason": "node_id 0_4_2 matches thought position.",
      "timestamp": "2025-05-30T12:39:38.298147",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_2",
        "state": "12 - 10 = 2 (left: 2 12)",
        "thoughts": [
          "10 + 12 = 22 (left: 12 22)",
          "12 / 10 = 1.2 (left: 1.2 12)",
          "12 - 10 = 2 (left: 2 12)",
          "10 * 12 = 120 (left: 12 120)",
          "12 - 12 = 0 (left: 0 10)",
          "10 / 12 = 0.83 (left: 0.83 12)",
          "12 + 12 = 24 (left: 10 24)",
          "10 - 12 = -2 (left: -2 12)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_4_2",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T12:39:46.555087",
      "event_type": "validation",
      "details": {
        "expected_state": "3 * 4 = 12 (left: 10 12 12)\n12 - 10 = 2 (left: 2 12)",
        "actual_state": "3 * 4 = 12 (left: 10 12 12)\n12 - 10 = 2 (left: 2 12)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_2_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:39:56.415211",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_2_0",
      "result": "PASS",
      "reason": "node_id 0_4_2_0 matches thought position.",
      "timestamp": "2025-05-30T12:39:56.415296",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_2_0",
        "state": "2 + 12 = 14 (left: 14)",
        "thoughts": [
          "2 + 12 = 14 (left: 14)",
          "12 - 2 = 10 (left: 10)",
          "12 / 2 = 6 (left: 6)",
          "2 * 12 = 24 (left: 24)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_2_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:40:05.666680",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_2_1",
      "result": "PASS",
      "reason": "node_id 0_4_2_1 matches thought position.",
      "timestamp": "2025-05-30T12:40:05.666755",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_2_1",
        "state": "12 - 2 = 10 (left: 10)",
        "thoughts": [
          "2 + 12 = 14 (left: 14)",
          "12 - 2 = 10 (left: 10)",
          "12 / 2 = 6 (left: 6)",
          "2 * 12 = 24 (left: 24)"
        ]
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_4_2_2",
      "result": "PASS",
      "reason": "Value 40.001 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T12:40:18.350795",
      "event_type": "validation",
      "details": {
        "value": 40.001,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_4_2_2",
      "result": "PASS",
      "reason": "State validation passed: Last thought '12 / 2 = 6 (left: 6)' found in parent's thoughts; Previous thought '3 * 4 = 12 (left: 10 12 12)' found in parent's state; Previous thought '12 - 10 = 2 (left: 2 12)' found in parent's state",
      "timestamp": "2025-05-30T12:40:18.350861",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '12 / 2 = 6 (left: 6)' found in parent's thoughts",
          "Previous thought '3 * 4 = 12 (left: 10 12 12)' found in parent's state",
          "Previous thought '12 - 10 = 2 (left: 2 12)' found in parent's state"
        ],
        "parent_thoughts": [
          "2 + 12 = 14 (left: 14)",
          "12 - 2 = 10 (left: 10)",
          "12 / 2 = 6 (left: 6)",
          "2 * 12 = 24 (left: 24)"
        ],
        "parent_state": [
          "3 * 4 = 12 (left: 10 12 12)",
          "12 - 10 = 2 (left: 2 12)"
        ]
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_2_2",
      "result": "PASS",
      "reason": "node_id 0_4_2_2 matches thought position.",
      "timestamp": "2025-05-30T12:40:18.350915",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_2_2",
        "state": "12 / 2 = 6 (left: 6)",
        "thoughts": [
          "2 + 12 = 14 (left: 14)",
          "12 - 2 = 10 (left: 10)",
          "12 / 2 = 6 (left: 6)",
          "2 * 12 = 24 (left: 24)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_4_2_2",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T12:40:35.097279",
      "event_type": "validation",
      "details": {
        "expected_state": "3 * 4 = 12 (left: 10 12 12)\n12 - 10 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
        "actual_state": "3 * 4 = 12 (left: 10 12 12)\n12 - 10 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_2_2_0",
      "result": "PASS",
      "reason": "Value 0 meets threshold 3.0",
      "timestamp": "2025-05-30T12:40:56.030258",
      "event_type": "validation",
      "details": {
        "value": 0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_2_2_0",
      "result": "PASS",
      "reason": "node_id 0_4_2_2_0 matches thought position.",
      "timestamp": "2025-05-30T12:40:56.030349",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_2_2_0",
        "state": "10 + 6 = 16 (left: 8 14 16)",
        "thoughts": [
          "10 + 6 = 16 (left: 8 14 16)",
          "4 + 6 = 10 (left: 8 10 14)",
          "16 + 6 = 22 (left: 8 8 22)",
          "16 - 6 = 10 (left: 8 10 14)",
          "6 * 8 = 48 (left: 10 14 48)",
          "6 - 2 = 4 (left: 4 8 14)",
          "8 + 6 = 14 (left: 8 10 14)",
          "8 - 6 = 2 (left: 2 10 14)",
          "14 + 6 = 20 (left: 8 8 20)",
          "6 * 2 = 12 (left: 8 12 14)",
          "12 + 6 = 18 (left: 8 8 18)",
          "12 - 6 = 6 (left: 6 8 14)",
          "7 + 6 = 13 (left: 8 8 13)",
          "7 - 6 = 1 (left: 1 8 14)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_2_2_1",
      "result": "PASS",
      "reason": "Value 0 meets threshold 3.0",
      "timestamp": "2025-05-30T12:41:10.371484",
      "event_type": "validation",
      "details": {
        "value": 0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_2_2_1",
      "result": "PASS",
      "reason": "node_id 0_4_2_2_1 matches thought position.",
      "timestamp": "2025-05-30T12:41:10.371567",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_2_2_1",
        "state": "4 + 6 = 10 (left: 8 10 14)",
        "thoughts": [
          "10 + 6 = 16 (left: 8 14 16)",
          "4 + 6 = 10 (left: 8 10 14)",
          "16 + 6 = 22 (left: 8 8 22)",
          "16 - 6 = 10 (left: 8 10 14)",
          "6 * 8 = 48 (left: 10 14 48)",
          "6 - 2 = 4 (left: 4 8 14)",
          "8 + 6 = 14 (left: 8 10 14)",
          "8 - 6 = 2 (left: 2 10 14)",
          "14 + 6 = 20 (left: 8 8 20)",
          "6 * 2 = 12 (left: 8 12 14)",
          "12 + 6 = 18 (left: 8 8 18)",
          "12 - 6 = 6 (left: 6 8 14)",
          "7 + 6 = 13 (left: 8 8 13)",
          "7 - 6 = 1 (left: 1 8 14)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_2_2_2",
      "result": "PASS",
      "reason": "Value 0 meets threshold 3.0",
      "timestamp": "2025-05-30T12:41:18.807422",
      "event_type": "validation",
      "details": {
        "value": 0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_2_2_2",
      "result": "FAIL",
      "reason": "node_id 0_4_2_2_2 does not match thought position.",
      "timestamp": "2025-05-30T12:41:18.807501",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_2_2_2",
        "state": "12 - 2 = 10 (left: 10)",
        "thoughts": [
          "10 + 6 = 16 (left: 8 14 16)",
          "4 + 6 = 10 (left: 8 10 14)",
          "16 + 6 = 22 (left: 8 8 22)",
          "16 - 6 = 10 (left: 8 10 14)",
          "6 * 8 = 48 (left: 10 14 48)",
          "6 - 2 = 4 (left: 4 8 14)",
          "8 + 6 = 14 (left: 8 10 14)",
          "8 - 6 = 2 (left: 2 10 14)",
          "14 + 6 = 20 (left: 8 8 20)",
          "6 * 2 = 12 (left: 8 12 14)",
          "12 + 6 = 18 (left: 8 8 18)",
          "12 - 6 = 6 (left: 6 8 14)",
          "7 + 6 = 13 (left: 8 8 13)",
          "7 - 6 = 1 (left: 1 8 14)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_2_2_3",
      "result": "PASS",
      "reason": "Value 0 meets threshold 3.0",
      "timestamp": "2025-05-30T12:41:33.043437",
      "event_type": "validation",
      "details": {
        "value": 0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_2_2_3",
      "result": "FAIL",
      "reason": "node_id 0_4_2_2_3 does not match thought position.",
      "timestamp": "2025-05-30T12:41:33.043528",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_2_2_3",
        "state": "6 * 8 = 48 (left: 10 48)",
        "thoughts": [
          "10 + 6 = 16 (left: 8 14 16)",
          "4 + 6 = 10 (left: 8 10 14)",
          "16 + 6 = 22 (left: 8 8 22)",
          "16 - 6 = 10 (left: 8 10 14)",
          "6 * 8 = 48 (left: 10 14 48)",
          "6 - 2 = 4 (left: 4 8 14)",
          "8 + 6 = 14 (left: 8 10 14)",
          "8 - 6 = 2 (left: 2 10 14)",
          "14 + 6 = 20 (left: 8 8 20)",
          "6 * 2 = 12 (left: 8 12 14)",
          "12 + 6 = 18 (left: 8 8 18)",
          "12 - 6 = 6 (left: 6 8 14)",
          "7 + 6 = 13 (left: 8 8 13)",
          "7 - 6 = 1 (left: 1 8 14)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_4_2_2",
      "result": "FAIL",
      "reason": "Complete backtracking validation failed: Expected to backtrack to '0_4_2', but got '0_4'",
      "timestamp": "2025-05-30T12:41:36.137542",
      "event_type": "validation",
      "details": {
        "popped_node": "0_4_2_2",
        "expected_popped": "0_4_2_2",
        "backtrack_to": "0_4",
        "expected_parent": "0_4_2",
        "validation_errors": [
          "Expected to backtrack to '0_4_2', but got '0_4'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_4_2_2",
      "result": "FAIL",
      "reason": "Only 4 of 14 children explored",
      "timestamp": "2025-05-30T12:41:36.137581",
      "event_type": "validation",
      "details": {
        "total_thoughts": 14,
        "evaluated_children": 4
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_4_3",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T12:41:48.962334",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_4_3",
      "result": "FAIL",
      "reason": "State validation failed: Last thought '12 - 3 = 9 (left: 4 9 10)' not found in parent's thoughts",
      "timestamp": "2025-05-30T12:41:48.962398",
      "event_type": "validation",
      "details": {
        "validation_errors": [
          "Last thought '12 - 3 = 9 (left: 4 9 10)' not found in parent's thoughts"
        ],
        "parent_thoughts": [
          "10 + 12 = 22 (left: 12 22)",
          "12 / 10 = 1.2 (left: 1.2 12)",
          "12 - 10 = 2 (left: 2 12)",
          "10 * 12 = 120 (left: 12 120)",
          "12 - 12 = 0 (left: 0 10)",
          "10 / 12 = 0.83 (left: 0.83 12)",
          "12 + 12 = 24 (left: 10 24)",
          "10 - 12 = -2 (left: -2 12)"
        ],
        "parent_state": [
          "3 * 4 = 12 (left: 10 12 12)"
        ],
        "current_state": [
          "3 * 4 = 12 (left: 10 12 12)",
          "12 - 3 = 9 (left: 4 9 10)"
        ]
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_3",
      "result": "FAIL",
      "reason": "node_id 0_4_3 does not match thought position.",
      "timestamp": "2025-05-30T12:41:48.962717",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_3",
        "state": "12 - 3 = 9 (left: 4 9 10)",
        "thoughts": [
          "10 + 12 = 22 (left: 12 22)",
          "12 / 10 = 1.2 (left: 1.2 12)",
          "12 - 10 = 2 (left: 2 12)",
          "10 * 12 = 120 (left: 12 120)",
          "12 - 12 = 0 (left: 0 10)",
          "10 / 12 = 0.83 (left: 0.83 12)",
          "12 + 12 = 24 (left: 10 24)",
          "10 - 12 = -2 (left: -2 12)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_4_3",
      "result": "FAIL",
      "reason": "State mismatch: expected vs actual state don't match",
      "timestamp": "2025-05-30T12:41:58.311901",
      "event_type": "validation",
      "details": {
        "expected_state": "3 * 4 = 12 (left: 10 12 12)\n12 - 3 = 9 (left: 4 9 10)",
        "actual_state": "12 - 3 = 9 (left: 4 9 10)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_3_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:42:16.423472",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_3_0",
      "result": "PASS",
      "reason": "node_id 0_4_3_0 matches thought position.",
      "timestamp": "2025-05-30T12:42:16.423539",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_3_0",
        "state": "4 + 9 = 13 (left: 10 13)",
        "thoughts": [
          "4 + 9 = 13 (left: 10 13)",
          "9 - 4 = 5 (left: 5 10)",
          "10 - 4 = 6 (left: 6 9)",
          "4 * 9 = 36 (left: 10 36)",
          "10 / 4 = 2.5 (left: 2.5 9)",
          "9 / 4 = 2.25 (left: 2.25 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_3_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:42:31.560983",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_3_1",
      "result": "PASS",
      "reason": "node_id 0_4_3_1 matches thought position.",
      "timestamp": "2025-05-30T12:42:31.561069",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_3_1",
        "state": "9 - 4 = 5 (left: 5 10)",
        "thoughts": [
          "4 + 9 = 13 (left: 10 13)",
          "9 - 4 = 5 (left: 5 10)",
          "10 - 4 = 6 (left: 6 9)",
          "4 * 9 = 36 (left: 10 36)",
          "10 / 4 = 2.5 (left: 2.5 9)",
          "9 / 4 = 2.25 (left: 2.25 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_3_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:42:45.429703",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_3_2",
      "result": "PASS",
      "reason": "node_id 0_4_3_2 matches thought position.",
      "timestamp": "2025-05-30T12:42:45.429781",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_3_2",
        "state": "10 - 4 = 6 (left: 6 9)",
        "thoughts": [
          "4 + 9 = 13 (left: 10 13)",
          "9 - 4 = 5 (left: 5 10)",
          "10 - 4 = 6 (left: 6 9)",
          "4 * 9 = 36 (left: 10 36)",
          "10 / 4 = 2.5 (left: 2.5 9)",
          "9 / 4 = 2.25 (left: 2.25 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_3_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:42:58.633820",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_3_3",
      "result": "PASS",
      "reason": "node_id 0_4_3_3 matches thought position.",
      "timestamp": "2025-05-30T12:42:58.633910",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_3_3",
        "state": "4 * 9 = 36 (left: 10 36)",
        "thoughts": [
          "4 + 9 = 13 (left: 10 13)",
          "9 - 4 = 5 (left: 5 10)",
          "10 - 4 = 6 (left: 6 9)",
          "4 * 9 = 36 (left: 10 36)",
          "10 / 4 = 2.5 (left: 2.5 9)",
          "9 / 4 = 2.25 (left: 2.25 10)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_3_4",
      "result": "PASS",
      "reason": "Value 1.002 meets threshold 3.0",
      "timestamp": "2025-05-30T12:43:09.875816",
      "event_type": "validation",
      "details": {
        "value": 1.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_3_4",
      "result": "PASS",
      "reason": "node_id 0_4_3_4 matches thought position.",
      "timestamp": "2025-05-30T12:43:09.875900",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_3_4",
        "state": "10 / 4 = 2.5 (left: 2.5 9)",
        "thoughts": [
          "4 + 9 = 13 (left: 10 13)",
          "9 - 4 = 5 (left: 5 10)",
          "10 - 4 = 6 (left: 6 9)",
          "4 * 9 = 36 (left: 10 36)",
          "10 / 4 = 2.5 (left: 2.5 9)",
          "9 / 4 = 2.25 (left: 2.25 10)"
        ]
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_3_5",
      "result": "PASS",
      "reason": "node_id 0_4_3_5 matches thought position.",
      "timestamp": "2025-05-30T12:43:24.100133",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_3_5",
        "state": "9 / 4 = 2.25 (left: 2.25 10)",
        "thoughts": [
          "4 + 9 = 13 (left: 10 13)",
          "9 - 4 = 5 (left: 5 10)",
          "10 - 4 = 6 (left: 6 9)",
          "4 * 9 = 36 (left: 10 36)",
          "10 / 4 = 2.5 (left: 2.5 9)",
          "9 / 4 = 2.25 (left: 2.25 10)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_4_3_5",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T12:43:32.458253",
      "event_type": "validation",
      "details": {
        "expected_state": "12 - 3 = 9 (left: 4 9 10)\n9 / 4 = 2.25 (left: 2.25 10)",
        "actual_state": "12 - 3 = 9 (left: 4 9 10)\n9 / 4 = 2.25 (left: 2.25 10)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_3_5_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:43:46.179098",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_3_5_0",
      "result": "PASS",
      "reason": "node_id 0_4_3_5_0 matches thought position.",
      "timestamp": "2025-05-30T12:43:46.179178",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_3_5_0",
        "state": "2.25 + 10 = 12.25 (left: 12.25)",
        "thoughts": [
          "2.25 + 10 = 12.25 (left: 12.25)",
          "10 - 2.25 = 7.75 (left: 7.75)",
          "10 / 2.25 = 4.44 (approximately, left: 4.44)",
          "2.25 * 10 = 22.5 (left: 22.5)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_3_5_1",
      "result": "PASS",
      "reason": "Value 0.002 meets threshold 3.0",
      "timestamp": "2025-05-30T12:43:54.040508",
      "event_type": "validation",
      "details": {
        "value": 0.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_3_5_1",
      "result": "PASS",
      "reason": "node_id 0_4_3_5_1 matches thought position.",
      "timestamp": "2025-05-30T12:43:54.040579",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_3_5_1",
        "state": "10 - 2.25 = 7.75 (left: 7.75)",
        "thoughts": [
          "2.25 + 10 = 12.25 (left: 12.25)",
          "10 - 2.25 = 7.75 (left: 7.75)",
          "10 / 2.25 = 4.44 (approximately, left: 4.44)",
          "2.25 * 10 = 22.5 (left: 22.5)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_3_5_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:44:06.961308",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_3_5_2",
      "result": "PASS",
      "reason": "node_id 0_4_3_5_2 matches thought position.",
      "timestamp": "2025-05-30T12:44:06.961427",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_3_5_2",
        "state": "10 / 2.25 = 4.44 (approximately, left: 4.44)",
        "thoughts": [
          "2.25 + 10 = 12.25 (left: 12.25)",
          "10 - 2.25 = 7.75 (left: 7.75)",
          "10 / 2.25 = 4.44 (approximately, left: 4.44)",
          "2.25 * 10 = 22.5 (left: 22.5)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_3_5_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:44:19.685783",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_3_5_3",
      "result": "PASS",
      "reason": "node_id 0_4_3_5_3 matches thought position.",
      "timestamp": "2025-05-30T12:44:19.685866",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_3_5_3",
        "state": "2.25 * 10 = 22.5 (left: 22.5)",
        "thoughts": [
          "2.25 + 10 = 12.25 (left: 12.25)",
          "10 - 2.25 = 7.75 (left: 7.75)",
          "10 / 2.25 = 4.44 (approximately, left: 4.44)",
          "2.25 * 10 = 22.5 (left: 22.5)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_4_3",
      "result": "FAIL",
      "reason": "Complete backtracking validation failed: Expected to pop 0_4_3_5, but popped 0_4_3",
      "timestamp": "2025-05-30T12:44:23.775990",
      "event_type": "validation",
      "details": {
        "popped_node": "0_4_3",
        "expected_popped": "0_4_3_5",
        "backtrack_to": "0_4",
        "expected_parent": "0_4",
        "validation_errors": [
          "Expected to pop 0_4_3_5, but popped 0_4_3"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_4_3",
      "result": "PASS",
      "reason": "All 6 children explored - valid backtrack",
      "timestamp": "2025-05-30T12:44:23.776022",
      "event_type": "validation",
      "details": {
        "total_thoughts": 6,
        "evaluated_children": 6
      }
    },
    {
      "check_name": "backtracking_IV",
      "node_id": "0_4_4",
      "result": "PASS",
      "reason": "Correct sequential sibling: 0_4_4 follows 0_4_3",
      "timestamp": "2025-05-30T12:44:34.528982",
      "event_type": "validation",
      "details": {
        "popped_node": "0_4_3",
        "current_node": "0_4_4",
        "expected_index": 4,
        "actual_index": 4
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:44:34.529029",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_4",
      "result": "PASS",
      "reason": "node_id 0_4_4 matches thought position.",
      "timestamp": "2025-05-30T12:44:34.529065",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_4",
        "state": "12 - 12 = 0 (left: 0 10)",
        "thoughts": [
          "10 + 12 = 22 (left: 12 22)",
          "12 / 10 = 1.2 (left: 1.2 12)",
          "12 - 10 = 2 (left: 2 12)",
          "10 * 12 = 120 (left: 12 120)",
          "12 - 12 = 0 (left: 0 10)",
          "10 / 12 = 0.83 (left: 0.83 12)",
          "12 + 12 = 24 (left: 10 24)",
          "10 - 12 = -2 (left: -2 12)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_5",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:44:47.426574",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_5",
      "result": "FAIL",
      "reason": "node_id 0_4_5 does not match thought position.",
      "timestamp": "2025-05-30T12:44:47.426689",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_5",
        "state": "10 / 12 = 0.83 (left: 0.83 10)",
        "thoughts": [
          "10 + 12 = 22 (left: 12 22)",
          "12 / 10 = 1.2 (left: 1.2 12)",
          "12 - 10 = 2 (left: 2 12)",
          "10 * 12 = 120 (left: 12 120)",
          "12 - 12 = 0 (left: 0 10)",
          "10 / 12 = 0.83 (left: 0.83 12)",
          "12 + 12 = 24 (left: 10 24)",
          "10 - 12 = -2 (left: -2 12)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_6",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:45:01.089573",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_6",
      "result": "PASS",
      "reason": "node_id 0_4_6 matches thought position.",
      "timestamp": "2025-05-30T12:45:01.089654",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_6",
        "state": "12 + 12 = 24 (left: 10 24)",
        "thoughts": [
          "10 + 12 = 22 (left: 12 22)",
          "12 / 10 = 1.2 (left: 1.2 12)",
          "12 - 10 = 2 (left: 2 12)",
          "10 * 12 = 120 (left: 12 120)",
          "12 - 12 = 0 (left: 0 10)",
          "10 / 12 = 0.83 (left: 0.83 12)",
          "12 + 12 = 24 (left: 10 24)",
          "10 - 12 = -2 (left: -2 12)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_4_7",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T12:45:10.190465",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_4_7",
      "result": "FAIL",
      "reason": "node_id 0_4_7 does not match thought position.",
      "timestamp": "2025-05-30T12:45:10.190548",
      "event_type": "validation",
      "details": {
        "node_id": "0_4_7",
        "state": "10 - 12 = -2 (left: -2)",
        "thoughts": [
          "10 + 12 = 22 (left: 12 22)",
          "12 / 10 = 1.2 (left: 1.2 12)",
          "12 - 10 = 2 (left: 2 12)",
          "10 * 12 = 120 (left: 12 120)",
          "12 - 12 = 0 (left: 0 10)",
          "10 / 12 = 0.83 (left: 0.83 12)",
          "12 + 12 = 24 (left: 10 24)",
          "10 - 12 = -2 (left: -2 12)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_4_2",
      "result": "FAIL",
      "reason": "Complete backtracking validation failed: Expected to pop 0_4, but popped 0_4_2; Expected to backtrack to '0_4', but got '0'",
      "timestamp": "2025-05-30T12:45:13.134472",
      "event_type": "validation",
      "details": {
        "popped_node": "0_4_2",
        "expected_popped": "0_4",
        "backtrack_to": "0",
        "expected_parent": "0_4",
        "validation_errors": [
          "Expected to pop 0_4, but popped 0_4_2",
          "Expected to backtrack to '0_4', but got '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_4_2",
      "result": "FAIL",
      "reason": "Only 3 of 4 children explored",
      "timestamp": "2025-05-30T12:45:13.134500",
      "event_type": "validation",
      "details": {
        "total_thoughts": 4,
        "evaluated_children": 3
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_4",
      "result": "FAIL",
      "reason": "Complete backtracking validation failed: Expected to pop 0, but popped 0_4; Expected to backtrack to '0', but got 'None'",
      "timestamp": "2025-05-30T12:45:18.053347",
      "event_type": "validation",
      "details": {
        "popped_node": "0_4",
        "expected_popped": "0",
        "backtrack_to": "None",
        "expected_parent": "0",
        "validation_errors": [
          "Expected to pop 0, but popped 0_4",
          "Expected to backtrack to '0', but got 'None'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "All 8 children explored - valid backtrack",
      "timestamp": "2025-05-30T12:45:18.053376",
      "event_type": "validation",
      "details": {
        "total_thoughts": 8,
        "evaluated_children": 8
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759424",
      "event_type": "validation",
      "details": {
        "state": "3 + 4 = 7 (left: 7 10 12)",
        "thought": "3 + 4 = 7 (left: 7 10 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759450",
      "event_type": "validation",
      "details": {
        "state": "4 - 3 = 1 (left: 1 10 12)",
        "thought": "4 - 3 = 1 (left: 1 10 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759457",
      "event_type": "validation",
      "details": {
        "state": "10 - 3 = 7 (left: 4 7 12)",
        "thought": "10 - 3 = 7 (left: 4 7 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759463",
      "event_type": "validation",
      "details": {
        "state": "12 - 3 = 9 (left: 4 9 10)",
        "thought": "12 - 3 = 9 (left: 4 9 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759469",
      "event_type": "validation",
      "details": {
        "state": "3 * 4 = 12 (left: 10 12 12)",
        "thought": "3 * 4 = 12 (left: 10 12 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759512",
      "event_type": "validation",
      "details": {
        "state": "4 + 7 = 11 (left: 11 12)",
        "thought": "4 + 7 = 11 (left: 11 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759518",
      "event_type": "validation",
      "details": {
        "state": "12 - 4 = 8 (left: 7 8)",
        "thought": "12 - 4 = 8 (left: 7 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759525",
      "event_type": "validation",
      "details": {
        "state": "12 - 7 = 5 (left: 4 5)",
        "thought": "12 - 7 = 5 (left: 4 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759534",
      "event_type": "validation",
      "details": {
        "state": "7 - 4 = 3 (left: 3 12)",
        "thought": "7 - 4 = 3 (left: 3 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759541",
      "event_type": "validation",
      "details": {
        "state": "12 / 4 = 3 (left: 3 7)",
        "thought": "12 / 4 = 3 (left: 3 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759547",
      "event_type": "validation",
      "details": {
        "state": "7 * 4 = 28 (left: 12 28)",
        "thought": "7 * 4 = 28 (left: 12 28)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759553",
      "event_type": "validation",
      "details": {
        "state": "4 * 12 = 48 (left: 7 48)",
        "thought": "4 * 12 = 48 (left: 7 48)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_7",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759561",
      "event_type": "validation",
      "details": {
        "state": "7 + 12 = 19 (left: 4 19)",
        "thought": "7 + 12 = 19 (left: 4 19)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_8",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759567",
      "event_type": "validation",
      "details": {
        "state": "12 + 4 = 16 (left: 7 16)",
        "thought": "12 + 4 = 16 (left: 7 16)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_2_9",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759574",
      "event_type": "validation",
      "details": {
        "state": "7 * 12 = 84 (left: 4 84)",
        "thought": "7 * 12 = 84 (left: 4 84)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759635",
      "event_type": "validation",
      "details": {
        "state": "4 + 9 = 13 (left: 10 13)",
        "thought": "4 + 9 = 13 (left: 10 13)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759641",
      "event_type": "validation",
      "details": {
        "state": "9 - 4 = 5 (left: 5 10)",
        "thought": "9 - 4 = 5 (left: 5 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759647",
      "event_type": "validation",
      "details": {
        "state": "10 - 4 = 6 (left: 6 9)",
        "thought": "10 - 4 = 6 (left: 6 9)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759653",
      "event_type": "validation",
      "details": {
        "state": "10 - 9 = 1 (left: 1 4)",
        "thought": "10 - 9 = 1 (left: 1 4)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759659",
      "event_type": "validation",
      "details": {
        "state": "4 * 9 = 36 (left: 10 36)",
        "thought": "4 * 9 = 36 (left: 10 36)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759668",
      "event_type": "validation",
      "details": {
        "state": "10 / 4 = 2.5 (left: 2.5 9)",
        "thought": "10 / 4 = 2.5 (left: 2.5 9)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_3_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759678",
      "event_type": "validation",
      "details": {
        "state": "9 / 4 = 2.25 (left: 2.25 10)",
        "thought": "9 / 4 = 2.25 (left: 2.25 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759747",
      "event_type": "validation",
      "details": {
        "state": "10 + 12 = 22 (left: 12 22)",
        "thought": "10 + 12 = 22 (left: 12 22)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759757",
      "event_type": "validation",
      "details": {
        "state": "12 / 10 = 1.2 (left: 1.2 12)",
        "thought": "12 / 10 = 1.2 (left: 1.2 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759767",
      "event_type": "validation",
      "details": {
        "state": "12 - 10 = 2 (left: 2 12)",
        "thought": "12 - 10 = 2 (left: 2 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_3",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-30T12:45:19.759780",
      "event_type": "validation",
      "details": {
        "state": "12 - 3 = 9 (left: 4 9 10)",
        "expected_thought": "10 * 12 = 120 (left: 12 120)",
        "child_index": 3
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759790",
      "event_type": "validation",
      "details": {
        "state": "12 - 12 = 0 (left: 0 10)",
        "thought": "12 - 12 = 0 (left: 0 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_5",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-30T12:45:19.759800",
      "event_type": "validation",
      "details": {
        "state": "10 / 12 = 0.83 (left: 0.83 10)",
        "expected_thought": "10 / 12 = 0.83 (left: 0.83 12)",
        "child_index": 5
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_6",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759810",
      "event_type": "validation",
      "details": {
        "state": "12 + 12 = 24 (left: 10 24)",
        "thought": "12 + 12 = 24 (left: 10 24)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_7",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-30T12:45:19.759817",
      "event_type": "validation",
      "details": {
        "state": "10 - 12 = -2 (left: -2)",
        "expected_thought": "10 - 12 = -2 (left: -2 12)",
        "child_index": 7
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_2_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759847",
      "event_type": "validation",
      "details": {
        "state": "2 + 12 = 14 (left: 14)",
        "thought": "2 + 12 = 14 (left: 14)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_2_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759854",
      "event_type": "validation",
      "details": {
        "state": "12 - 2 = 10 (left: 10)",
        "thought": "12 - 2 = 10 (left: 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_2_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759860",
      "event_type": "validation",
      "details": {
        "state": "12 / 2 = 6 (left: 6)",
        "thought": "12 / 2 = 6 (left: 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_2_2_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759893",
      "event_type": "validation",
      "details": {
        "state": "10 + 6 = 16 (left: 8 14 16)",
        "thought": "10 + 6 = 16 (left: 8 14 16)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_2_2_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759900",
      "event_type": "validation",
      "details": {
        "state": "4 + 6 = 10 (left: 8 10 14)",
        "thought": "4 + 6 = 10 (left: 8 10 14)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_2_2_2",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-30T12:45:19.759908",
      "event_type": "validation",
      "details": {
        "state": "12 - 2 = 10 (left: 10)",
        "expected_thought": "16 + 6 = 22 (left: 8 8 22)",
        "child_index": 2
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_2_2_3",
      "result": "FAIL",
      "reason": "State doesn't match expected thought",
      "timestamp": "2025-05-30T12:45:19.759914",
      "event_type": "validation",
      "details": {
        "state": "6 * 8 = 48 (left: 10 48)",
        "expected_thought": "16 - 6 = 10 (left: 8 10 14)",
        "child_index": 3
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_3_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759975",
      "event_type": "validation",
      "details": {
        "state": "4 + 9 = 13 (left: 10 13)",
        "thought": "4 + 9 = 13 (left: 10 13)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_3_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759982",
      "event_type": "validation",
      "details": {
        "state": "9 - 4 = 5 (left: 5 10)",
        "thought": "9 - 4 = 5 (left: 5 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_3_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759988",
      "event_type": "validation",
      "details": {
        "state": "10 - 4 = 6 (left: 6 9)",
        "thought": "10 - 4 = 6 (left: 6 9)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_3_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.759993",
      "event_type": "validation",
      "details": {
        "state": "4 * 9 = 36 (left: 10 36)",
        "thought": "4 * 9 = 36 (left: 10 36)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_3_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.760000",
      "event_type": "validation",
      "details": {
        "state": "10 / 4 = 2.5 (left: 2.5 9)",
        "thought": "10 / 4 = 2.5 (left: 2.5 9)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_3_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.760007",
      "event_type": "validation",
      "details": {
        "state": "9 / 4 = 2.25 (left: 2.25 10)",
        "thought": "9 / 4 = 2.25 (left: 2.25 10)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_3_5_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.760046",
      "event_type": "validation",
      "details": {
        "state": "2.25 + 10 = 12.25 (left: 12.25)",
        "thought": "2.25 + 10 = 12.25 (left: 12.25)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_3_5_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.760053",
      "event_type": "validation",
      "details": {
        "state": "10 - 2.25 = 7.75 (left: 7.75)",
        "thought": "10 - 2.25 = 7.75 (left: 7.75)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_3_5_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.760060",
      "event_type": "validation",
      "details": {
        "state": "10 / 2.25 = 4.44 (approximately, left: 4.44)",
        "thought": "10 / 2.25 = 4.44 (approximately, left: 4.44)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_4_3_5_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T12:45:19.760067",
      "event_type": "validation",
      "details": {
        "state": "2.25 * 10 = 22.5 (left: 22.5)",
        "thought": "2.25 * 10 = 22.5 (left: 22.5)"
      }
    }
  ],
  "legacy_log": [
    {
      "event": "push",
      "node_id": "0",
      "issues": [],
      "log": []
    },
    {
      "event": "push",
      "node_id": "0_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_0 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_1 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_2 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '10 - 3 = 7 (left: 4 7 12)' found in parent's thoughts",
        "\u2705 Node 0_2 matches thought position.",
        "\u2705 State consistency check passed for node 0_2"
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_5 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_7",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_7 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_7 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_8",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_8 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_8 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_2_9",
      "issues": [],
      "log": [
        "\u2705 Node 0_2_9 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_2_9 matches thought position."
      ]
    },
    {
      "event": "pop",
      "node_id": "",
      "issues": [
        "Backtrack parent error: Expected to backtrack to '0_4_2', but got '0_4'.",
        "Complete backtracking validation failed: Expected to backtrack to '0_4_2', but got '0_4'",
        "\u274c All children of node 0_4_2_2 were not explored \u2014 invalid reason for backtracking.",
        "Pop error: Expected to pop 0_4_3_5, but popped 0_4_3.",
        "Complete backtracking validation failed: Expected to pop 0_4_3_5, but popped 0_4_3",
        "Pop error: Expected to pop 0_4, but popped 0_4_2.",
        "Backtrack parent error: Expected to backtrack to '0_4', but got '0'.",
        "Complete backtracking validation failed: Expected to pop 0_4, but popped 0_4_2; Expected to backtrack to '0_4', but got '0'",
        "\u274c All children of node 0_4_2 were not explored \u2014 invalid reason for backtracking.",
        "Pop error: Expected to pop 0, but popped 0_4.",
        "Backtrack parent error: Expected to backtrack to '0', but got 'None'.",
        "Complete backtracking validation failed: Expected to pop 0, but popped 0_4; Expected to backtrack to '0', but got 'None'"
      ],
      "log": [
        "\u2705 Popped 0_2 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_2; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_2 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_3 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_3; Correctly backtracking to parent '0'",
        "\u2705 All children of node 0_3 were explored \u2014 valid reason for backtracking.",
        "\u2705 Popped 0_4_2_2 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0_4'.",
        "\u2705 All children of node 0_4_3 were explored \u2014 valid reason for backtracking.",
        "\u2705 All children of node 0_4 were explored \u2014 valid reason for backtracking."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_3 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '12 - 3 = 9 (left: 4 9 10)' found in parent's thoughts",
        "\u2705 Sequential child node validation: pushing 0_3 after popping 0_2 is correct.",
        "\u2705 Node 0_3 matches thought position.",
        "\u2705 State consistency check passed for node 0_3"
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_5 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_5 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_3_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_3_6 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_3_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_4 with value 60.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '3 * 4 = 12 (left: 10 12 12)' found in parent's thoughts",
        "\u2705 Sequential child node validation: pushing 0_4 after popping 0_3 is correct.",
        "\u2705 Node 0_4 matches thought position.",
        "\u2705 State consistency check passed for node 0_4"
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_2",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_4_2 with value 60.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '12 - 10 = 2 (left: 2 12)' found in parent's thoughts; Previous thought '3 * 4 = 12 (left: 10 12 12)' found in parent's state",
        "\u2705 Node 0_4_2 matches thought position.",
        "\u2705 State consistency check passed for node 0_4_2"
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_2_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_2_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_2_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_2_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_2_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_2_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_2_2",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_4_2_2 with value 40.001 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '12 / 2 = 6 (left: 6)' found in parent's thoughts; Previous thought '3 * 4 = 12 (left: 10 12 12)' found in parent's state; Previous thought '12 - 10 = 2 (left: 2 12)' found in parent's state",
        "\u2705 Node 0_4_2_2 matches thought position.",
        "\u2705 State consistency check passed for node 0_4_2_2"
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_2_2_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_2_2_0 with value 0 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_2_2_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_2_2_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_2_2_1 with value 0 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_2_2_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_2_2_2",
      "issues": [
        "Order error: node_id 0_4_2_2_2 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_4_2_2_2 with value 0 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_2_2_3",
      "issues": [
        "Order error: node_id 0_4_2_2_3 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_4_2_2_3 with value 0 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_3",
      "issues": [
        "State validation error: Last thought '12 - 3 = 9 (left: 4 9 10)' not found in parent's thoughts",
        "Order error: node_id 0_4_3 does not match thought position.",
        "State mismatch for node 0_4_3: expected '3 * 4 = 12 (left: 10 12 12)\n12 - 3 = 9 (left: 4 9 10)' but got '12 - 3 = 9 (left: 4 9 10)'"
      ],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_4_3 with value 3.0 more than or equal to 3.0 should be traversed."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_3_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_3_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_3_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_3_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_3_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_3_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_3_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_3_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_3_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_3_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_3_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_3_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_3_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_3_4 with value 1.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_3_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_3_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_3_5 matches thought position.",
        "\u2705 State consistency check passed for node 0_4_3_5"
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_3_5_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_3_5_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_3_5_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_3_5_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_3_5_1 with value 0.002 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_3_5_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_3_5_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_3_5_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_3_5_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_3_5_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_3_5_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_3_5_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_4",
      "issues": [],
      "log": [
        "\u2705 Sequential child node validation: pushing 0_4_4 after popping 0_4_3 is correct.",
        "\u2705 Node 0_4_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_5",
      "issues": [
        "Order error: node_id 0_4_5 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_4_5 with value 0.003 less than 3.0 pruned successfully."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_6",
      "issues": [],
      "log": [
        "\u2705 Node 0_4_6 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_4_6 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_4_7",
      "issues": [
        "Order error: node_id 0_4_7 does not match thought position."
      ],
      "log": [
        "\u2705 Node 0_4_7 with value 0.003 less than 3.0 pruned successfully."
      ]
    }
  ],
  "tree_trace": {
    "0": {
      "state": null,
      "thought": "3 + 4 = 7 (left: 7 10 12)\n4 - 3 = 1 (left: 1 10 12)\n10 - 3 = 7 (left: 4 7 12)\n12 - 3 = 9 (left: 4 9 10)\n3 * 4 = 12 (left: 10 12 12)\n10 / 3 = 3.33 (left: 3.33 4 12)\n12 / 3 = 4 (left: 4 4 10)\n12 - 4 = 8 (left: 3 8 10)\n10 - 4 = 6 (left: 3 6 12)",
      "value": null,
      "opening_remark": null,
      "children": {
        "0_0": {
          "state": "3 + 4 = 7 (left: 7 10 12)",
          "thought": null,
          "value": 1.002,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_1": {
          "state": "4 - 3 = 1 (left: 1 10 12)",
          "thought": null,
          "value": 1.002,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {},
          "closing_remark": null,
          "backtracked": false
        },
        "0_2": {
          "state": "10 - 3 = 7 (left: 4 7 12)",
          "thought": "4 + 7 = 11 (left: 11 12)\n12 - 4 = 8 (left: 7 8)\n12 - 7 = 5 (left: 4 5)\n7 - 4 = 3 (left: 3 12)\n12 / 4 = 3 (left: 3 7)\n7 * 4 = 28 (left: 12 28) \n4 * 12 = 48 (left: 7 48) \n7 + 12 = 19 (left: 4 19) \n12 + 4 = 16 (left: 7 16) \n7 * 12 = 84 (left: 4 84)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_2_0": {
              "state": "10 - 3 = 7 (left: 4 7 12)\n4 + 7 = 11 (left: 11 12)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_1": {
              "state": "10 - 3 = 7 (left: 4 7 12)\n12 - 4 = 8 (left: 7 8)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_2": {
              "state": "10 - 3 = 7 (left: 4 7 12)\n12 - 7 = 5 (left: 4 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_3": {
              "state": "10 - 3 = 7 (left: 4 7 12)\n7 - 4 = 3 (left: 3 12)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_4": {
              "state": "10 - 3 = 7 (left: 4 7 12)\n12 / 4 = 3 (left: 3 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_5": {
              "state": "10 - 3 = 7 (left: 4 7 12)\n7 * 4 = 28 (left: 12 28)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_6": {
              "state": "10 - 3 = 7 (left: 4 7 12)\n4 * 12 = 48 (left: 7 48)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_7": {
              "state": "10 - 3 = 7 (left: 4 7 12)\n7 + 12 = 19 (left: 4 19)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_8": {
              "state": "10 - 3 = 7 (left: 4 7 12)\n12 + 4 = 16 (left: 7 16)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_2_9": {
              "state": "10 - 3 = 7 (left: 4 7 12)\n7 * 12 = 84 (left: 4 84)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_3": {
          "state": "12 - 3 = 9 (left: 4 9 10)",
          "thought": "4 + 9 = 13 (left: 10 13)\n9 - 4 = 5 (left: 5 10)\n10 - 4 = 6 (left: 6 9)\n10 - 9 = 1 (left: 1 4)\n4 * 9 = 36 (left: 10 36)\n10 / 4 = 2.5 (left: 2.5 9)\n9 / 4 = 2.25 (left: 2.25 10)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_3_0": {
              "state": "12 - 3 = 9 (left: 4 9 10)\n4 + 9 = 13 (left: 10 13)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_1": {
              "state": "12 - 3 = 9 (left: 4 9 10)\n9 - 4 = 5 (left: 5 10)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_2": {
              "state": "12 - 3 = 9 (left: 4 9 10)\n10 - 4 = 6 (left: 6 9)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_3": {
              "state": "12 - 3 = 9 (left: 4 9 10)\n10 - 9 = 1 (left: 1 4)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_4": {
              "state": "12 - 3 = 9 (left: 4 9 10)\n4 * 9 = 36 (left: 10 36)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_5": {
              "state": "12 - 3 = 9 (left: 4 9 10)\n10 / 4 = 2.5 (left: 2.5 9)",
              "thought": null,
              "value": 1.002,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_3_6": {
              "state": "12 - 3 = 9 (left: 4 9 10)\n9 / 4 = 2.25 (left: 2.25 10)",
              "thought": null,
              "value": 1.002,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        },
        "0_4": {
          "state": "3 * 4 = 12 (left: 10 12 12)",
          "thought": "10 + 12 = 22 (left: 12 22)\n12 / 10 = 1.2 (left: 1.2 12)\n12 - 10 = 2 (left: 2 12)\n10 * 12 = 120 (left: 12 120)\n12 - 12 = 0 (left: 0 10)\n10 / 12 = 0.83 (left: 0.83 12)\n12 + 12 = 24 (left: 10 24)\n10 - 12 = -2 (left: -2 12)",
          "value": 60.0,
          "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
          "children": {
            "0_4_0": {
              "state": "3 * 4 = 12 (left: 10 12 12)\n10 + 12 = 22 (left: 12 22)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_4_1": {
              "state": "3 * 4 = 12 (left: 10 12 12)\n12 / 10 = 1.2 (left: 1.2 12)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_4_2": {
              "state": "3 * 4 = 12 (left: 10 12 12)\n12 - 10 = 2 (left: 2 12)",
              "thought": "2 + 12 = 14 (left: 14)\n12 - 2 = 10 (left: 10)\n12 / 2 = 6 (left: 6)\n2 * 12 = 24 (left: 24)",
              "value": 60.0,
              "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
              "children": {
                "0_4_2_0": {
                  "state": "3 * 4 = 12 (left: 10 12 12)\n12 - 10 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                  "thought": null,
                  "value": 0.003,
                  "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                  "children": {},
                  "closing_remark": null,
                  "backtracked": false
                },
                "0_4_2_1": {
                  "state": "3 * 4 = 12 (left: 10 12 12)\n12 - 10 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                  "thought": null,
                  "value": 0.003,
                  "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                  "children": {},
                  "closing_remark": null,
                  "backtracked": false
                },
                "0_4_2_2": {
                  "state": "3 * 4 = 12 (left: 10 12 12)\n12 - 10 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                  "thought": "10 + 6 = 16 (left: 8 14 16)\n4 + 6 = 10 (left: 8 10 14)\n16 + 6 = 22 (left: 8 8 22)\n16 - 6 = 10 (left: 8 10 14)\n6 * 8 = 48 (left: 10 14 48)\n6 - 2 = 4 (left: 4 8 14)\n8 + 6 = 14 (left: 8 10 14)\n8 - 6 = 2 (left: 2 10 14)\n14 + 6 = 20 (left: 8 8 20)\n6 * 2 = 12 (left: 8 12 14)\n12 + 6 = 18 (left: 8 8 18)\n12 - 6 = 6 (left: 6 8 14)\n7 + 6 = 13 (left: 8 8 13)\n7 - 6 = 1 (left: 1 8 14)",
                  "value": 40.001,
                  "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
                  "children": {
                    "0_4_2_2_0": {
                      "state": "3 * 4 = 12 (left: 10 12 12)\n12 - 10 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\n10 + 6 = 16 (left: 8 14 16)",
                      "thought": null,
                      "value": 0,
                      "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                      "children": {},
                      "closing_remark": null,
                      "backtracked": false
                    },
                    "0_4_2_2_1": {
                      "state": "3 * 4 = 12 (left: 10 12 12)\n12 - 10 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\n4 + 6 = 10 (left: 8 10 14)",
                      "thought": null,
                      "value": 0,
                      "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                      "children": {},
                      "closing_remark": null,
                      "backtracked": false
                    },
                    "0_4_2_2_2": {
                      "state": "3 * 4 = 12 (left: 10 12 12)\n12 - 10 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\n12 - 2 = 10 (left: 10)",
                      "thought": null,
                      "value": 0,
                      "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                      "children": {},
                      "closing_remark": null,
                      "backtracked": false
                    },
                    "0_4_2_2_3": {
                      "state": "3 * 4 = 12 (left: 10 12 12)\n12 - 10 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\n6 * 8 = 48 (left: 10 48)",
                      "thought": null,
                      "value": 0,
                      "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                      "children": {},
                      "closing_remark": null,
                      "backtracked": false
                    }
                  },
                  "closing_remark": null,
                  "backtracked": false,
                  "backtracked_to": "0_4"
                }
              },
              "closing_remark": null,
              "backtracked": false
            },
            "0_4_3": {
              "state": "3 * 4 = 12 (left: 10 12 12)\n12 - 3 = 9 (left: 4 9 10)",
              "thought": "4 + 9 = 13 (left: 10 13)\n9 - 4 = 5 (left: 5 10)\n10 - 4 = 6 (left: 6 9)\n4 * 9 = 36 (left: 10 36)\n10 / 4 = 2.5 (left: 2.5 9)\n9 / 4 = 2.25 (left: 2.25 10)",
              "value": 3.0,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {
                "0_4_3_0": {
                  "state": "12 - 3 = 9 (left: 4 9 10)\n4 + 9 = 13 (left: 10 13)",
                  "thought": null,
                  "value": 0.003,
                  "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                  "children": {},
                  "closing_remark": null,
                  "backtracked": false
                },
                "0_4_3_1": {
                  "state": "12 - 3 = 9 (left: 4 9 10)\n9 - 4 = 5 (left: 5 10)",
                  "thought": null,
                  "value": 0.003,
                  "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                  "children": {},
                  "closing_remark": null,
                  "backtracked": false
                },
                "0_4_3_2": {
                  "state": "12 - 3 = 9 (left: 4 9 10)\n10 - 4 = 6 (left: 6 9)",
                  "thought": null,
                  "value": 0.003,
                  "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                  "children": {},
                  "closing_remark": null,
                  "backtracked": false
                },
                "0_4_3_3": {
                  "state": "12 - 3 = 9 (left: 4 9 10)\n4 * 9 = 36 (left: 10 36)",
                  "thought": null,
                  "value": 0.003,
                  "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                  "children": {},
                  "closing_remark": null,
                  "backtracked": false
                },
                "0_4_3_4": {
                  "state": "12 - 3 = 9 (left: 4 9 10)\n10 / 4 = 2.5 (left: 2.5 9)",
                  "thought": null,
                  "value": 1.002,
                  "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                  "children": {},
                  "closing_remark": null,
                  "backtracked": false
                },
                "0_4_3_5": {
                  "state": "12 - 3 = 9 (left: 4 9 10)\n9 / 4 = 2.25 (left: 2.25 10)",
                  "thought": "2.25 + 10 = 12.25 (left: 12.25)\n10 - 2.25 = 7.75 (left: 7.75)\n10 / 2.25 = 4.44 (approximately, left: 4.44)\n2.25 * 10 = 22.5 (left: 22.5)",
                  "value": 3.0,
                  "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                  "children": {
                    "0_4_3_5_0": {
                      "state": "12 - 3 = 9 (left: 4 9 10)\n9 / 4 = 2.25 (left: 2.25 10)\n2.25 + 10 = 12.25 (left: 12.25)",
                      "thought": null,
                      "value": 0.003,
                      "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                      "children": {},
                      "closing_remark": null,
                      "backtracked": false
                    },
                    "0_4_3_5_1": {
                      "state": "12 - 3 = 9 (left: 4 9 10)\n9 / 4 = 2.25 (left: 2.25 10)\n10 - 2.25 = 7.75 (left: 7.75)",
                      "thought": null,
                      "value": 0.002,
                      "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                      "children": {},
                      "closing_remark": null,
                      "backtracked": false
                    },
                    "0_4_3_5_2": {
                      "state": "12 - 3 = 9 (left: 4 9 10)\n9 / 4 = 2.25 (left: 2.25 10)\n10 / 2.25 = 4.44 (approximately, left: 4.44)",
                      "thought": null,
                      "value": 0.003,
                      "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                      "children": {},
                      "closing_remark": null,
                      "backtracked": false
                    },
                    "0_4_3_5_3": {
                      "state": "12 - 3 = 9 (left: 4 9 10)\n9 / 4 = 2.25 (left: 2.25 10)\n2.25 * 10 = 22.5 (left: 22.5)",
                      "thought": null,
                      "value": 0.003,
                      "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                      "children": {},
                      "closing_remark": null,
                      "backtracked": false
                    }
                  },
                  "closing_remark": null,
                  "backtracked": false,
                  "backtracked_to": "0_4"
                }
              },
              "closing_remark": null,
              "backtracked": false
            },
            "0_4_4": {
              "state": "3 * 4 = 12 (left: 10 12 12)\n12 - 12 = 0 (left: 0 10)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_4_5": {
              "state": "3 * 4 = 12 (left: 10 12 12)\n10 / 12 = 0.83 (left: 0.83 10)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_4_6": {
              "state": "3 * 4 = 12 (left: 10 12 12)\n12 + 12 = 24 (left: 10 24)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_4_7": {
              "state": "3 * 4 = 12 (left: 10 12 12)\n10 - 12 = -2 (left: -2)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": false,
          "backtracked_to": "0"
        }
      },
      "closing_remark": null,
      "backtracked": false
    }
  }
}