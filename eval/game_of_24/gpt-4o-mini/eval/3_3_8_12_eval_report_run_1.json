{
  "summary": {
    "total_checks": 79,
    "passed": 75,
    "failed": 4
  },
  "checks_by_type": {
    "pseudo_recursive_call": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "Value 41.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T11:16:25.082468",
          "event_type": "validation",
          "details": {
            "value": 41.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "Value 60.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T11:16:52.509500",
          "event_type": "validation",
          "details": {
            "value": 60.0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_0_1_1",
          "result": "PASS",
          "reason": "Value 20.002 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T11:17:16.475494",
          "event_type": "validation",
          "details": {
            "value": 20.002,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pseudo_recursive_call",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Value 3.0 more than or equal to threshold 3.0",
          "timestamp": "2025-05-30T11:18:53.437031",
          "event_type": "validation",
          "details": {
            "value": 3.0,
            "threshold": 3.0
          }
        }
      ]
    },
    "child_state": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "child_state",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State validation passed: Last thought '3 + 3 = 6 (left: 6 8 12)' found in parent's thoughts",
          "timestamp": "2025-05-30T11:16:25.082529",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '3 + 3 = 6 (left: 6 8 12)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "3 + 3 = 6 (left: 6 8 12)",
              "8 - 3 = 5 (left: 3 5 12)",
              "12 / 3 = 4 (left: 3 4 8)",
              "12 - 3 = 9 (left: 3 8 9)",
              "3 * 3 = 9 (left: 8 9 12)",
              "8 * 3 = 24 (left: 3 12 24)",
              "12 + 3 = 15 (left: 3 8 15)",
              "8 + 3 = 11 (left: 3 11 12)"
            ],
            "parent_state": null
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "State validation passed: Last thought '8 - 6 = 2 (left: 2 12)' found in parent's thoughts; Previous thought '3 + 3 = 6 (left: 6 8 12)' found in parent's state",
          "timestamp": "2025-05-30T11:16:52.509559",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '8 - 6 = 2 (left: 2 12)' found in parent's thoughts",
              "Previous thought '3 + 3 = 6 (left: 6 8 12)' found in parent's state"
            ],
            "parent_thoughts": [
              "6 + 8 = 14 (left: 12 14)",
              "8 - 6 = 2 (left: 2 12)",
              "12 - 6 = 6 (left: 6 8)",
              "12 / 6 = 2 (left: 2 8)",
              "12 - 8 = 4 (left: 4 6)",
              "8 * 6 = 48 (left: 12 48)",
              "12 + 6 = 18 (left: 8 18)"
            ],
            "parent_state": [
              "3 + 3 = 6 (left: 6 8 12)"
            ]
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_0_1_1",
          "result": "PASS",
          "reason": "State validation passed: Last thought '12 / 2 = 6 (left: 6)' found in parent's thoughts; Previous thought '3 + 3 = 6 (left: 6 8 12)' found in parent's state; Previous thought '8 - 6 = 2 (left: 2 12)' found in parent's state",
          "timestamp": "2025-05-30T11:17:16.475554",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '12 / 2 = 6 (left: 6)' found in parent's thoughts",
              "Previous thought '3 + 3 = 6 (left: 6 8 12)' found in parent's state",
              "Previous thought '8 - 6 = 2 (left: 2 12)' found in parent's state"
            ],
            "parent_thoughts": [
              "2 + 12 = 14 (left: 14)",
              "12 / 2 = 6 (left: 6)",
              "12 - 2 = 10 (left: 10)",
              "2 * 12 = 24 (left: 24)"
            ],
            "parent_state": [
              "3 + 3 = 6 (left: 6 8 12)",
              "8 - 6 = 2 (left: 2 12)"
            ]
          }
        },
        {
          "check_name": "child_state",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State validation passed: Last thought '8 - 3 = 5 (left: 3 5 12)' found in parent's thoughts",
          "timestamp": "2025-05-30T11:18:53.437095",
          "event_type": "validation",
          "details": {
            "validation_success": [
              "Last thought '8 - 3 = 5 (left: 3 5 12)' found in parent's thoughts"
            ],
            "parent_thoughts": [
              "3 + 3 = 6 (left: 6 8 12)",
              "8 - 3 = 5 (left: 3 5 12)",
              "12 / 3 = 4 (left: 3 4 8)",
              "12 - 3 = 9 (left: 3 8 9)",
              "3 * 3 = 9 (left: 8 9 12)",
              "8 * 3 = 24 (left: 3 12 24)",
              "12 + 3 = 15 (left: 3 8 15)",
              "8 + 3 = 11 (left: 3 11 12)"
            ],
            "parent_state": null
          }
        }
      ]
    },
    "child_id_assignment": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "node_id 0_0 matches thought position.",
          "timestamp": "2025-05-30T11:16:25.082693",
          "event_type": "validation",
          "details": {
            "node_id": "0_0",
            "state": "3 + 3 = 6 (left: 6 8 12)",
            "thoughts": [
              "3 + 3 = 6 (left: 6 8 12)",
              "8 - 3 = 5 (left: 3 5 12)",
              "12 / 3 = 4 (left: 3 4 8)",
              "12 - 3 = 9 (left: 3 8 9)",
              "3 * 3 = 9 (left: 8 9 12)",
              "8 * 3 = 24 (left: 3 12 24)",
              "12 + 3 = 15 (left: 3 8 15)",
              "8 + 3 = 11 (left: 3 11 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_0",
          "result": "PASS",
          "reason": "node_id 0_0_0 matches thought position.",
          "timestamp": "2025-05-30T11:16:45.073220",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_0",
            "state": "6 + 8 = 14 (left: 12 14)",
            "thoughts": [
              "6 + 8 = 14 (left: 12 14)",
              "8 - 6 = 2 (left: 2 12)",
              "12 - 6 = 6 (left: 6 8)",
              "12 / 6 = 2 (left: 2 8)",
              "12 - 8 = 4 (left: 4 6)",
              "8 * 6 = 48 (left: 12 48)",
              "12 + 6 = 18 (left: 8 18)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "node_id 0_0_1 matches thought position.",
          "timestamp": "2025-05-30T11:16:52.509602",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_1",
            "state": "8 - 6 = 2 (left: 2 12)",
            "thoughts": [
              "6 + 8 = 14 (left: 12 14)",
              "8 - 6 = 2 (left: 2 12)",
              "12 - 6 = 6 (left: 6 8)",
              "12 / 6 = 2 (left: 2 8)",
              "12 - 8 = 4 (left: 4 6)",
              "8 * 6 = 48 (left: 12 48)",
              "12 + 6 = 18 (left: 8 18)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_1_0",
          "result": "PASS",
          "reason": "node_id 0_0_1_0 matches thought position.",
          "timestamp": "2025-05-30T11:17:09.628159",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_1_0",
            "state": "2 + 12 = 14 (left: 14)",
            "thoughts": [
              "2 + 12 = 14 (left: 14)",
              "12 / 2 = 6 (left: 6)",
              "12 - 2 = 10 (left: 10)",
              "2 * 12 = 24 (left: 24)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_1_1",
          "result": "PASS",
          "reason": "node_id 0_0_1_1 matches thought position.",
          "timestamp": "2025-05-30T11:17:16.475597",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_1_1",
            "state": "12 / 2 = 6 (left: 6)",
            "thoughts": [
              "2 + 12 = 14 (left: 14)",
              "12 / 2 = 6 (left: 6)",
              "12 - 2 = 10 (left: 10)",
              "2 * 12 = 24 (left: 24)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_1_1_0",
          "result": "PASS",
          "reason": "node_id 0_0_1_1_0 matches thought position.",
          "timestamp": "2025-05-30T11:17:41.022354",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_1_1_0",
            "state": "8 + 6 = 14 (left: 2 8 14)",
            "thoughts": [
              "8 + 6 = 14 (left: 2 8 14)",
              "8 - 6 = 2 (left: 2 2 14)",
              "14 - 6 = 8 (left: 2 8 8)",
              "2 + 6 = 8 (left: 8 8 8)",
              "14 / 6 = 2.33 (left: 2 2.33 8)",
              "6 / 2 = 3 (left: 3 8 14)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_1_1_1",
          "result": "PASS",
          "reason": "node_id 0_0_1_1_1 matches thought position.",
          "timestamp": "2025-05-30T11:17:50.331819",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_1_1_1",
            "state": "8 - 6 = 2 (left: 2 2 14)",
            "thoughts": [
              "8 + 6 = 14 (left: 2 8 14)",
              "8 - 6 = 2 (left: 2 2 14)",
              "14 - 6 = 8 (left: 2 8 8)",
              "2 + 6 = 8 (left: 8 8 8)",
              "14 / 6 = 2.33 (left: 2 2.33 8)",
              "6 / 2 = 3 (left: 3 8 14)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_1_1_2",
          "result": "PASS",
          "reason": "node_id 0_0_1_1_2 matches thought position.",
          "timestamp": "2025-05-30T11:18:01.858116",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_1_1_2",
            "state": "14 - 6 = 8 (left: 2 8 8)",
            "thoughts": [
              "8 + 6 = 14 (left: 2 8 14)",
              "8 - 6 = 2 (left: 2 2 14)",
              "14 - 6 = 8 (left: 2 8 8)",
              "2 + 6 = 8 (left: 8 8 8)",
              "14 / 6 = 2.33 (left: 2 2.33 8)",
              "6 / 2 = 3 (left: 3 8 14)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_1_1_3",
          "result": "PASS",
          "reason": "node_id 0_0_1_1_3 matches thought position.",
          "timestamp": "2025-05-30T11:18:10.813499",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_1_1_3",
            "state": "2 + 6 = 8 (left: 8 8 8)",
            "thoughts": [
              "8 + 6 = 14 (left: 2 8 14)",
              "8 - 6 = 2 (left: 2 2 14)",
              "14 - 6 = 8 (left: 2 8 8)",
              "2 + 6 = 8 (left: 8 8 8)",
              "14 / 6 = 2.33 (left: 2 2.33 8)",
              "6 / 2 = 3 (left: 3 8 14)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_1_1_4",
          "result": "PASS",
          "reason": "node_id 0_0_1_1_4 matches thought position.",
          "timestamp": "2025-05-30T11:18:28.040331",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_1_1_4",
            "state": "14 / 6 = 2.33 (left: 2 2.33 8)",
            "thoughts": [
              "8 + 6 = 14 (left: 2 8 14)",
              "8 - 6 = 2 (left: 2 2 14)",
              "14 - 6 = 8 (left: 2 8 8)",
              "2 + 6 = 8 (left: 8 8 8)",
              "14 / 6 = 2.33 (left: 2 2.33 8)",
              "6 / 2 = 3 (left: 3 8 14)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_0_1_1_5",
          "result": "PASS",
          "reason": "node_id 0_0_1_1_5 matches thought position.",
          "timestamp": "2025-05-30T11:18:40.758513",
          "event_type": "validation",
          "details": {
            "node_id": "0_0_1_1_5",
            "state": "6 / 2 = 3 (left: 3 8 14)",
            "thoughts": [
              "8 + 6 = 14 (left: 2 8 14)",
              "8 - 6 = 2 (left: 2 2 14)",
              "14 - 6 = 8 (left: 2 8 8)",
              "2 + 6 = 8 (left: 8 8 8)",
              "14 / 6 = 2.33 (left: 2 2.33 8)",
              "6 / 2 = 3 (left: 3 8 14)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "node_id 0_1 matches thought position.",
          "timestamp": "2025-05-30T11:18:53.437179",
          "event_type": "validation",
          "details": {
            "node_id": "0_1",
            "state": "8 - 3 = 5 (left: 3 5 12)",
            "thoughts": [
              "3 + 3 = 6 (left: 6 8 12)",
              "8 - 3 = 5 (left: 3 5 12)",
              "12 / 3 = 4 (left: 3 4 8)",
              "12 - 3 = 9 (left: 3 8 9)",
              "3 * 3 = 9 (left: 8 9 12)",
              "8 * 3 = 24 (left: 3 12 24)",
              "12 + 3 = 15 (left: 3 8 15)",
              "8 + 3 = 11 (left: 3 11 12)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "node_id 0_1_0 matches thought position.",
          "timestamp": "2025-05-30T11:19:22.941565",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_0",
            "state": "3 + 5 = 8 (left: 8 12)",
            "thoughts": [
              "3 + 5 = 8 (left: 8 12)",
              "12 - 3 = 9 (left: 5 9)",
              "12 / 3 = 4 (left: 4 5)",
              "5 * 3 = 15 (left: 12 15)",
              "12 - 5 = 7 (left: 3 7)",
              "5 - 3 = 2 (left: 2 12)",
              "3 * 5 = 15 (left: 12 15)",
              "12 + 3 = 15 (left: 5 15)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_1",
          "result": "PASS",
          "reason": "node_id 0_1_1 matches thought position.",
          "timestamp": "2025-05-30T11:19:32.407764",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_1",
            "state": "12 - 3 = 9 (left: 5 9)",
            "thoughts": [
              "3 + 5 = 8 (left: 8 12)",
              "12 - 3 = 9 (left: 5 9)",
              "12 / 3 = 4 (left: 4 5)",
              "5 * 3 = 15 (left: 12 15)",
              "12 - 5 = 7 (left: 3 7)",
              "5 - 3 = 2 (left: 2 12)",
              "3 * 5 = 15 (left: 12 15)",
              "12 + 3 = 15 (left: 5 15)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_2",
          "result": "PASS",
          "reason": "node_id 0_1_2 matches thought position.",
          "timestamp": "2025-05-30T11:19:41.748550",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_2",
            "state": "12 / 3 = 4 (left: 4 5)",
            "thoughts": [
              "3 + 5 = 8 (left: 8 12)",
              "12 - 3 = 9 (left: 5 9)",
              "12 / 3 = 4 (left: 4 5)",
              "5 * 3 = 15 (left: 12 15)",
              "12 - 5 = 7 (left: 3 7)",
              "5 - 3 = 2 (left: 2 12)",
              "3 * 5 = 15 (left: 12 15)",
              "12 + 3 = 15 (left: 5 15)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_3",
          "result": "PASS",
          "reason": "node_id 0_1_3 matches thought position.",
          "timestamp": "2025-05-30T11:19:52.074297",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_3",
            "state": "5 * 3 = 15 (left: 12 15)",
            "thoughts": [
              "3 + 5 = 8 (left: 8 12)",
              "12 - 3 = 9 (left: 5 9)",
              "12 / 3 = 4 (left: 4 5)",
              "5 * 3 = 15 (left: 12 15)",
              "12 - 5 = 7 (left: 3 7)",
              "5 - 3 = 2 (left: 2 12)",
              "3 * 5 = 15 (left: 12 15)",
              "12 + 3 = 15 (left: 5 15)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_4",
          "result": "PASS",
          "reason": "node_id 0_1_4 matches thought position.",
          "timestamp": "2025-05-30T11:20:05.644695",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_4",
            "state": "12 - 5 = 7 (left: 3 7)",
            "thoughts": [
              "3 + 5 = 8 (left: 8 12)",
              "12 - 3 = 9 (left: 5 9)",
              "12 / 3 = 4 (left: 4 5)",
              "5 * 3 = 15 (left: 12 15)",
              "12 - 5 = 7 (left: 3 7)",
              "5 - 3 = 2 (left: 2 12)",
              "3 * 5 = 15 (left: 12 15)",
              "12 + 3 = 15 (left: 5 15)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_5",
          "result": "PASS",
          "reason": "node_id 0_1_5 matches thought position.",
          "timestamp": "2025-05-30T11:20:16.527921",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_5",
            "state": "5 - 3 = 2 (left: 2 12)",
            "thoughts": [
              "3 + 5 = 8 (left: 8 12)",
              "12 - 3 = 9 (left: 5 9)",
              "12 / 3 = 4 (left: 4 5)",
              "5 * 3 = 15 (left: 12 15)",
              "12 - 5 = 7 (left: 3 7)",
              "5 - 3 = 2 (left: 2 12)",
              "3 * 5 = 15 (left: 12 15)",
              "12 + 3 = 15 (left: 5 15)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_5_0",
          "result": "PASS",
          "reason": "node_id 0_1_5_0 matches thought position.",
          "timestamp": "2025-05-30T11:20:34.628409",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_5_0",
            "state": "2 + 12 = 14 (left: 14)",
            "thoughts": [
              "2 + 12 = 14 (left: 14)",
              "12 / 2 = 6 (left: 6)",
              "12 - 2 = 10 (left: 10)",
              "2 * 12 = 24 (left: 24)"
            ]
          }
        },
        {
          "check_name": "child_id_assignment",
          "node_id": "0_1_5_1",
          "result": "PASS",
          "reason": "node_id 0_1_5_1 matches thought position.",
          "timestamp": "2025-05-30T11:20:40.939365",
          "event_type": "validation",
          "details": {
            "node_id": "0_1_5_1",
            "state": "12 / 2 = 6 (left: 6)",
            "thoughts": [
              "2 + 12 = 14 (left: 14)",
              "12 / 2 = 6 (left: 6)",
              "12 - 2 = 10 (left: 10)",
              "2 * 12 = 24 (left: 24)"
            ]
          }
        }
      ]
    },
    "node_state": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "node_state",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T11:16:32.765619",
          "event_type": "validation",
          "details": {
            "expected_state": "3 + 3 = 6 (left: 6 8 12)",
            "actual_state": "3 + 3 = 6 (left: 6 8 12)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T11:17:00.609072",
          "event_type": "validation",
          "details": {
            "expected_state": "3 + 3 = 6 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)",
            "actual_state": "3 + 3 = 6 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_0_1_1",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T11:17:25.653863",
          "event_type": "validation",
          "details": {
            "expected_state": "3 + 3 = 6 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
            "actual_state": "3 + 3 = 6 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T11:19:07.539069",
          "event_type": "validation",
          "details": {
            "expected_state": "8 - 3 = 5 (left: 3 5 12)",
            "actual_state": "8 - 3 = 5 (left: 3 5 12)"
          }
        },
        {
          "check_name": "node_state",
          "node_id": "0_1_5",
          "result": "PASS",
          "reason": "State consistency check passed",
          "timestamp": "2025-05-30T11:20:23.346281",
          "event_type": "validation",
          "details": {
            "expected_state": "8 - 3 = 5 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)",
            "actual_state": "8 - 3 = 5 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)"
          }
        }
      ]
    },
    "pruning": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "pruning",
          "node_id": "0_0_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:16:45.073132",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_1_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:17:09.628075",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_1_1_0",
          "result": "PASS",
          "reason": "Value 0 meets threshold 3.0",
          "timestamp": "2025-05-30T11:17:41.022264",
          "event_type": "validation",
          "details": {
            "value": 0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_1_1_1",
          "result": "PASS",
          "reason": "Value 0 meets threshold 3.0",
          "timestamp": "2025-05-30T11:17:50.331721",
          "event_type": "validation",
          "details": {
            "value": 0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_1_1_2",
          "result": "PASS",
          "reason": "Value 0 meets threshold 3.0",
          "timestamp": "2025-05-30T11:18:01.858032",
          "event_type": "validation",
          "details": {
            "value": 0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_1_1_3",
          "result": "PASS",
          "reason": "Value 0 meets threshold 3.0",
          "timestamp": "2025-05-30T11:18:10.813411",
          "event_type": "validation",
          "details": {
            "value": 0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_1_1_4",
          "result": "PASS",
          "reason": "Value 0 meets threshold 3.0",
          "timestamp": "2025-05-30T11:18:28.040234",
          "event_type": "validation",
          "details": {
            "value": 0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_0_1_1_5",
          "result": "PASS",
          "reason": "Value 0 meets threshold 3.0",
          "timestamp": "2025-05-30T11:18:40.758426",
          "event_type": "validation",
          "details": {
            "value": 0,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:19:22.941502",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_1",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:19:32.407698",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_2",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:19:41.748480",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_3",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:19:52.074230",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_4",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:20:05.644639",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        },
        {
          "check_name": "pruning",
          "node_id": "0_1_5_0",
          "result": "PASS",
          "reason": "Value 0.003 meets threshold 3.0",
          "timestamp": "2025-05-30T11:20:34.628327",
          "event_type": "validation",
          "details": {
            "value": 0.003,
            "threshold": 3.0
          }
        }
      ]
    },
    "backtracking_I": {
      "FAIL": 3,
      "details": [
        {
          "check_name": "backtracking_I",
          "node_id": "0_0_1_1",
          "result": "FAIL",
          "reason": "Complete backtracking validation failed: Expected to backtrack to '0_0_1', but got '0_0'",
          "timestamp": "2025-05-30T11:18:43.097343",
          "event_type": "validation",
          "details": {
            "popped_node": "0_0_1_1",
            "expected_popped": "0_0_1_1",
            "backtrack_to": "0_0",
            "expected_parent": "0_0_1",
            "validation_errors": [
              "Expected to backtrack to '0_0_1', but got '0_0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_1",
          "result": "FAIL",
          "reason": "Complete backtracking validation failed: Expected to pop 0_1_5, but popped 0_1; Expected to backtrack to '0', but got '0_1'",
          "timestamp": "2025-05-30T11:20:49.070971",
          "event_type": "validation",
          "details": {
            "popped_node": "0_1",
            "expected_popped": "0_1_5",
            "backtrack_to": "0_1",
            "expected_parent": "0",
            "validation_errors": [
              "Expected to pop 0_1_5, but popped 0_1",
              "Expected to backtrack to '0', but got '0_1'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_0_1",
          "result": "FAIL",
          "reason": "Complete backtracking validation failed: Expected to pop 0_1, but popped 0_0_1",
          "timestamp": "2025-05-30T11:20:52.534873",
          "event_type": "validation",
          "details": {
            "popped_node": "0_0_1",
            "expected_popped": "0_1",
            "backtrack_to": "0_0",
            "expected_parent": "0_0",
            "validation_errors": [
              "Expected to pop 0_1, but popped 0_0_1"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0_0; Correctly backtracking to parent '0'",
          "timestamp": "2025-05-30T11:20:56.053816",
          "event_type": "validation",
          "details": {
            "popped_node": "0_0",
            "expected_popped": "0_0",
            "backtrack_to": "0",
            "expected_parent": "0",
            "validation_details": [
              "Correctly popped expected node 0_0",
              "Correctly backtracking to parent '0'"
            ]
          }
        },
        {
          "check_name": "backtracking_I",
          "node_id": "0",
          "result": "PASS",
          "reason": "Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
          "timestamp": "2025-05-30T11:20:58.438922",
          "event_type": "validation",
          "details": {
            "popped_node": "0",
            "expected_popped": "0",
            "backtrack_to": "None",
            "expected_parent": "None",
            "validation_details": [
              "Correctly popped expected node 0",
              "Correctly backtracking to parent 'None'"
            ]
          }
        }
      ]
    },
    "backtracking_III": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_III",
          "node_id": "0_0_1_1",
          "result": "PASS",
          "reason": "All 6 children explored - valid backtrack",
          "timestamp": "2025-05-30T11:18:43.097372",
          "event_type": "validation",
          "details": {
            "total_thoughts": 6,
            "evaluated_children": 6
          }
        }
      ]
    },
    "base_case": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "base_case",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Level limit 3 exceeded - valid backtrack",
          "timestamp": "2025-05-30T11:20:49.071011",
          "event_type": "validation",
          "details": {
            "stack_size": 3,
            "level_limit": 3
          }
        }
      ]
    },
    "backtracking_II": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "backtracking_II",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "Correct True flag used in True backtrack mode",
          "timestamp": "2025-05-30T11:20:49.071021",
          "event_type": "validation",
          "details": {
            "flag": "True",
            "true_backtrack_mode": true
          }
        },
        {
          "check_name": "backtracking_II",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "Correct True flag used in True backtrack mode",
          "timestamp": "2025-05-30T11:20:52.534905",
          "event_type": "validation",
          "details": {
            "flag": "True",
            "true_backtrack_mode": true
          }
        },
        {
          "check_name": "backtracking_II",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "Correct True flag used in True backtrack mode",
          "timestamp": "2025-05-30T11:20:56.053856",
          "event_type": "validation",
          "details": {
            "flag": "True",
            "true_backtrack_mode": true
          }
        },
        {
          "check_name": "backtracking_II",
          "node_id": "0",
          "result": "PASS",
          "reason": "Correct True flag used in True backtrack mode",
          "timestamp": "2025-05-30T11:20:58.438973",
          "event_type": "validation",
          "details": {
            "flag": "True",
            "true_backtrack_mode": true
          }
        }
      ]
    },
    "looping_order": {
      "FAIL": 0,
      "details": [
        {
          "check_name": "looping_order",
          "node_id": "0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:20:59.815014",
          "event_type": "validation",
          "details": {
            "state": "3 + 3 = 6 (left: 6 8 12)",
            "thought": "3 + 3 = 6 (left: 6 8 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:20:59.815050",
          "event_type": "validation",
          "details": {
            "state": "8 - 3 = 5 (left: 3 5 12)",
            "thought": "8 - 3 = 5 (left: 3 5 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:20:59.815090",
          "event_type": "validation",
          "details": {
            "state": "6 + 8 = 14 (left: 12 14)",
            "thought": "6 + 8 = 14 (left: 12 14)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:20:59.815102",
          "event_type": "validation",
          "details": {
            "state": "8 - 6 = 2 (left: 2 12)",
            "thought": "8 - 6 = 2 (left: 2 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_1_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:20:59.815139",
          "event_type": "validation",
          "details": {
            "state": "2 + 12 = 14 (left: 14)",
            "thought": "2 + 12 = 14 (left: 14)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_1_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:20:59.815151",
          "event_type": "validation",
          "details": {
            "state": "12 / 2 = 6 (left: 6)",
            "thought": "12 / 2 = 6 (left: 6)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_1_1_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:20:59.815198",
          "event_type": "validation",
          "details": {
            "state": "8 + 6 = 14 (left: 2 8 14)",
            "thought": "8 + 6 = 14 (left: 2 8 14)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_1_1_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:20:59.815209",
          "event_type": "validation",
          "details": {
            "state": "8 - 6 = 2 (left: 2 2 14)",
            "thought": "8 - 6 = 2 (left: 2 2 14)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_1_1_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:20:59.815220",
          "event_type": "validation",
          "details": {
            "state": "14 - 6 = 8 (left: 2 8 8)",
            "thought": "14 - 6 = 8 (left: 2 8 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_1_1_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:20:59.815232",
          "event_type": "validation",
          "details": {
            "state": "2 + 6 = 8 (left: 8 8 8)",
            "thought": "2 + 6 = 8 (left: 8 8 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_1_1_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:20:59.815242",
          "event_type": "validation",
          "details": {
            "state": "14 / 6 = 2.33 (left: 2 2.33 8)",
            "thought": "14 / 6 = 2.33 (left: 2 2.33 8)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_0_1_1_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:20:59.815253",
          "event_type": "validation",
          "details": {
            "state": "6 / 2 = 3 (left: 3 8 14)",
            "thought": "6 / 2 = 3 (left: 3 8 14)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:20:59.815336",
          "event_type": "validation",
          "details": {
            "state": "3 + 5 = 8 (left: 8 12)",
            "thought": "3 + 5 = 8 (left: 8 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:20:59.815347",
          "event_type": "validation",
          "details": {
            "state": "12 - 3 = 9 (left: 5 9)",
            "thought": "12 - 3 = 9 (left: 5 9)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_2",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:20:59.815358",
          "event_type": "validation",
          "details": {
            "state": "12 / 3 = 4 (left: 4 5)",
            "thought": "12 / 3 = 4 (left: 4 5)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_3",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:20:59.815368",
          "event_type": "validation",
          "details": {
            "state": "5 * 3 = 15 (left: 12 15)",
            "thought": "5 * 3 = 15 (left: 12 15)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_4",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:20:59.815380",
          "event_type": "validation",
          "details": {
            "state": "12 - 5 = 7 (left: 3 7)",
            "thought": "12 - 5 = 7 (left: 3 7)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_5",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:20:59.815390",
          "event_type": "validation",
          "details": {
            "state": "5 - 3 = 2 (left: 2 12)",
            "thought": "5 - 3 = 2 (left: 2 12)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_5_0",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:20:59.815463",
          "event_type": "validation",
          "details": {
            "state": "2 + 12 = 14 (left: 14)",
            "thought": "2 + 12 = 14 (left: 14)"
          }
        },
        {
          "check_name": "looping_order",
          "node_id": "0_1_5_1",
          "result": "PASS",
          "reason": "State matches expected thought",
          "timestamp": "2025-05-30T11:20:59.815477",
          "event_type": "validation",
          "details": {
            "state": "12 / 2 = 6 (left: 6)",
            "thought": "12 / 2 = 6 (left: 6)"
          }
        }
      ]
    },
    "final_answer": {
      "FAIL": 1,
      "details": [
        {
          "check_name": "final_answer",
          "node_id": "final",
          "result": "FAIL",
          "reason": "Result 2 does not match expected answer 24.0",
          "timestamp": "2025-05-30T11:20:59.815619",
          "event_type": "validation",
          "details": {
            "result": 2,
            "expected": 24.0,
            "difference": 22.0
          }
        }
      ]
    },
    "valid_search_trace": {
      "success_trace": false
    }
  },
  "detailed_results": [
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "Value 41.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T11:16:25.082468",
      "event_type": "validation",
      "details": {
        "value": 41.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State validation passed: Last thought '3 + 3 = 6 (left: 6 8 12)' found in parent's thoughts",
      "timestamp": "2025-05-30T11:16:25.082529",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '3 + 3 = 6 (left: 6 8 12)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "3 + 3 = 6 (left: 6 8 12)",
          "8 - 3 = 5 (left: 3 5 12)",
          "12 / 3 = 4 (left: 3 4 8)",
          "12 - 3 = 9 (left: 3 8 9)",
          "3 * 3 = 9 (left: 8 9 12)",
          "8 * 3 = 24 (left: 3 12 24)",
          "12 + 3 = 15 (left: 3 8 15)",
          "8 + 3 = 11 (left: 3 11 12)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "node_id 0_0 matches thought position.",
      "timestamp": "2025-05-30T11:16:25.082693",
      "event_type": "validation",
      "details": {
        "node_id": "0_0",
        "state": "3 + 3 = 6 (left: 6 8 12)",
        "thoughts": [
          "3 + 3 = 6 (left: 6 8 12)",
          "8 - 3 = 5 (left: 3 5 12)",
          "12 / 3 = 4 (left: 3 4 8)",
          "12 - 3 = 9 (left: 3 8 9)",
          "3 * 3 = 9 (left: 8 9 12)",
          "8 * 3 = 24 (left: 3 12 24)",
          "12 + 3 = 15 (left: 3 8 15)",
          "8 + 3 = 11 (left: 3 11 12)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T11:16:32.765619",
      "event_type": "validation",
      "details": {
        "expected_state": "3 + 3 = 6 (left: 6 8 12)",
        "actual_state": "3 + 3 = 6 (left: 6 8 12)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:16:45.073132",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_0",
      "result": "PASS",
      "reason": "node_id 0_0_0 matches thought position.",
      "timestamp": "2025-05-30T11:16:45.073220",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_0",
        "state": "6 + 8 = 14 (left: 12 14)",
        "thoughts": [
          "6 + 8 = 14 (left: 12 14)",
          "8 - 6 = 2 (left: 2 12)",
          "12 - 6 = 6 (left: 6 8)",
          "12 / 6 = 2 (left: 2 8)",
          "12 - 8 = 4 (left: 4 6)",
          "8 * 6 = 48 (left: 12 48)",
          "12 + 6 = 18 (left: 8 18)"
        ]
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "Value 60.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T11:16:52.509500",
      "event_type": "validation",
      "details": {
        "value": 60.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "State validation passed: Last thought '8 - 6 = 2 (left: 2 12)' found in parent's thoughts; Previous thought '3 + 3 = 6 (left: 6 8 12)' found in parent's state",
      "timestamp": "2025-05-30T11:16:52.509559",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '8 - 6 = 2 (left: 2 12)' found in parent's thoughts",
          "Previous thought '3 + 3 = 6 (left: 6 8 12)' found in parent's state"
        ],
        "parent_thoughts": [
          "6 + 8 = 14 (left: 12 14)",
          "8 - 6 = 2 (left: 2 12)",
          "12 - 6 = 6 (left: 6 8)",
          "12 / 6 = 2 (left: 2 8)",
          "12 - 8 = 4 (left: 4 6)",
          "8 * 6 = 48 (left: 12 48)",
          "12 + 6 = 18 (left: 8 18)"
        ],
        "parent_state": [
          "3 + 3 = 6 (left: 6 8 12)"
        ]
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "node_id 0_0_1 matches thought position.",
      "timestamp": "2025-05-30T11:16:52.509602",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_1",
        "state": "8 - 6 = 2 (left: 2 12)",
        "thoughts": [
          "6 + 8 = 14 (left: 12 14)",
          "8 - 6 = 2 (left: 2 12)",
          "12 - 6 = 6 (left: 6 8)",
          "12 / 6 = 2 (left: 2 8)",
          "12 - 8 = 4 (left: 4 6)",
          "8 * 6 = 48 (left: 12 48)",
          "12 + 6 = 18 (left: 8 18)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T11:17:00.609072",
      "event_type": "validation",
      "details": {
        "expected_state": "3 + 3 = 6 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)",
        "actual_state": "3 + 3 = 6 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_1_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:17:09.628075",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_1_0",
      "result": "PASS",
      "reason": "node_id 0_0_1_0 matches thought position.",
      "timestamp": "2025-05-30T11:17:09.628159",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_1_0",
        "state": "2 + 12 = 14 (left: 14)",
        "thoughts": [
          "2 + 12 = 14 (left: 14)",
          "12 / 2 = 6 (left: 6)",
          "12 - 2 = 10 (left: 10)",
          "2 * 12 = 24 (left: 24)"
        ]
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_0_1_1",
      "result": "PASS",
      "reason": "Value 20.002 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T11:17:16.475494",
      "event_type": "validation",
      "details": {
        "value": 20.002,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_0_1_1",
      "result": "PASS",
      "reason": "State validation passed: Last thought '12 / 2 = 6 (left: 6)' found in parent's thoughts; Previous thought '3 + 3 = 6 (left: 6 8 12)' found in parent's state; Previous thought '8 - 6 = 2 (left: 2 12)' found in parent's state",
      "timestamp": "2025-05-30T11:17:16.475554",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '12 / 2 = 6 (left: 6)' found in parent's thoughts",
          "Previous thought '3 + 3 = 6 (left: 6 8 12)' found in parent's state",
          "Previous thought '8 - 6 = 2 (left: 2 12)' found in parent's state"
        ],
        "parent_thoughts": [
          "2 + 12 = 14 (left: 14)",
          "12 / 2 = 6 (left: 6)",
          "12 - 2 = 10 (left: 10)",
          "2 * 12 = 24 (left: 24)"
        ],
        "parent_state": [
          "3 + 3 = 6 (left: 6 8 12)",
          "8 - 6 = 2 (left: 2 12)"
        ]
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_1_1",
      "result": "PASS",
      "reason": "node_id 0_0_1_1 matches thought position.",
      "timestamp": "2025-05-30T11:17:16.475597",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_1_1",
        "state": "12 / 2 = 6 (left: 6)",
        "thoughts": [
          "2 + 12 = 14 (left: 14)",
          "12 / 2 = 6 (left: 6)",
          "12 - 2 = 10 (left: 10)",
          "2 * 12 = 24 (left: 24)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_0_1_1",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T11:17:25.653863",
      "event_type": "validation",
      "details": {
        "expected_state": "3 + 3 = 6 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
        "actual_state": "3 + 3 = 6 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_1_1_0",
      "result": "PASS",
      "reason": "Value 0 meets threshold 3.0",
      "timestamp": "2025-05-30T11:17:41.022264",
      "event_type": "validation",
      "details": {
        "value": 0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_1_1_0",
      "result": "PASS",
      "reason": "node_id 0_0_1_1_0 matches thought position.",
      "timestamp": "2025-05-30T11:17:41.022354",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_1_1_0",
        "state": "8 + 6 = 14 (left: 2 8 14)",
        "thoughts": [
          "8 + 6 = 14 (left: 2 8 14)",
          "8 - 6 = 2 (left: 2 2 14)",
          "14 - 6 = 8 (left: 2 8 8)",
          "2 + 6 = 8 (left: 8 8 8)",
          "14 / 6 = 2.33 (left: 2 2.33 8)",
          "6 / 2 = 3 (left: 3 8 14)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_1_1_1",
      "result": "PASS",
      "reason": "Value 0 meets threshold 3.0",
      "timestamp": "2025-05-30T11:17:50.331721",
      "event_type": "validation",
      "details": {
        "value": 0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_1_1_1",
      "result": "PASS",
      "reason": "node_id 0_0_1_1_1 matches thought position.",
      "timestamp": "2025-05-30T11:17:50.331819",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_1_1_1",
        "state": "8 - 6 = 2 (left: 2 2 14)",
        "thoughts": [
          "8 + 6 = 14 (left: 2 8 14)",
          "8 - 6 = 2 (left: 2 2 14)",
          "14 - 6 = 8 (left: 2 8 8)",
          "2 + 6 = 8 (left: 8 8 8)",
          "14 / 6 = 2.33 (left: 2 2.33 8)",
          "6 / 2 = 3 (left: 3 8 14)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_1_1_2",
      "result": "PASS",
      "reason": "Value 0 meets threshold 3.0",
      "timestamp": "2025-05-30T11:18:01.858032",
      "event_type": "validation",
      "details": {
        "value": 0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_1_1_2",
      "result": "PASS",
      "reason": "node_id 0_0_1_1_2 matches thought position.",
      "timestamp": "2025-05-30T11:18:01.858116",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_1_1_2",
        "state": "14 - 6 = 8 (left: 2 8 8)",
        "thoughts": [
          "8 + 6 = 14 (left: 2 8 14)",
          "8 - 6 = 2 (left: 2 2 14)",
          "14 - 6 = 8 (left: 2 8 8)",
          "2 + 6 = 8 (left: 8 8 8)",
          "14 / 6 = 2.33 (left: 2 2.33 8)",
          "6 / 2 = 3 (left: 3 8 14)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_1_1_3",
      "result": "PASS",
      "reason": "Value 0 meets threshold 3.0",
      "timestamp": "2025-05-30T11:18:10.813411",
      "event_type": "validation",
      "details": {
        "value": 0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_1_1_3",
      "result": "PASS",
      "reason": "node_id 0_0_1_1_3 matches thought position.",
      "timestamp": "2025-05-30T11:18:10.813499",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_1_1_3",
        "state": "2 + 6 = 8 (left: 8 8 8)",
        "thoughts": [
          "8 + 6 = 14 (left: 2 8 14)",
          "8 - 6 = 2 (left: 2 2 14)",
          "14 - 6 = 8 (left: 2 8 8)",
          "2 + 6 = 8 (left: 8 8 8)",
          "14 / 6 = 2.33 (left: 2 2.33 8)",
          "6 / 2 = 3 (left: 3 8 14)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_1_1_4",
      "result": "PASS",
      "reason": "Value 0 meets threshold 3.0",
      "timestamp": "2025-05-30T11:18:28.040234",
      "event_type": "validation",
      "details": {
        "value": 0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_1_1_4",
      "result": "PASS",
      "reason": "node_id 0_0_1_1_4 matches thought position.",
      "timestamp": "2025-05-30T11:18:28.040331",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_1_1_4",
        "state": "14 / 6 = 2.33 (left: 2 2.33 8)",
        "thoughts": [
          "8 + 6 = 14 (left: 2 8 14)",
          "8 - 6 = 2 (left: 2 2 14)",
          "14 - 6 = 8 (left: 2 8 8)",
          "2 + 6 = 8 (left: 8 8 8)",
          "14 / 6 = 2.33 (left: 2 2.33 8)",
          "6 / 2 = 3 (left: 3 8 14)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_0_1_1_5",
      "result": "PASS",
      "reason": "Value 0 meets threshold 3.0",
      "timestamp": "2025-05-30T11:18:40.758426",
      "event_type": "validation",
      "details": {
        "value": 0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_0_1_1_5",
      "result": "PASS",
      "reason": "node_id 0_0_1_1_5 matches thought position.",
      "timestamp": "2025-05-30T11:18:40.758513",
      "event_type": "validation",
      "details": {
        "node_id": "0_0_1_1_5",
        "state": "6 / 2 = 3 (left: 3 8 14)",
        "thoughts": [
          "8 + 6 = 14 (left: 2 8 14)",
          "8 - 6 = 2 (left: 2 2 14)",
          "14 - 6 = 8 (left: 2 8 8)",
          "2 + 6 = 8 (left: 8 8 8)",
          "14 / 6 = 2.33 (left: 2 2.33 8)",
          "6 / 2 = 3 (left: 3 8 14)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_0_1_1",
      "result": "FAIL",
      "reason": "Complete backtracking validation failed: Expected to backtrack to '0_0_1', but got '0_0'",
      "timestamp": "2025-05-30T11:18:43.097343",
      "event_type": "validation",
      "details": {
        "popped_node": "0_0_1_1",
        "expected_popped": "0_0_1_1",
        "backtrack_to": "0_0",
        "expected_parent": "0_0_1",
        "validation_errors": [
          "Expected to backtrack to '0_0_1', but got '0_0'"
        ]
      }
    },
    {
      "check_name": "backtracking_III",
      "node_id": "0_0_1_1",
      "result": "PASS",
      "reason": "All 6 children explored - valid backtrack",
      "timestamp": "2025-05-30T11:18:43.097372",
      "event_type": "validation",
      "details": {
        "total_thoughts": 6,
        "evaluated_children": 6
      }
    },
    {
      "check_name": "pseudo_recursive_call",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Value 3.0 more than or equal to threshold 3.0",
      "timestamp": "2025-05-30T11:18:53.437031",
      "event_type": "validation",
      "details": {
        "value": 3.0,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_state",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State validation passed: Last thought '8 - 3 = 5 (left: 3 5 12)' found in parent's thoughts",
      "timestamp": "2025-05-30T11:18:53.437095",
      "event_type": "validation",
      "details": {
        "validation_success": [
          "Last thought '8 - 3 = 5 (left: 3 5 12)' found in parent's thoughts"
        ],
        "parent_thoughts": [
          "3 + 3 = 6 (left: 6 8 12)",
          "8 - 3 = 5 (left: 3 5 12)",
          "12 / 3 = 4 (left: 3 4 8)",
          "12 - 3 = 9 (left: 3 8 9)",
          "3 * 3 = 9 (left: 8 9 12)",
          "8 * 3 = 24 (left: 3 12 24)",
          "12 + 3 = 15 (left: 3 8 15)",
          "8 + 3 = 11 (left: 3 11 12)"
        ],
        "parent_state": null
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "node_id 0_1 matches thought position.",
      "timestamp": "2025-05-30T11:18:53.437179",
      "event_type": "validation",
      "details": {
        "node_id": "0_1",
        "state": "8 - 3 = 5 (left: 3 5 12)",
        "thoughts": [
          "3 + 3 = 6 (left: 6 8 12)",
          "8 - 3 = 5 (left: 3 5 12)",
          "12 / 3 = 4 (left: 3 4 8)",
          "12 - 3 = 9 (left: 3 8 9)",
          "3 * 3 = 9 (left: 8 9 12)",
          "8 * 3 = 24 (left: 3 12 24)",
          "12 + 3 = 15 (left: 3 8 15)",
          "8 + 3 = 11 (left: 3 11 12)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T11:19:07.539069",
      "event_type": "validation",
      "details": {
        "expected_state": "8 - 3 = 5 (left: 3 5 12)",
        "actual_state": "8 - 3 = 5 (left: 3 5 12)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:19:22.941502",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "node_id 0_1_0 matches thought position.",
      "timestamp": "2025-05-30T11:19:22.941565",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_0",
        "state": "3 + 5 = 8 (left: 8 12)",
        "thoughts": [
          "3 + 5 = 8 (left: 8 12)",
          "12 - 3 = 9 (left: 5 9)",
          "12 / 3 = 4 (left: 4 5)",
          "5 * 3 = 15 (left: 12 15)",
          "12 - 5 = 7 (left: 3 7)",
          "5 - 3 = 2 (left: 2 12)",
          "3 * 5 = 15 (left: 12 15)",
          "12 + 3 = 15 (left: 5 15)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_1",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:19:32.407698",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_1",
      "result": "PASS",
      "reason": "node_id 0_1_1 matches thought position.",
      "timestamp": "2025-05-30T11:19:32.407764",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_1",
        "state": "12 - 3 = 9 (left: 5 9)",
        "thoughts": [
          "3 + 5 = 8 (left: 8 12)",
          "12 - 3 = 9 (left: 5 9)",
          "12 / 3 = 4 (left: 4 5)",
          "5 * 3 = 15 (left: 12 15)",
          "12 - 5 = 7 (left: 3 7)",
          "5 - 3 = 2 (left: 2 12)",
          "3 * 5 = 15 (left: 12 15)",
          "12 + 3 = 15 (left: 5 15)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_2",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:19:41.748480",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_2",
      "result": "PASS",
      "reason": "node_id 0_1_2 matches thought position.",
      "timestamp": "2025-05-30T11:19:41.748550",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_2",
        "state": "12 / 3 = 4 (left: 4 5)",
        "thoughts": [
          "3 + 5 = 8 (left: 8 12)",
          "12 - 3 = 9 (left: 5 9)",
          "12 / 3 = 4 (left: 4 5)",
          "5 * 3 = 15 (left: 12 15)",
          "12 - 5 = 7 (left: 3 7)",
          "5 - 3 = 2 (left: 2 12)",
          "3 * 5 = 15 (left: 12 15)",
          "12 + 3 = 15 (left: 5 15)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_3",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:19:52.074230",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_3",
      "result": "PASS",
      "reason": "node_id 0_1_3 matches thought position.",
      "timestamp": "2025-05-30T11:19:52.074297",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_3",
        "state": "5 * 3 = 15 (left: 12 15)",
        "thoughts": [
          "3 + 5 = 8 (left: 8 12)",
          "12 - 3 = 9 (left: 5 9)",
          "12 / 3 = 4 (left: 4 5)",
          "5 * 3 = 15 (left: 12 15)",
          "12 - 5 = 7 (left: 3 7)",
          "5 - 3 = 2 (left: 2 12)",
          "3 * 5 = 15 (left: 12 15)",
          "12 + 3 = 15 (left: 5 15)"
        ]
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_4",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:20:05.644639",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_4",
      "result": "PASS",
      "reason": "node_id 0_1_4 matches thought position.",
      "timestamp": "2025-05-30T11:20:05.644695",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_4",
        "state": "12 - 5 = 7 (left: 3 7)",
        "thoughts": [
          "3 + 5 = 8 (left: 8 12)",
          "12 - 3 = 9 (left: 5 9)",
          "12 / 3 = 4 (left: 4 5)",
          "5 * 3 = 15 (left: 12 15)",
          "12 - 5 = 7 (left: 3 7)",
          "5 - 3 = 2 (left: 2 12)",
          "3 * 5 = 15 (left: 12 15)",
          "12 + 3 = 15 (left: 5 15)"
        ]
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_5",
      "result": "PASS",
      "reason": "node_id 0_1_5 matches thought position.",
      "timestamp": "2025-05-30T11:20:16.527921",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_5",
        "state": "5 - 3 = 2 (left: 2 12)",
        "thoughts": [
          "3 + 5 = 8 (left: 8 12)",
          "12 - 3 = 9 (left: 5 9)",
          "12 / 3 = 4 (left: 4 5)",
          "5 * 3 = 15 (left: 12 15)",
          "12 - 5 = 7 (left: 3 7)",
          "5 - 3 = 2 (left: 2 12)",
          "3 * 5 = 15 (left: 12 15)",
          "12 + 3 = 15 (left: 5 15)"
        ]
      }
    },
    {
      "check_name": "node_state",
      "node_id": "0_1_5",
      "result": "PASS",
      "reason": "State consistency check passed",
      "timestamp": "2025-05-30T11:20:23.346281",
      "event_type": "validation",
      "details": {
        "expected_state": "8 - 3 = 5 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)",
        "actual_state": "8 - 3 = 5 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)"
      }
    },
    {
      "check_name": "pruning",
      "node_id": "0_1_5_0",
      "result": "PASS",
      "reason": "Value 0.003 meets threshold 3.0",
      "timestamp": "2025-05-30T11:20:34.628327",
      "event_type": "validation",
      "details": {
        "value": 0.003,
        "threshold": 3.0
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_5_0",
      "result": "PASS",
      "reason": "node_id 0_1_5_0 matches thought position.",
      "timestamp": "2025-05-30T11:20:34.628409",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_5_0",
        "state": "2 + 12 = 14 (left: 14)",
        "thoughts": [
          "2 + 12 = 14 (left: 14)",
          "12 / 2 = 6 (left: 6)",
          "12 - 2 = 10 (left: 10)",
          "2 * 12 = 24 (left: 24)"
        ]
      }
    },
    {
      "check_name": "child_id_assignment",
      "node_id": "0_1_5_1",
      "result": "PASS",
      "reason": "node_id 0_1_5_1 matches thought position.",
      "timestamp": "2025-05-30T11:20:40.939365",
      "event_type": "validation",
      "details": {
        "node_id": "0_1_5_1",
        "state": "12 / 2 = 6 (left: 6)",
        "thoughts": [
          "2 + 12 = 14 (left: 14)",
          "12 / 2 = 6 (left: 6)",
          "12 - 2 = 10 (left: 10)",
          "2 * 12 = 24 (left: 24)"
        ]
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_1",
      "result": "FAIL",
      "reason": "Complete backtracking validation failed: Expected to pop 0_1_5, but popped 0_1; Expected to backtrack to '0', but got '0_1'",
      "timestamp": "2025-05-30T11:20:49.070971",
      "event_type": "validation",
      "details": {
        "popped_node": "0_1",
        "expected_popped": "0_1_5",
        "backtrack_to": "0_1",
        "expected_parent": "0",
        "validation_errors": [
          "Expected to pop 0_1_5, but popped 0_1",
          "Expected to backtrack to '0', but got '0_1'"
        ]
      }
    },
    {
      "check_name": "base_case",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Level limit 3 exceeded - valid backtrack",
      "timestamp": "2025-05-30T11:20:49.071011",
      "event_type": "validation",
      "details": {
        "stack_size": 3,
        "level_limit": 3
      }
    },
    {
      "check_name": "backtracking_II",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "Correct True flag used in True backtrack mode",
      "timestamp": "2025-05-30T11:20:49.071021",
      "event_type": "validation",
      "details": {
        "flag": "True",
        "true_backtrack_mode": true
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_0_1",
      "result": "FAIL",
      "reason": "Complete backtracking validation failed: Expected to pop 0_1, but popped 0_0_1",
      "timestamp": "2025-05-30T11:20:52.534873",
      "event_type": "validation",
      "details": {
        "popped_node": "0_0_1",
        "expected_popped": "0_1",
        "backtrack_to": "0_0",
        "expected_parent": "0_0",
        "validation_errors": [
          "Expected to pop 0_1, but popped 0_0_1"
        ]
      }
    },
    {
      "check_name": "backtracking_II",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "Correct True flag used in True backtrack mode",
      "timestamp": "2025-05-30T11:20:52.534905",
      "event_type": "validation",
      "details": {
        "flag": "True",
        "true_backtrack_mode": true
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0_0; Correctly backtracking to parent '0'",
      "timestamp": "2025-05-30T11:20:56.053816",
      "event_type": "validation",
      "details": {
        "popped_node": "0_0",
        "expected_popped": "0_0",
        "backtrack_to": "0",
        "expected_parent": "0",
        "validation_details": [
          "Correctly popped expected node 0_0",
          "Correctly backtracking to parent '0'"
        ]
      }
    },
    {
      "check_name": "backtracking_II",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "Correct True flag used in True backtrack mode",
      "timestamp": "2025-05-30T11:20:56.053856",
      "event_type": "validation",
      "details": {
        "flag": "True",
        "true_backtrack_mode": true
      }
    },
    {
      "check_name": "backtracking_I",
      "node_id": "0",
      "result": "PASS",
      "reason": "Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
      "timestamp": "2025-05-30T11:20:58.438922",
      "event_type": "validation",
      "details": {
        "popped_node": "0",
        "expected_popped": "0",
        "backtrack_to": "None",
        "expected_parent": "None",
        "validation_details": [
          "Correctly popped expected node 0",
          "Correctly backtracking to parent 'None'"
        ]
      }
    },
    {
      "check_name": "backtracking_II",
      "node_id": "0",
      "result": "PASS",
      "reason": "Correct True flag used in True backtrack mode",
      "timestamp": "2025-05-30T11:20:58.438973",
      "event_type": "validation",
      "details": {
        "flag": "True",
        "true_backtrack_mode": true
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:20:59.815014",
      "event_type": "validation",
      "details": {
        "state": "3 + 3 = 6 (left: 6 8 12)",
        "thought": "3 + 3 = 6 (left: 6 8 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:20:59.815050",
      "event_type": "validation",
      "details": {
        "state": "8 - 3 = 5 (left: 3 5 12)",
        "thought": "8 - 3 = 5 (left: 3 5 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:20:59.815090",
      "event_type": "validation",
      "details": {
        "state": "6 + 8 = 14 (left: 12 14)",
        "thought": "6 + 8 = 14 (left: 12 14)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:20:59.815102",
      "event_type": "validation",
      "details": {
        "state": "8 - 6 = 2 (left: 2 12)",
        "thought": "8 - 6 = 2 (left: 2 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_1_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:20:59.815139",
      "event_type": "validation",
      "details": {
        "state": "2 + 12 = 14 (left: 14)",
        "thought": "2 + 12 = 14 (left: 14)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_1_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:20:59.815151",
      "event_type": "validation",
      "details": {
        "state": "12 / 2 = 6 (left: 6)",
        "thought": "12 / 2 = 6 (left: 6)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_1_1_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:20:59.815198",
      "event_type": "validation",
      "details": {
        "state": "8 + 6 = 14 (left: 2 8 14)",
        "thought": "8 + 6 = 14 (left: 2 8 14)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_1_1_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:20:59.815209",
      "event_type": "validation",
      "details": {
        "state": "8 - 6 = 2 (left: 2 2 14)",
        "thought": "8 - 6 = 2 (left: 2 2 14)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_1_1_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:20:59.815220",
      "event_type": "validation",
      "details": {
        "state": "14 - 6 = 8 (left: 2 8 8)",
        "thought": "14 - 6 = 8 (left: 2 8 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_1_1_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:20:59.815232",
      "event_type": "validation",
      "details": {
        "state": "2 + 6 = 8 (left: 8 8 8)",
        "thought": "2 + 6 = 8 (left: 8 8 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_1_1_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:20:59.815242",
      "event_type": "validation",
      "details": {
        "state": "14 / 6 = 2.33 (left: 2 2.33 8)",
        "thought": "14 / 6 = 2.33 (left: 2 2.33 8)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_0_1_1_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:20:59.815253",
      "event_type": "validation",
      "details": {
        "state": "6 / 2 = 3 (left: 3 8 14)",
        "thought": "6 / 2 = 3 (left: 3 8 14)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:20:59.815336",
      "event_type": "validation",
      "details": {
        "state": "3 + 5 = 8 (left: 8 12)",
        "thought": "3 + 5 = 8 (left: 8 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:20:59.815347",
      "event_type": "validation",
      "details": {
        "state": "12 - 3 = 9 (left: 5 9)",
        "thought": "12 - 3 = 9 (left: 5 9)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_2",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:20:59.815358",
      "event_type": "validation",
      "details": {
        "state": "12 / 3 = 4 (left: 4 5)",
        "thought": "12 / 3 = 4 (left: 4 5)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_3",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:20:59.815368",
      "event_type": "validation",
      "details": {
        "state": "5 * 3 = 15 (left: 12 15)",
        "thought": "5 * 3 = 15 (left: 12 15)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_4",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:20:59.815380",
      "event_type": "validation",
      "details": {
        "state": "12 - 5 = 7 (left: 3 7)",
        "thought": "12 - 5 = 7 (left: 3 7)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_5",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:20:59.815390",
      "event_type": "validation",
      "details": {
        "state": "5 - 3 = 2 (left: 2 12)",
        "thought": "5 - 3 = 2 (left: 2 12)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_5_0",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:20:59.815463",
      "event_type": "validation",
      "details": {
        "state": "2 + 12 = 14 (left: 14)",
        "thought": "2 + 12 = 14 (left: 14)"
      }
    },
    {
      "check_name": "looping_order",
      "node_id": "0_1_5_1",
      "result": "PASS",
      "reason": "State matches expected thought",
      "timestamp": "2025-05-30T11:20:59.815477",
      "event_type": "validation",
      "details": {
        "state": "12 / 2 = 6 (left: 6)",
        "thought": "12 / 2 = 6 (left: 6)"
      }
    },
    {
      "check_name": "final_answer",
      "node_id": "final",
      "result": "FAIL",
      "reason": "Result 2 does not match expected answer 24.0",
      "timestamp": "2025-05-30T11:20:59.815619",
      "event_type": "validation",
      "details": {
        "result": 2,
        "expected": 24.0,
        "difference": 22.0
      }
    }
  ],
  "legacy_log": [
    {
      "event": "push",
      "node_id": "0",
      "issues": [],
      "log": []
    },
    {
      "event": "push",
      "node_id": "0_0",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_0 with value 41.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '3 + 3 = 6 (left: 6 8 12)' found in parent's thoughts",
        "\u2705 Node 0_0 matches thought position.",
        "\u2705 State consistency check passed for node 0_0"
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_1",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_0_1 with value 60.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '8 - 6 = 2 (left: 2 12)' found in parent's thoughts; Previous thought '3 + 3 = 6 (left: 6 8 12)' found in parent's state",
        "\u2705 Node 0_0_1 matches thought position.",
        "\u2705 State consistency check passed for node 0_0_1"
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_1_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_1_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_1_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_1_1",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_0_1_1 with value 20.002 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '12 / 2 = 6 (left: 6)' found in parent's thoughts; Previous thought '3 + 3 = 6 (left: 6 8 12)' found in parent's state; Previous thought '8 - 6 = 2 (left: 2 12)' found in parent's state",
        "\u2705 Node 0_0_1_1 matches thought position.",
        "\u2705 State consistency check passed for node 0_0_1_1"
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_1_1_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_1_1_0 with value 0 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_1_1_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_1_1_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_1_1_1 with value 0 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_1_1_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_1_1_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_1_1_2 with value 0 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_1_1_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_1_1_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_1_1_3 with value 0 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_1_1_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_1_1_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_1_1_4 with value 0 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_1_1_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_0_1_1_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_0_1_1_5 with value 0 less than 3.0 pruned successfully.",
        "\u2705 Node 0_0_1_1_5 matches thought position."
      ]
    },
    {
      "event": "pop",
      "node_id": "",
      "issues": [
        "Backtrack parent error: Expected to backtrack to '0_0_1', but got '0_0'.",
        "Complete backtracking validation failed: Expected to backtrack to '0_0_1', but got '0_0'",
        "Pop error: Expected to pop 0_1_5, but popped 0_1.",
        "Backtrack parent error: Expected to backtrack to '0', but got '0_1'.",
        "Complete backtracking validation failed: Expected to pop 0_1_5, but popped 0_1; Expected to backtrack to '0', but got '0_1'",
        "Pop error: Expected to pop 0_1, but popped 0_0_1.",
        "Complete backtracking validation failed: Expected to pop 0_1, but popped 0_0_1"
      ],
      "log": [
        "\u2705 Popped 0_0_1_1 successfully.",
        "\u2705 All children of node 0_0_1_1 were explored \u2014 valid reason for backtracking.",
        "\u2705 Level limit exceeded \u2014 valid reason for backtracking.",
        "\u2705 Subsequent backtrack validation: correctly using True flag in Subsequent mode for 0_1.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0_0'.",
        "\u2705 Subsequent backtrack validation: correctly using True flag in Subsequent mode for 0_0_1.",
        "\u2705 Popped 0_0 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to '0'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0_0; Correctly backtracking to parent '0'",
        "\u2705 Subsequent backtrack validation: correctly using True flag in Subsequent mode for 0_0.",
        "\u2705 Popped 0 successfully.",
        "\u2705 Backtrack parent validation passed: correctly backtracking to 'None'.",
        "\u2705 Complete backtracking validation passed: Correctly popped expected node 0; Correctly backtracking to parent 'None'",
        "\u2705 Subsequent backtrack validation: correctly using True flag in Subsequent mode for 0."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1",
      "issues": [],
      "log": [
        "\u2705 Recursive call happened correctly: node 0_1 with value 3.0 more than or equal to 3.0 should be traversed.",
        "\u2705 State validation passed: Last thought '8 - 3 = 5 (left: 3 5 12)' found in parent's thoughts",
        "\u2705 Node 0_1 matches thought position.",
        "\u2705 State consistency check passed for node 0_1"
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_1 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_1 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_2",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_2 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_2 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_3",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_3 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_3 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_4",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_4 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_4 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_5",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_5 matches thought position.",
        "\u2705 State consistency check passed for node 0_1_5"
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_5_0",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_5_0 with value 0.003 less than 3.0 pruned successfully.",
        "\u2705 Node 0_1_5_0 matches thought position."
      ]
    },
    {
      "event": "push",
      "node_id": "0_1_5_1",
      "issues": [],
      "log": [
        "\u2705 Node 0_1_5_1 matches thought position."
      ]
    }
  ],
  "tree_trace": {
    "0": {
      "state": null,
      "thought": "3 + 3 = 6 (left: 6 8 12)\n8 - 3 = 5 (left: 3 5 12)\n12 / 3 = 4 (left: 3 4 8)\n12 - 3 = 9 (left: 3 8 9)\n3 * 3 = 9 (left: 8 9 12)\n8 * 3 = 24 (left: 3 12 24)\n12 + 3 = 15 (left: 3 8 15)\n8 + 3 = 11 (left: 3 11 12)",
      "value": null,
      "opening_remark": null,
      "children": {
        "0_0": {
          "state": "3 + 3 = 6 (left: 6 8 12)",
          "thought": "6 + 8 = 14 (left: 12 14)\n8 - 6 = 2 (left: 2 12)\n12 - 6 = 6 (left: 6 8)\n12 / 6 = 2 (left: 2 8)\n12 - 8 = 4 (left: 4 6)\n8 * 6 = 48 (left: 12 48)\n12 + 6 = 18 (left: 8 18)",
          "value": 41.0,
          "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
          "children": {
            "0_0_0": {
              "state": "3 + 3 = 6 (left: 6 8 12)\n6 + 8 = 14 (left: 12 14)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_0_1": {
              "state": "3 + 3 = 6 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)",
              "thought": "2 + 12 = 14 (left: 14)\n12 / 2 = 6 (left: 6)\n12 - 2 = 10 (left: 10)\n2 * 12 = 24 (left: 24)",
              "value": 60.0,
              "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
              "children": {
                "0_0_1_0": {
                  "state": "3 + 3 = 6 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                  "thought": null,
                  "value": 0.003,
                  "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                  "children": {},
                  "closing_remark": null,
                  "backtracked": false
                },
                "0_0_1_1": {
                  "state": "3 + 3 = 6 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                  "thought": "8 + 6 = 14 (left: 2 8 14)\n8 - 6 = 2 (left: 2 2 14)\n14 - 6 = 8 (left: 2 8 8)\n2 + 6 = 8 (left: 8 8 8)\n14 / 6 = 2.33 (left: 2 2.33 8)\n6 / 2 = 3 (left: 3 8 14)",
                  "value": 20.002,
                  "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
                  "children": {
                    "0_0_1_1_0": {
                      "state": "3 + 3 = 6 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\n8 + 6 = 14 (left: 2 8 14)",
                      "thought": null,
                      "value": 0,
                      "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                      "children": {},
                      "closing_remark": null,
                      "backtracked": false
                    },
                    "0_0_1_1_1": {
                      "state": "3 + 3 = 6 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\n8 - 6 = 2 (left: 2 2 14)",
                      "thought": null,
                      "value": 0,
                      "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                      "children": {},
                      "closing_remark": null,
                      "backtracked": false
                    },
                    "0_0_1_1_2": {
                      "state": "3 + 3 = 6 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\n14 - 6 = 8 (left: 2 8 8)",
                      "thought": null,
                      "value": 0,
                      "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                      "children": {},
                      "closing_remark": null,
                      "backtracked": false
                    },
                    "0_0_1_1_3": {
                      "state": "3 + 3 = 6 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\n2 + 6 = 8 (left: 8 8 8)",
                      "thought": null,
                      "value": 0,
                      "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                      "children": {},
                      "closing_remark": null,
                      "backtracked": false
                    },
                    "0_0_1_1_4": {
                      "state": "3 + 3 = 6 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\n14 / 6 = 2.33 (left: 2 2.33 8)",
                      "thought": null,
                      "value": 0,
                      "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                      "children": {},
                      "closing_remark": null,
                      "backtracked": false
                    },
                    "0_0_1_1_5": {
                      "state": "3 + 3 = 6 (left: 6 8 12)\n8 - 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\n6 / 2 = 3 (left: 3 8 14)",
                      "thought": null,
                      "value": 0,
                      "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                      "children": {},
                      "closing_remark": null,
                      "backtracked": false
                    }
                  },
                  "closing_remark": null,
                  "backtracked": false,
                  "backtracked_to": "0_0"
                }
              },
              "closing_remark": null,
              "backtracked": false
            }
          },
          "closing_remark": null,
          "backtracked": true,
          "backtracked_to": "0"
        },
        "0_1": {
          "state": "8 - 3 = 5 (left: 3 5 12)",
          "thought": "3 + 5 = 8 (left: 8 12)\n12 - 3 = 9 (left: 5 9)\n12 / 3 = 4 (left: 4 5)\n5 * 3 = 15 (left: 12 15)\n12 - 5 = 7 (left: 3 7)\n5 - 3 = 2 (left: 2 12)\n3 * 5 = 15 (left: 12 15)\n12 + 3 = 15 (left: 5 15)",
          "value": 3.0,
          "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
          "children": {
            "0_1_0": {
              "state": "8 - 3 = 5 (left: 3 5 12)\n3 + 5 = 8 (left: 8 12)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_1": {
              "state": "8 - 3 = 5 (left: 3 5 12)\n12 - 3 = 9 (left: 5 9)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_2": {
              "state": "8 - 3 = 5 (left: 3 5 12)\n12 / 3 = 4 (left: 4 5)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_3": {
              "state": "8 - 3 = 5 (left: 3 5 12)\n5 * 3 = 15 (left: 12 15)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_4": {
              "state": "8 - 3 = 5 (left: 3 5 12)\n12 - 5 = 7 (left: 3 7)",
              "thought": null,
              "value": 0.003,
              "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
              "children": {},
              "closing_remark": null,
              "backtracked": false
            },
            "0_1_5": {
              "state": "8 - 3 = 5 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)",
              "thought": "2 + 12 = 14 (left: 14)\n12 / 2 = 6 (left: 6)\n12 - 2 = 10 (left: 10)\n2 * 12 = 24 (left: 24)",
              "value": 60.0,
              "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
              "children": {
                "0_1_5_0": {
                  "state": "8 - 3 = 5 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                  "thought": null,
                  "value": 0.003,
                  "opening_remark": "Value does not exceed heuristic threshold, childs will not be traversed.",
                  "children": {},
                  "closing_remark": null,
                  "backtracked": false
                },
                "0_1_5_1": {
                  "state": "8 - 3 = 5 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                  "thought": null,
                  "value": 20.002,
                  "opening_remark": "Value exceeds heuristic threshold, childs will be traversed.",
                  "children": {},
                  "closing_remark": null,
                  "backtracked": false
                }
              },
              "closing_remark": null,
              "backtracked": true,
              "backtracked_to": "0_1"
            }
          },
          "closing_remark": null,
          "backtracked": true,
          "backtracked_to": "0_0"
        }
      },
      "closing_remark": null,
      "backtracked": false
    }
  }
}